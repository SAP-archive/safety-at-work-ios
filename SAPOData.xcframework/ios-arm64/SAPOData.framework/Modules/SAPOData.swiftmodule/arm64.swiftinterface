// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SAPOData
import Compression
import Foundation
import SAPCommon
import SAPFoundation
@_exported import SAPOData
import Swift
@_inheritsConvenienceInitializers open class CSDLDocument : SAPOData.ObjectBase {
  public static let csdlInfoKey: Swift.CodingUserInfoKey
  public static let builtinVocabularyNamespaces: SAPOData.StringMap
  final public var canChangeAnything: Swift.Bool
  final public var canRemoveAnything: Swift.Bool
  final public var hasGeneratedProxies: Swift.Bool
  final public var hasOpenEnumerations: Swift.Bool
  final public var proxyVersion: Swift.String?
  final public var versionCode: Swift.Int
  final public var versionText: Swift.String
  final public var originalText: Swift.String?
  final public var resolvedText: Swift.String?
  final public var mainSchema: SAPOData.DataSchema?
  final public var defaultContainer: SAPOData.EntityContainer?
  final public var sourceFile: Swift.String?
  override public init()
  open func addOwner(_ owner: Swift.AnyObject)
  open func addVocabularyReference(ns: Swift.String, uri: Swift.String? = nil, alias: Swift.String? = nil) throws
  open var annotationTerms: SAPOData.AnnotationTermMap {
    get
  }
  open var builtinTypes: SAPOData.DataTypeMap {
    get
  }
  open func complexType(withName name: Swift.String) -> SAPOData.ComplexType
  open var complexTypes: SAPOData.ComplexTypeMap {
    get
  }
  open func dataMethod(withName name: Swift.String) -> SAPOData.DataMethod
  open var dataMethods: SAPOData.DataMethodMap {
    get
  }
  open func dataSchema(withName name: Swift.String) -> SAPOData.DataSchema
  open var dataSchemas: SAPOData.DataSchemaMap {
    get
  }
  open var entityContainers: SAPOData.EntityContainerMap {
    get
  }
  open func entitySet(withName name: Swift.String) -> SAPOData.EntitySet
  open var entitySets: SAPOData.EntitySetMap {
    get
  }
  open func entityType(withName name: Swift.String) -> SAPOData.EntityType
  open var entityTypes: SAPOData.EntityTypeMap {
    get
  }
  open func enumType(withName name: Swift.String) -> SAPOData.EnumType
  open var enumTypes: SAPOData.EnumTypeMap {
    get
  }
  open func hasTopReference(ns: Swift.String) -> Swift.Bool
  open func hasTopSchema(ns: Swift.String) -> Swift.Bool
  open var lookupMethods: SAPOData.DataMethodMap {
    get
  }
  open var lookupSets: SAPOData.EntitySetMap {
    get
  }
  open var lookupSingletons: SAPOData.EntitySetMap {
    get
  }
  open func owners() -> SAPOData.ObjectList
  open var pathAnnotations: SAPOData.PathAnnotationsMap {
    get
  }
  open func removeOwner(_ owner: Swift.AnyObject)
  open func resolveEntity(_ entity: SAPOData.EntityValue) throws
  open func simpleType(withName name: Swift.String) -> SAPOData.SimpleType
  open var simpleTypes: SAPOData.SimpleTypeMap {
    get
  }
  open func singleton(withName name: Swift.String) -> SAPOData.EntitySet
  open var singletons: SAPOData.EntitySetMap {
    get
  }
  open var topAliases: SAPOData.StringMap {
    get
  }
  open var topReferences: SAPOData.CsdlReferenceList {
    get
  }
  open var topSchemas: SAPOData.DataSchemaList {
    get
  }
  open var xmlNamespaces: SAPOData.StringMap {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CSDLError : SAPOData.DataSchemaError {
  final public var element: SAPOData.XmlElement?
  override public init()
  open class func cannotFetch(url: Swift.String) -> SAPOData.CSDLError
  open class func unknownSchema(ns: Swift.String) -> SAPOData.CSDLError
  open class func withCause(_ cause: Swift.Error?) -> SAPOData.CSDLError
  open class func withCauseAndMessage(cause: Swift.Error?, message: Swift.String?) -> SAPOData.CSDLError
  open class func withElement(_ element: SAPOData.XmlElement, message: Swift.String) -> SAPOData.CSDLError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.CSDLError
  @objc deinit
}
@_inheritsConvenienceInitializers open class CSDLFetcher : SAPOData.ObjectBase {
  override public init()
  open func accept(uri: Swift.String, ns: Swift.String) throws -> Swift.Bool
  open func fetch(uri: Swift.String, ns: Swift.String) throws -> Swift.String
  open func ignore(uri: Swift.String, ns: Swift.String) throws -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CSDLOption {
  public static let processMixedVersions: Swift.Int
  public static let retainOriginalText: Swift.Int
  public static let retainResolvedText: Swift.Int
  public static let ignoreExternalReferences: Swift.Int
  public static let ignoreInternalReferences: Swift.Int
  public static let ignoreStandardReferences: Swift.Int
  public static let ignoreAllReferences: Swift.Int
  public static let ignoreEdmAnnotations: Swift.Int
  public static let ignoreXmlAnnotations: Swift.Int
  public static let ignoreAllAnnotations: Swift.Int
  public static let ignoreUndefinedTerms: Swift.Int
  public static let resolveUndefinedTerms: Swift.Int
  public static let warnAboutUndefinedTerms: Swift.Int
  public static let traceParsingOfElements: Swift.Int
  public static let disableNameValidation: Swift.Int
  public static let allowCaseConflicts: Swift.Int
  public static let defaultVariableScale: Swift.Int
  public static let defaultVariableSrid: Swift.Int
  public static let disableFacetWarnings: Swift.Int
  public static let strictFacetWarnings: Swift.Int
  public static let disableLoggingOfErrors: Swift.Int
  public static let disableLoggingOfWarnings: Swift.Int
  public static let failIfProviderIncompatible: Swift.Int
  public static let warnIfProviderIncompatible: Swift.Int
  public static let logWithUnqualifiedFileNames: Swift.Int
  public static let excludeServerOnlyElements: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers open class CSDLParser : SAPOData.ObjectBase {
  final public var csdlFetcher: SAPOData.CSDLFetcher?
  final public var csdlOptions: Swift.Int
  final public var logErrors: Swift.Bool
  final public var logWarnings: Swift.Bool
  final public var traceRequests: Swift.Bool
  final public var excludeServerOnly: Swift.Bool
  final public var serviceName: Swift.String?
  override public init()
  open func includeNamespace(ns: Swift.String, alias: Swift.String? = nil)
  open func includeReference(uri: Swift.String, ns: Swift.String, alias: Swift.String? = nil)
  open func includeSchema(_ schema: SAPOData.DataSchema)
  open func parse(_ text: Swift.String, url: Swift.String) throws -> SAPOData.CSDLDocument
  open func parseInProxy(_ text: Swift.String, url: Swift.String) -> SAPOData.CSDLDocument
  @objc deinit
}
open class CsdlCompatibilityChecker : SAPOData.ObjectBase {
  public init(oldMetadata: SAPOData.CSDLDocument, newMetadata: SAPOData.CSDLDocument)
  open func check() throws
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class CsdlIdentifier {
  public static func fix(name: Swift.String) -> Swift.String
  public static func fixNamespace(name: Swift.String) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class CsdlReference : SAPOData.ObjectBase {
  final public var version: Swift.Int
  final public var uri: Swift.String
  final public var includes: SAPOData.CsdlReference.IncludeList
  override public init()
  @_inheritsConvenienceInitializers open class Include : SAPOData.ObjectBase {
    final public var namespace: Swift.String
    final public var alias: Swift.String?
    override public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class IncludeList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.CsdlReference.Include {
      get
      set
    }
    public static let empty: SAPOData.CsdlReference.IncludeList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.CsdlReference.Include)
    open func append(contentsOf list: SAPOData.CsdlReference.IncludeList)
    open func appendThis(_ item: SAPOData.CsdlReference.Include) -> SAPOData.CsdlReference.IncludeList
    open func copy() -> SAPOData.CsdlReference.IncludeList
    open func first() -> SAPOData.CsdlReference.Include
    open class func fromArray(_ array: Swift.Array<SAPOData.CsdlReference.Include>) -> SAPOData.CsdlReference.IncludeList
    open func includes(item: SAPOData.CsdlReference.Include) -> Swift.Bool
    open func indexOf(item: SAPOData.CsdlReference.Include, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.CsdlReference.Include)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.CsdlReference.IncludeList)
    open func item(at index: Swift.Int) -> SAPOData.CsdlReference.Include
    open func last() -> SAPOData.CsdlReference.Include
    open func lastIndexOf(item: SAPOData.CsdlReference.Include, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference.Include>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.CsdlReference.IncludeList
    open func single() -> SAPOData.CsdlReference.Include
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CsdlReference.IncludeList
    open func toArray() -> Swift.Array<SAPOData.CsdlReference.Include>
    open func update(at index: Swift.Int, item: SAPOData.CsdlReference.Include)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference.Include>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference.Include>>
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CsdlReferenceList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.CsdlReference {
    get
    set
  }
  public static let empty: SAPOData.CsdlReferenceList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.CsdlReference)
  open func append(contentsOf list: SAPOData.CsdlReferenceList)
  open func appendThis(_ item: SAPOData.CsdlReference) -> SAPOData.CsdlReferenceList
  open func copy() -> SAPOData.CsdlReferenceList
  open func first() -> SAPOData.CsdlReference
  open class func fromArray(_ array: Swift.Array<SAPOData.CsdlReference>) -> SAPOData.CsdlReferenceList
  open func includes(item: SAPOData.CsdlReference) -> Swift.Bool
  open func indexOf(item: SAPOData.CsdlReference, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.CsdlReference)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.CsdlReferenceList)
  open func item(at index: Swift.Int) -> SAPOData.CsdlReference
  open func last() -> SAPOData.CsdlReference
  open func lastIndexOf(item: SAPOData.CsdlReference, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.CsdlReferenceList
  open func single() -> SAPOData.CsdlReference
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CsdlReferenceList
  open func toArray() -> Swift.Array<SAPOData.CsdlReference>
  open func update(at index: Swift.Int, item: SAPOData.CsdlReference)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.CsdlReference>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BigInteger : SAPOData.ObjectBase {
  convenience public init(_ value: Swift.Int)
  public func decimalValue() -> Foundation.Decimal
  convenience public init(_ value: Foundation.Decimal)
  convenience public init(_ text: Swift.String)
  open func abs() -> SAPOData.BigInteger
  open func add(_ p_y: SAPOData.BigInteger) -> SAPOData.BigInteger
  open func byteValue() -> Swift.Int
  open func compareTo(_ p_y: SAPOData.BigInteger) -> Swift.Int
  open func divide(_ p_y: SAPOData.BigInteger) -> SAPOData.BigInteger
  open func doubleValue() -> Swift.Double
  open func equalTo(_ y: SAPOData.BigInteger) -> Swift.Bool
  open func floatValue() -> Swift.Float
  open class func fromByte(_ value: Swift.Int) -> SAPOData.BigInteger
  open class func fromDouble(_ value: Swift.Double) -> SAPOData.BigInteger
  open class func fromFloat(_ value: Swift.Float) -> SAPOData.BigInteger
  open class func fromInt(_ value: Swift.Int) -> SAPOData.BigInteger
  open class func fromLong(_ value: Swift.Int64) -> SAPOData.BigInteger
  open class func fromShort(_ value: Swift.Int) -> SAPOData.BigInteger
  open func greaterEqual(_ y: SAPOData.BigInteger) -> Swift.Bool
  open func greaterThan(_ y: SAPOData.BigInteger) -> Swift.Bool
  open func intValue() -> Swift.Int
  open func lessEqual(_ y: SAPOData.BigInteger) -> Swift.Bool
  open func lessThan(_ y: SAPOData.BigInteger) -> Swift.Bool
  open func longValue() -> Swift.Int64
  open func multiply(_ p_y: SAPOData.BigInteger) -> SAPOData.BigInteger
  open func negate() -> SAPOData.BigInteger
  open func notEqual(_ y: SAPOData.BigInteger) -> Swift.Bool
  open class func parse(_ text: Swift.String) -> SAPOData.BigInteger?
  open func remainder(_ y: SAPOData.BigInteger) -> SAPOData.BigInteger
  open func shortValue() -> Swift.Int
  open func sign() -> Swift.Int
  open func subtract(_ p_y: SAPOData.BigInteger) -> SAPOData.BigInteger
  override open func toString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Single {
  public static func optional<T>(_ array: [T]) throws -> T?
  public static func required<T>(_ array: [T]) throws -> T
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AtomDeltaStream : SAPOData.DeltaStream {
  override open func abort() throws
  override open func close() throws
  open class func fromStream(_ stream: SAPOData.CharStream, context: SAPOData.DataContext) throws -> SAPOData.AtomDeltaStream
  override open func next() throws -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class AtomError : SAPOData.DataFormatError {
  override public init()
  open class func cannotParse(_ value: Swift.String, type: Swift.String) -> SAPOData.AtomError
  open class func withCause(_ cause: Swift.Error) -> SAPOData.AtomError
  open class func withMessage(_ message: Swift.String) -> SAPOData.AtomError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AtomValue {
  public static func entryDocument(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func errorResponse(element: SAPOData.XmlElement, context: SAPOData.DataContext) -> SAPOData.ErrorResponse
  public static func feedDocument(list: SAPOData.EntityValueList, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func formatCall(_ call: SAPOData.DataMethodCall, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func formatDocument(_ value: SAPOData.DataValue, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func formatLink(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> SAPOData.XmlDocument
  public static func fromBasicList(element: SAPOData.XmlElement, list: SAPOData.DataValueList, context: SAPOData.DataContext)
  public static func fromComplexList(element: SAPOData.XmlElement, list: SAPOData.ComplexValueList, context: SAPOData.DataContext)
  public static func fromComplexValue(element: SAPOData.XmlElement, complex: SAPOData.ComplexValue?, context: SAPOData.DataContext)
  public static func fromDataValue(element: SAPOData.XmlElement, value: SAPOData.DataValue?, context: SAPOData.DataContext)
  public static func fromEntityList(feed: SAPOData.XmlElement, list: SAPOData.EntityValueList, context: SAPOData.DataContext)
  public static func fromEntityValue(entry: SAPOData.XmlElement, entity: SAPOData.EntityValue?, context: SAPOData.DataContext)
  public static func parseDocument(element: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValue?
  public static func parseLink(element: SAPOData.XmlElement, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValue
  public static func parseLinks(element: SAPOData.XmlElement, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValueList
  public static func parseReference(uri: Swift.String, entityType: SAPOData.EntityType, entitySet: SAPOData.EntitySet, context: SAPOData.DataContext, binding: Swift.Bool = false) throws -> SAPOData.EntityValue
  public static func toBasicList(element: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValueList
  public static func toComplexList(element: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.ComplexValueList
  public static func toComplexValue(element: SAPOData.XmlElement?, type: SAPOData.ComplexType, context: SAPOData.DataContext) throws -> SAPOData.ComplexValue?
  public static func toDataValue(element: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValue?
  public static func toEntityList(feed: SAPOData.XmlElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.EntityValueList
  public static func toEntityValue(entry: SAPOData.XmlElement?, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValue?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class GeoAtom {
  public static func format(geo: SAPOData.XmlElement, value: SAPOData.DataValue)
  public static func parse(geo: SAPOData.XmlElement, type: SAPOData.DataType) throws -> SAPOData.DataValue
  public static func parseType(geoNode: SAPOData.XmlNode, type: SAPOData.DataType) throws -> Swift.String
  @objc deinit
}
public class ObjectHashWrapper : Swift.Hashable {
  final public let hash: Swift.Int
  final public let text: Swift.String
  final public let value: Swift.AnyObject?
  public var hashValue: Swift.Int {
    get
  }
  public init(_ value: Swift.AnyObject?)
  @objc deinit
  public func hash(into hasher: inout Swift.Hasher)
}
public class StringHashWrapper : Swift.Hashable {
  final public let hash: Swift.Int
  final public let text: Swift.String
  public var hashValue: Swift.Int {
    get
  }
  public init(_ text: Swift.String)
  @objc deinit
  public func hash(into hasher: inout Swift.Hasher)
}
public func == (lhs: SAPOData.ObjectHashWrapper, rhs: SAPOData.ObjectHashWrapper) -> Swift.Bool
public func == (lhs: SAPOData.StringHashWrapper, rhs: SAPOData.StringHashWrapper) -> Swift.Bool
@_inheritsConvenienceInitializers open class AggregateExpression : SAPOData.ObjectBase {
  override public init()
  open var aggregateFromList: SAPOData.AggregateFromList {
    get
  }
  open var alias: Swift.String? {
    get
  }
  open class func count(alias: Swift.String) throws -> SAPOData.AggregateExpression
  open class func create(_ value: SAPOData.DataValue?, method: SAPOData.AggregateMethod?, alias: Swift.String?) throws -> SAPOData.AggregateExpression
  open class func createWithNavigationPath(_ value: SAPOData.DataValue?, method: SAPOData.AggregateMethod?, alias: Swift.String?, navigationPath: SAPOData.PropertyPath?) throws -> SAPOData.AggregateExpression
  open func from(_ propertyPath: SAPOData.PropertyPath, method: SAPOData.AggregateMethod?) throws -> SAPOData.AggregateExpression
  open var isCount: Swift.Bool {
    get
  }
  open var method: SAPOData.AggregateMethod? {
    get
  }
  open var navigationPath: SAPOData.PropertyPath? {
    get
  }
  open var value: SAPOData.DataValue? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AggregateExpressionList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.AggregateExpression {
    get
    set
  }
  public static let empty: SAPOData.AggregateExpressionList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.AggregateExpression)
  open func append(contentsOf list: SAPOData.AggregateExpressionList)
  open func appendThis(_ item: SAPOData.AggregateExpression) -> SAPOData.AggregateExpressionList
  open func copy() -> SAPOData.AggregateExpressionList
  open func first() -> SAPOData.AggregateExpression
  open class func fromArray(_ array: Swift.Array<SAPOData.AggregateExpression>) -> SAPOData.AggregateExpressionList
  open func includes(item: SAPOData.AggregateExpression) -> Swift.Bool
  open func indexOf(item: SAPOData.AggregateExpression, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.AggregateExpression)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.AggregateExpressionList)
  open func item(at index: Swift.Int) -> SAPOData.AggregateExpression
  open func last() -> SAPOData.AggregateExpression
  open func lastIndexOf(item: SAPOData.AggregateExpression, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AggregateExpression>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AggregateExpressionList
  open func single() -> SAPOData.AggregateExpression
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AggregateExpressionList
  open func toArray() -> Swift.Array<SAPOData.AggregateExpression>
  open func update(at index: Swift.Int, item: SAPOData.AggregateExpression)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateExpression>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateExpression>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AggregateFrom : SAPOData.ObjectBase {
  open class func create(propertyPath: SAPOData.PropertyPath, method: SAPOData.AggregateMethod?) throws -> SAPOData.AggregateFrom
  open var method: SAPOData.AggregateMethod? {
    get
  }
  open var propertyPath: SAPOData.PropertyPath {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AggregateFromList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.AggregateFrom {
    get
    set
  }
  public static let empty: SAPOData.AggregateFromList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.AggregateFrom)
  open func append(contentsOf list: SAPOData.AggregateFromList)
  open func appendThis(_ item: SAPOData.AggregateFrom) -> SAPOData.AggregateFromList
  open func copy() -> SAPOData.AggregateFromList
  open func first() -> SAPOData.AggregateFrom
  open class func fromArray(_ array: Swift.Array<SAPOData.AggregateFrom>) -> SAPOData.AggregateFromList
  open func includes(item: SAPOData.AggregateFrom) -> Swift.Bool
  open func indexOf(item: SAPOData.AggregateFrom, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.AggregateFrom)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.AggregateFromList)
  open func item(at index: Swift.Int) -> SAPOData.AggregateFrom
  open func last() -> SAPOData.AggregateFrom
  open func lastIndexOf(item: SAPOData.AggregateFrom, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AggregateFrom>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AggregateFromList
  open func single() -> SAPOData.AggregateFrom
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AggregateFromList
  open func toArray() -> Swift.Array<SAPOData.AggregateFrom>
  open func update(at index: Swift.Int, item: SAPOData.AggregateFrom)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateFrom>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateFrom>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AggregateMethod : SAPOData.ObjectBase {
  public static let sum: SAPOData.AggregateMethod
  public static let average: SAPOData.AggregateMethod
  public static let minimum: SAPOData.AggregateMethod
  public static let maximum: SAPOData.AggregateMethod
  public static let countDistinct: SAPOData.AggregateMethod
  open class func custom(_ name: Swift.String) throws -> SAPOData.AggregateMethod
  open var name: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AggregateValue : SAPOData.TransformValue {
  open var aggregateExpressionList: SAPOData.AggregateExpressionList {
    get
  }
  open class func count(as alias: Swift.String) -> SAPOData.AggregateValue
  open class func create(_ value: SAPOData.DataValue?, method: SAPOData.AggregateMethod?, alias: Swift.String?) -> SAPOData.AggregateValue
  open class func createWithExpressionList(aggregateExpressionList: SAPOData.AggregateExpressionList) -> SAPOData.AggregateValue
  @objc deinit
}
@_inheritsConvenienceInitializers open class AggregateValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.AggregateValue {
    get
    set
  }
  public static let empty: SAPOData.AggregateValueList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.AggregateValue)
  open func append(contentsOf list: SAPOData.AggregateValueList)
  open func appendThis(_ item: SAPOData.AggregateValue) -> SAPOData.AggregateValueList
  open func copy() -> SAPOData.AggregateValueList
  open func first() -> SAPOData.AggregateValue
  open class func fromArray(_ array: Swift.Array<SAPOData.AggregateValue>) -> SAPOData.AggregateValueList
  open func includes(item: SAPOData.AggregateValue) -> Swift.Bool
  open func indexOf(item: SAPOData.AggregateValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.AggregateValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.AggregateValueList)
  open func item(at index: Swift.Int) -> SAPOData.AggregateValue
  open func last() -> SAPOData.AggregateValue
  open func lastIndexOf(item: SAPOData.AggregateValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AggregateValue>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AggregateValueList
  open func single() -> SAPOData.AggregateValue
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AggregateValueList
  open func toArray() -> Swift.Array<SAPOData.AggregateValue>
  open func update(at index: Swift.Int, item: SAPOData.AggregateValue)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AggregateValue>>
}
@_hasMissingDesignatedInitializers open class AmountTransform : SAPOData.TransformValue {
  open var amount: SAPOData.DataValue {
    get
  }
  open var name: Swift.String {
    get
  }
  open var value: SAPOData.DataValue {
    get
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class Annotation : SAPOData.ObjectBase {
  final public var qualifier: Swift.String?
  final public var explicitNull: Swift.Bool
  final public var explicitValue: SAPOData.DataValue?
  final public var sourceLine: Swift.Int
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open class func equal(a: SAPOData.Annotation?, b: SAPOData.Annotation?) -> Swift.Bool
  open var term: SAPOData.AnnotationTerm {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  open var value: SAPOData.DataValue? {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class AnnotationEquality : SAPOData.Equality {
  public static let singleton: SAPOData.Equality
  override open func equal(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class AnnotationList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.Annotation {
    get
    set
  }
  public static let empty: SAPOData.AnnotationList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.Annotation)
  open func append(contentsOf list: SAPOData.AnnotationList)
  open func appendThis(_ item: SAPOData.Annotation) -> SAPOData.AnnotationList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.AnnotationList
  open func first() -> SAPOData.Annotation
  open class func fromArray(_ array: Swift.Array<SAPOData.Annotation>) -> SAPOData.AnnotationList
  open func includes(item: SAPOData.Annotation) -> Swift.Bool
  open func indexOf(item: SAPOData.Annotation, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.Annotation)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.AnnotationList)
  open func item(at index: Swift.Int) -> SAPOData.Annotation
  open func last() -> SAPOData.Annotation
  open func lastIndexOf(item: SAPOData.Annotation, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.Annotation>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnnotationList
  open func single() -> SAPOData.Annotation
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnnotationList
  open func toArray() -> Swift.Array<SAPOData.Annotation>
  open func update(at index: Swift.Int, item: SAPOData.Annotation)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.Annotation>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.Annotation>>
}
open class AnnotationMap : SAPOData.MapBase {
  public static let empty: SAPOData.AnnotationMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.Annotation)
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.AnnotationMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.Annotation
  open func sortedEntries() -> SAPOData.AnnotationMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.AnnotationList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.Annotation)
  open func updateThis(key: Swift.String, value: SAPOData.Annotation) -> SAPOData.AnnotationMap
  open func updateValue(_ value: SAPOData.Annotation, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.Annotation?
  open func values() -> SAPOData.AnnotationList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.Annotation {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.AnnotationMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.AnnotationMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.AnnotationMap.Entry)
    open func append(contentsOf list: SAPOData.AnnotationMap.EntryList)
    open func appendThis(_ item: SAPOData.AnnotationMap.Entry) -> SAPOData.AnnotationMap.EntryList
    open func copy() -> SAPOData.AnnotationMap.EntryList
    open func first() -> SAPOData.AnnotationMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.AnnotationMap.Entry>) -> SAPOData.AnnotationMap.EntryList
    open func includes(item: SAPOData.AnnotationMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.AnnotationMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.AnnotationMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.AnnotationMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.AnnotationMap.Entry
    open func last() -> SAPOData.AnnotationMap.Entry
    open func lastIndexOf(item: SAPOData.AnnotationMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnnotationMap.EntryList
    open func single() -> SAPOData.AnnotationMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnnotationMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.AnnotationMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.AnnotationMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationMap.Entry>>
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class AnnotationTerm : SAPOData.ObjectBase {
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var xmlAttribute: Swift.String?
  final public var baseTerm: SAPOData.AnnotationTerm?
  final public var defaultValue: SAPOData.DataValue?
  final public var appliesTo: SAPOData.StringList
  final public var isUnicode: Swift.Bool
  final public var minLength: Swift.Int
  final public var maxLength: Swift.Int
  final public var precision: Swift.Int
  final public var scale: Swift.Int
  final public var srid: Swift.Int
  final public var isOptional: Swift.Bool
  final public var sourceLine: Swift.Int
  final public var isInferred: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) throws -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open class func equal(a: SAPOData.AnnotationTerm?, b: SAPOData.AnnotationTerm?) -> Swift.Bool
  open var fixedLength: Swift.Bool {
    get
  }
  open var name: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  open var type: SAPOData.DataType {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class AnnotationTermList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.AnnotationTerm {
    get
    set
  }
  public static let empty: SAPOData.AnnotationTermList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.AnnotationTerm)
  open func append(contentsOf list: SAPOData.AnnotationTermList)
  open func appendThis(_ item: SAPOData.AnnotationTerm) -> SAPOData.AnnotationTermList
  open func copy() -> SAPOData.AnnotationTermList
  open func first() -> SAPOData.AnnotationTerm
  open class func fromArray(_ array: Swift.Array<SAPOData.AnnotationTerm>) -> SAPOData.AnnotationTermList
  open func includes(item: SAPOData.AnnotationTerm) -> Swift.Bool
  open func indexOf(item: SAPOData.AnnotationTerm, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.AnnotationTerm)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.AnnotationTermList)
  open func item(at index: Swift.Int) -> SAPOData.AnnotationTerm
  open func last() -> SAPOData.AnnotationTerm
  open func lastIndexOf(item: SAPOData.AnnotationTerm, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTerm>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnnotationTermList
  open func single() -> SAPOData.AnnotationTerm
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnnotationTermList
  open func toArray() -> Swift.Array<SAPOData.AnnotationTerm>
  open func update(at index: Swift.Int, item: SAPOData.AnnotationTerm)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTerm>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTerm>>
}
open class AnnotationTermMap : SAPOData.MapBase {
  public static let empty: SAPOData.AnnotationTermMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.AnnotationTerm) throws
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.AnnotationTermMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.AnnotationTerm
  open func sortedEntries() throws -> SAPOData.AnnotationTermMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.AnnotationTermList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.AnnotationTerm)
  open func updateThis(key: Swift.String, value: SAPOData.AnnotationTerm) -> SAPOData.AnnotationTermMap
  open func updateValue(_ value: SAPOData.AnnotationTerm, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.AnnotationTerm?
  open func values() -> SAPOData.AnnotationTermList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.AnnotationTerm {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.AnnotationTermMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.AnnotationTermMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.AnnotationTermMap.Entry)
    open func append(contentsOf list: SAPOData.AnnotationTermMap.EntryList)
    open func appendThis(_ item: SAPOData.AnnotationTermMap.Entry) -> SAPOData.AnnotationTermMap.EntryList
    open func copy() -> SAPOData.AnnotationTermMap.EntryList
    open func first() -> SAPOData.AnnotationTermMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.AnnotationTermMap.Entry>) -> SAPOData.AnnotationTermMap.EntryList
    open func includes(item: SAPOData.AnnotationTermMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.AnnotationTermMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.AnnotationTermMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.AnnotationTermMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.AnnotationTermMap.Entry
    open func last() -> SAPOData.AnnotationTermMap.Entry
    open func lastIndexOf(item: SAPOData.AnnotationTermMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTermMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnnotationTermMap.EntryList
    open func single() -> SAPOData.AnnotationTermMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnnotationTermMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.AnnotationTermMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.AnnotationTermMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTermMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AnnotationTermMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class AnyList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.AnyObject? {
    get
    set
  }
  public static let empty: SAPOData.AnyList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.AnyObject?)
  open func append(contentsOf list: SAPOData.AnyList)
  open func appendThis(_ item: Swift.AnyObject?) -> SAPOData.AnyList
  open func copy() -> SAPOData.AnyList
  open func first() -> Swift.AnyObject?
  open class func fromArray(_ array: Swift.Array<Swift.AnyObject?>) -> SAPOData.AnyList
  open func includes(item: Swift.AnyObject?) -> Swift.Bool
  open func indexOf(item: Swift.AnyObject?, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.AnyObject?)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.AnyList)
  open func item(at index: Swift.Int) -> Swift.AnyObject?
  open func last() -> Swift.AnyObject?
  open func lastIndexOf(item: Swift.AnyObject?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.AnyObject?>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnyList
  open func single() -> Swift.AnyObject?
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnyList
  open func toArray() -> Swift.Array<Swift.AnyObject?>
  open func update(at index: Swift.Int, item: Swift.AnyObject?)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.AnyObject?>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.AnyObject?>>
}
open class AnyMap : SAPOData.MapBase {
  public static let empty: SAPOData.AnyMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.AnyMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.AnyObject?
  open func sortedEntries() -> SAPOData.AnyMap.EntryList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.AnyObject?)
  open func updateThis(key: Swift.String, value: Swift.AnyObject?) -> SAPOData.AnyMap
  open func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.AnyObject?
  open func values() -> SAPOData.AnyList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: Swift.AnyObject? {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.AnyMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.AnyMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.AnyMap.Entry)
    open func append(contentsOf list: SAPOData.AnyMap.EntryList)
    open func appendThis(_ item: SAPOData.AnyMap.Entry) -> SAPOData.AnyMap.EntryList
    open func copy() -> SAPOData.AnyMap.EntryList
    open func first() -> SAPOData.AnyMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.AnyMap.Entry>) -> SAPOData.AnyMap.EntryList
    open func includes(item: SAPOData.AnyMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.AnyMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.AnyMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.AnyMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.AnyMap.Entry
    open func last() -> SAPOData.AnyMap.Entry
    open func lastIndexOf(item: SAPOData.AnyMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.AnyMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.AnyMap.EntryList
    open func single() -> SAPOData.AnyMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.AnyMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.AnyMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.AnyMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.AnyMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.AnyMap.Entry>>
  }
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class ArrayFunction {
  public static func append<T>(_ value: inout Swift.Array<T>, _ item: T)
  public static func appendThis<T>(_ value: inout Swift.Array<T>, _ item: T) -> Swift.Array<T>
  public static func appendAll<T>(_ value: inout Swift.Array<T>, list: Swift.Array<T>) -> Swift.Array<T>
  public static func copy<T>(_ value: Swift.Array<T>) -> Swift.Array<T>
  public static func equals<T>(_ value: Swift.Array<T>, _ list: Swift.Array<T>) -> Swift.Bool
  public static func first<T>(_ value: Swift.Array<T>) -> T
  public static func item<T>(_ value: Swift.Array<T>, at index: Swift.Int) -> T
  public static func hashCode<T>(_ value: Swift.Array<T>) -> Swift.Int
  public static func includes<T>(_ value: Swift.Array<T>, _ item: T) -> Swift.Bool
  public static func indexOf<T>(_ value: Swift.Array<T>, _ item: T) -> Swift.Int
  public static func insert<T>(_ value: inout Swift.Array<T>, at index: Swift.Int, item: T)
  public static func insertAll<T>(_ value: inout Swift.Array<T>, at index: Swift.Int, list: Swift.Array<T>)
  public static func last<T>(_ value: Swift.Array<T>) -> T
  public static func lastIndexOf<T>(_ value: Swift.Array<T>, item: T) -> Swift.Int
  public static func remove<T>(_ value: inout Swift.Array<T>, at index: Swift.Int)
  public static func removeAll<T>(_ value: inout Swift.Array<T>)
  public static func removeFirst<T>(_ value: inout Swift.Array<T>)
  public static func removeLast<T>(_ value: inout Swift.Array<T>)
  public static func removeRange<T>(_ value: inout Swift.Array<T>, _ start: Swift.Int, _ end: Swift.Int)
  public static func reverse<T>(_ value: inout Swift.Array<T>) -> Swift.Array<T>
  public static func set<T>(_ value: inout Swift.Array<T>, _ index: Swift.Int, _ item: T)
  public static func single<T>(_ value: inout Swift.Array<T>) -> T
  public static func slice<T>(_ value: Swift.Array<T>, _ start: Swift.Int) -> Swift.Array<T>
  public static func slice<T>(_ value: Swift.Array<T>, _ start: Swift.Int, _ end: Swift.Int) -> Swift.Array<T>
  public static func toString<T>(_ value: Swift.Array<T>) -> Foundation.NSString
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ArrayProperty {
  public static func isEmpty<T>(_ value: Swift.Array<T>) -> Swift.Bool
  public static func length<T>(_ value: Swift.Array<T>) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BasicType {
  public static let unknown: SAPOData.DataType
  public static let object: SAPOData.DataType
  public static let string: SAPOData.DataType
  public static let binary: SAPOData.DataType
  public static let boolean: SAPOData.DataType
  public static let char: SAPOData.DataType
  public static let byte: SAPOData.DataType
  public static let short: SAPOData.DataType
  public static let int: SAPOData.DataType
  public static let long: SAPOData.DataType
  public static let integer: SAPOData.DataType
  public static let decimal: SAPOData.DataType
  public static let float: SAPOData.DataType
  public static let double: SAPOData.DataType
  public static let unsignedByte: SAPOData.DataType
  public static let unsignedShort: SAPOData.DataType
  public static let unsignedInt: SAPOData.DataType
  public static let unsignedLong: SAPOData.DataType
  public static let guidValue: SAPOData.DataType
  public static let byteStream: SAPOData.DataType
  public static let charStream: SAPOData.DataType
  public static let deltaStream: SAPOData.DataType
  public static let streamLink: SAPOData.DataType
  public static let list: SAPOData.DataType
  public static let localDate: SAPOData.DataType
  public static let localTime: SAPOData.DataType
  public static let localDateTime: SAPOData.DataType
  public static let globalDateTime: SAPOData.DataType
  public static let dayTimeDuration: SAPOData.DataType
  public static let yearMonthDuration: SAPOData.DataType
  public static let geographyValue: SAPOData.DataType
  public static let geographyPoint: SAPOData.DataType
  public static let geographyLineString: SAPOData.DataType
  public static let geographyPolygon: SAPOData.DataType
  public static let geographyMultiPoint: SAPOData.DataType
  public static let geographyMultiLineString: SAPOData.DataType
  public static let geographyMultiPolygon: SAPOData.DataType
  public static let geographyCollection: SAPOData.DataType
  public static let geometryValue: SAPOData.DataType
  public static let geometryPoint: SAPOData.DataType
  public static let geometryLineString: SAPOData.DataType
  public static let geometryPolygon: SAPOData.DataType
  public static let geometryMultiPoint: SAPOData.DataType
  public static let geometryMultiLineString: SAPOData.DataType
  public static let geometryMultiPolygon: SAPOData.DataType
  public static let geometryCollection: SAPOData.DataType
  public static let edmPrimitive: SAPOData.DataType
  public static let path: SAPOData.DataType
  public static let pathExpression: SAPOData.DataType
  public static let annotationPath: SAPOData.DataType
  public static let navigationPath: SAPOData.DataType
  public static let structuralPath: SAPOData.DataType
  public static let propertyPath: SAPOData.DataType
  public static let dynamicPath: SAPOData.DataType
  @objc deinit
}
@_inheritsConvenienceInitializers open class BinaryList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Foundation.Data]) -> SAPOData.BinaryList
  public func toArray() -> [Foundation.Data]
  public subscript(index: Swift.Int) -> Foundation.Data {
    get
    set
  }
  public static let empty: SAPOData.BinaryList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Foundation.Data)
  open func append(contentsOf list: SAPOData.BinaryList)
  open func appendThis(_ item: Foundation.Data) -> SAPOData.BinaryList
  open func copy() -> SAPOData.BinaryList
  open func first() -> Foundation.Data
  open func includes(item: Foundation.Data) -> Swift.Bool
  open func indexOf(item: Foundation.Data, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Foundation.Data)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.BinaryList)
  open func item(at index: Swift.Int) -> Foundation.Data
  open func last() -> Foundation.Data
  open func lastIndexOf(item: Foundation.Data, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Foundation.Data>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.BinaryList
  open func single() -> Foundation.Data
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.BinaryList
  open class func split(_ value: Foundation.Data, separator: Foundation.Data, limit: Swift.Int = (2147483647 as Int)) -> SAPOData.BinaryList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Foundation.Data)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Foundation.Data>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Foundation.Data>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BinaryValue : SAPOData.DataValue {
  public static let empty: SAPOData.BinaryValue
  open class func compare(_ left: SAPOData.BinaryValue, _ right: SAPOData.BinaryValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.BinaryValue?, _ right: SAPOData.BinaryValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Foundation.Data) -> SAPOData.BinaryValue
  open class func of(optional value: Foundation.Data?) -> SAPOData.BinaryValue?
  open class func optional(_ value: Swift.AnyObject?) -> Foundation.Data?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Foundation.Data
  open var value: Foundation.Data {
    get
  }
  @objc deinit
}
public protocol BindingPath : AnyObject {
}
@_inheritsConvenienceInitializers open class BooleanList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Bool]) -> SAPOData.BooleanList
  public func toArray() -> [Swift.Bool]
  public subscript(index: Swift.Int) -> Swift.Bool {
    get
    set
  }
  public static let empty: SAPOData.BooleanList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Bool)
  open func append(contentsOf list: SAPOData.BooleanList)
  open func appendThis(_ item: Swift.Bool) -> SAPOData.BooleanList
  open func copy() -> SAPOData.BooleanList
  open func first() -> Swift.Bool
  open func includes(item: Swift.Bool) -> Swift.Bool
  open func indexOf(item: Swift.Bool, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Bool)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.BooleanList)
  open func item(at index: Swift.Int) -> Swift.Bool
  open func last() -> Swift.Bool
  open func lastIndexOf(item: Swift.Bool, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Bool>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.BooleanList
  open func single() -> Swift.Bool
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.BooleanList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Bool)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Bool>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Bool>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BooleanValue : SAPOData.DataValue {
  open class func compare(_ left: SAPOData.BooleanValue, _ right: SAPOData.BooleanValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.BooleanValue?, _ right: SAPOData.BooleanValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Bool) -> SAPOData.BooleanValue
  open class func of(optional value: Swift.Bool?) -> SAPOData.BooleanValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Bool?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Bool
  open var value: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BottomTransform : SAPOData.AmountTransform {
  open class func count(amount: Swift.Int, value: SAPOData.DataValue) throws -> SAPOData.BottomTransform
  open class func percent(amount: Swift.Double, value: SAPOData.DataValue) throws -> SAPOData.BottomTransform
  open class func sum(amount: Swift.Double, value: SAPOData.DataValue) throws -> SAPOData.BottomTransform
  @objc deinit
}
@_inheritsConvenienceInitializers open class ByteList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Int]) -> SAPOData.ByteList
  public func toArray() -> [Swift.Int]
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.ByteList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Int)
  open func append(contentsOf list: SAPOData.ByteList)
  open func appendThis(_ item: Swift.Int) -> SAPOData.ByteList
  open func copy() -> SAPOData.ByteList
  open func first() -> Swift.Int
  open func includes(item: Swift.Int) -> Swift.Bool
  open func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Int)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ByteList)
  open func item(at index: Swift.Int) -> Swift.Int
  open func last() -> Swift.Int
  open func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ByteList
  open func single() -> Swift.Int
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ByteList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Int)
  override open func validate(_ value: Swift.AnyObject?) -> Swift.AnyObject?
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
}
@_inheritsConvenienceInitializers open class ByteStream : SAPOData.StreamBase {
  public static let empty: SAPOData.ByteStream
  override public init()
  open func asText() -> SAPOData.CharStream
  open var canUndo: Swift.Bool {
    get
  }
  open func copyTo(target: SAPOData.ByteStream, closeTarget: Swift.Bool = true) throws
  open func copyToFile(_ file: Swift.String) throws
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func fileWriter(file: Swift.String) throws -> SAPOData.ByteStream
  open class func fromBinary(data: Foundation.Data, offset: Swift.Int = (0 as Int), length: Swift.Int = (2147483647 as Int)) -> SAPOData.ByteStream
  open class func fromFile(_ file: Swift.String) throws -> SAPOData.ByteStream
  open class func fromStream(_ stream: SAPOData.StreamBase) -> SAPOData.ByteStream
  open class func fromText(stream: SAPOData.CharStream) -> SAPOData.ByteStream
  open func readAndClose() throws -> Foundation.Data
  open func readBinary(length: Swift.Int = (20000 as Int)) throws -> Foundation.Data?
  open func readByte() throws -> Swift.Int
  open class func toBuffer(_ buffer: SAPOData.ByteBuffer) -> SAPOData.ByteStream
  override open func toString() -> Swift.String
  open func undoRead(_ value: Swift.Int) throws
  open func withUndo() throws -> SAPOData.ByteStream
  open func writeBinary(data: Foundation.Data) throws
  open func writeByte(_ value: Swift.Int) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ByteValue : SAPOData.DataValue {
  public static let zero: SAPOData.ByteValue
  open class func compare(_ left: SAPOData.ByteValue, _ right: SAPOData.ByteValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.ByteValue?, _ right: SAPOData.ByteValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.ByteValue
  open class func of(optional value: Swift.Int?) -> SAPOData.ByteValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  open class func validate(_ value: Swift.Int) -> Swift.Int
  open var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CancelToken : SAPOData.ObjectBase {
  override public init()
  open func addListener(_ listener: SAPOData.CancellationListener)
  open func cancel()
  open var isCancelled: Swift.Bool {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CancellationListener : SAPOData.ObjectBase {
  override public init()
  open func onCancel(token: SAPOData.CancelToken) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class ChangedLink : SAPOData.ObjectBase {
  final public var deltaTime: SAPOData.GlobalDateTime?
  final public var isCreated: Swift.Bool
  final public var isUpdated: Swift.Bool
  final public var isDeleted: Swift.Bool
  override public init()
  open var source: SAPOData.EntityValue {
    get
    set(value)
  }
  open var sourceProperty: SAPOData.Property {
    get
    set(value)
  }
  open var target: SAPOData.EntityValue {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class ChangedLinkList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ChangedLink {
    get
    set
  }
  public static let empty: SAPOData.ChangedLinkList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.ChangedLink)
  open func append(contentsOf list: SAPOData.ChangedLinkList)
  open func appendThis(_ item: SAPOData.ChangedLink) -> SAPOData.ChangedLinkList
  open func copy() -> SAPOData.ChangedLinkList
  open func first() -> SAPOData.ChangedLink
  open class func fromArray(_ array: Swift.Array<SAPOData.ChangedLink>) -> SAPOData.ChangedLinkList
  open func includes(item: SAPOData.ChangedLink) -> Swift.Bool
  open func indexOf(item: SAPOData.ChangedLink, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.ChangedLink)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ChangedLinkList)
  open func item(at index: Swift.Int) -> SAPOData.ChangedLink
  open func last() -> SAPOData.ChangedLink
  open func lastIndexOf(item: SAPOData.ChangedLink, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ChangedLink>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ChangedLinkList
  open func single() -> SAPOData.ChangedLink
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ChangedLinkList
  open func toArray() -> Swift.Array<SAPOData.ChangedLink>
  open func update(at index: Swift.Int, item: SAPOData.ChangedLink)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ChangedLink>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ChangedLink>>
}
@_inheritsConvenienceInitializers open class CharList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Foundation.unichar]) -> SAPOData.CharList
  public func toArray() -> [Foundation.unichar]
  public subscript(index: Swift.Int) -> Foundation.unichar {
    get
    set
  }
  public static let empty: SAPOData.CharList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Foundation.unichar)
  open func append(contentsOf list: SAPOData.CharList)
  open func appendThis(_ item: Foundation.unichar) -> SAPOData.CharList
  open func copy() -> SAPOData.CharList
  open func first() -> Foundation.unichar
  open func includes(item: Foundation.unichar) -> Swift.Bool
  open func indexOf(item: Foundation.unichar, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Foundation.unichar)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.CharList)
  open func item(at index: Swift.Int) -> Foundation.unichar
  open func last() -> Foundation.unichar
  open func lastIndexOf(item: Foundation.unichar, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Foundation.unichar>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.CharList
  open func single() -> Foundation.unichar
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CharList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Foundation.unichar)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Foundation.unichar>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Foundation.unichar>>
}
@_inheritsConvenienceInitializers open class CharStream : SAPOData.StreamBase {
  public static let empty: SAPOData.CharStream
  override public init()
  open var canUndo: Swift.Bool {
    get
  }
  open func copyTo(target: SAPOData.CharStream, closeTarget: Swift.Bool = true) throws
  open func copyToFile(_ file: Swift.String) throws
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func fileWriter(file: Swift.String) throws -> SAPOData.CharStream
  open class func fromFile(_ file: Swift.String) throws -> SAPOData.CharStream
  open class func fromString(text: Swift.String, offset: Swift.Int = (0 as Int), length: Swift.Int = (2147483647 as Int)) -> SAPOData.CharStream
  open func readAndClose() throws -> Swift.String
  open func readChar() throws -> Swift.Int
  open func readLine() throws -> Swift.String?
  open func readString(length: Swift.Int = (20000 as Int)) throws -> Swift.String?
  open class func toBuffer(_ buffer: SAPOData.CharBuffer) -> SAPOData.CharStream
  override open func toString() -> Swift.String
  open func undoRead(_ value: Foundation.unichar) throws
  open func withUndo() throws -> SAPOData.CharStream
  open func writeChar(_ value: Foundation.unichar) throws
  open func writeLine(text: Swift.String) throws
  open func writeString(text: Swift.String) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class CharValue : SAPOData.DataValue {
  open class func compare(_ left: SAPOData.CharValue?, _ right: SAPOData.CharValue?) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.CharValue?, _ right: SAPOData.CharValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Foundation.unichar) -> SAPOData.CharValue
  open class func of(optional value: Foundation.unichar?) -> SAPOData.CharValue?
  open class func optional(_ value: Swift.AnyObject?) -> Foundation.unichar?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Foundation.unichar
  open var value: Foundation.unichar {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ComplexType : SAPOData.StructureType {
  public static let undefined: SAPOData.ComplexType
  public static let abstractBase: SAPOData.ComplexType
  final public var subtypes: SAPOData.ComplexTypeList?
  override public init()
  override open var code: Swift.Int {
    get
  }
  open var hasSubtypes: Swift.Bool {
    get
  }
  open var hasSupertype: Swift.Bool {
    get
  }
  open func registerFactory(_ factory: SAPOData.ObjectFactory)
  open var supertype: SAPOData.ComplexType? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  open func withFactory(_ factory: SAPOData.ObjectFactory) -> SAPOData.ComplexType
  @objc deinit
}
@_inheritsConvenienceInitializers open class ComplexTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ComplexType {
    get
    set
  }
  public static let empty: SAPOData.ComplexTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.ComplexType)
  open func append(contentsOf list: SAPOData.ComplexTypeList)
  open func appendThis(_ item: SAPOData.ComplexType) -> SAPOData.ComplexTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.ComplexTypeList
  open func first() -> SAPOData.ComplexType
  open class func fromArray(_ array: Swift.Array<SAPOData.ComplexType>) -> SAPOData.ComplexTypeList
  open func includes(item: SAPOData.ComplexType) -> Swift.Bool
  open func indexOf(item: SAPOData.ComplexType, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.ComplexType)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexTypeList)
  open func item(at index: Swift.Int) -> SAPOData.ComplexType
  open func last() -> SAPOData.ComplexType
  open func lastIndexOf(item: SAPOData.ComplexType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexType>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexTypeList
  open func single() -> SAPOData.ComplexType
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexTypeList
  open func toArray() -> Swift.Array<SAPOData.ComplexType>
  open func update(at index: Swift.Int, item: SAPOData.ComplexType)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexType>>
}
open class ComplexTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.ComplexTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.ComplexType)
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.ComplexTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.ComplexType
  open func sortedEntries() -> SAPOData.ComplexTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.ComplexTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.ComplexType)
  open func updateThis(key: Swift.String, value: SAPOData.ComplexType) -> SAPOData.ComplexTypeMap
  open func updateValue(_ value: SAPOData.ComplexType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.ComplexType?
  open func values() -> SAPOData.ComplexTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.ComplexType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.ComplexTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.ComplexTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.ComplexTypeMap.Entry)
    open func append(contentsOf list: SAPOData.ComplexTypeMap.EntryList)
    open func appendThis(_ item: SAPOData.ComplexTypeMap.Entry) -> SAPOData.ComplexTypeMap.EntryList
    open func copy() -> SAPOData.ComplexTypeMap.EntryList
    open func first() -> SAPOData.ComplexTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.ComplexTypeMap.Entry>) -> SAPOData.ComplexTypeMap.EntryList
    open func includes(item: SAPOData.ComplexTypeMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.ComplexTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.ComplexTypeMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexTypeMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.ComplexTypeMap.Entry
    open func last() -> SAPOData.ComplexTypeMap.Entry
    open func lastIndexOf(item: SAPOData.ComplexTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexTypeMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexTypeMap.EntryList
    open func single() -> SAPOData.ComplexTypeMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.ComplexTypeMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.ComplexTypeMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexTypeMap.Entry>>
  }
  override public init()
  @objc deinit
}
open class ComplexValue : SAPOData.StructureBase {
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  final public var oldComplex: SAPOData.ComplexValue?
  public init(withDefaults: Swift.Bool = false, type: SAPOData.ComplexType? = nil)
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.ComplexValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.ComplexValue
  open var complexType: SAPOData.ComplexType {
    get
  }
  open func copyComplex() -> SAPOData.ComplexValue
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.ComplexValue?, b: SAPOData.ComplexValue?) -> Swift.Bool
  open class func ofType(_ type: SAPOData.ComplexType) -> SAPOData.ComplexValue
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class ComplexValueList : SAPOData.ListBase, Swift.Codable, Swift.Sequence {
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public subscript(index: Swift.Int) -> SAPOData.ComplexValue {
    get
    set
  }
  public static let empty: SAPOData.ComplexValueList
  final public var isReference: Swift.Bool
  final public var nextLink: Swift.String?
  final public var readLink: Swift.String?
  final public var totalCount: Swift.Int64?
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.ComplexValue)
  open func append(contentsOf list: SAPOData.ComplexValueList)
  open func appendOptional(_ item: SAPOData.ComplexValue?) -> SAPOData.ComplexValueList
  open func appendThis(_ item: SAPOData.ComplexValue) -> SAPOData.ComplexValueList
  open func applyPageSize(query: SAPOData.DataQuery) -> SAPOData.ComplexValueList
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.ComplexValueList
  open func copy() -> SAPOData.ComplexValueList
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.ComplexValueList?, b: SAPOData.ComplexValueList?) -> Swift.Bool
  open func filterAndSort(query: SAPOData.DataQuery) throws -> SAPOData.ComplexValueList
  open func filterWithQuery(_ query: SAPOData.DataQuery) throws -> SAPOData.ComplexValueList
  open func first() -> SAPOData.ComplexValue
  open class func fromArray(_ array: Swift.Array<SAPOData.ComplexValue>) -> SAPOData.ComplexValueList
  open class func fromArray(_ array: Swift.Array<SAPOData.ComplexValue?>) -> SAPOData.ComplexValueList
  open func includes(item: SAPOData.ComplexValue) -> Swift.Bool
  open func indexOf(item: SAPOData.ComplexValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.ComplexValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexValueList)
  open func item(at index: Swift.Int) -> SAPOData.ComplexValue
  open func last() -> SAPOData.ComplexValue
  open func lastIndexOf(item: SAPOData.ComplexValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue>>
  open func optionalItem(at index: Swift.Int) -> SAPOData.ComplexValue?
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexValueList
  open class func shareOptional(_ list: SAPOData.ListBase) -> SAPOData.ComplexValueList
  open func single() -> SAPOData.ComplexValue
  open func skipAndTop(query: SAPOData.DataQuery) -> SAPOData.ComplexValueList
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexValueList
  open func sortWithQuery(_ query: SAPOData.DataQuery) throws
  open func toArray() -> Swift.Array<SAPOData.ComplexValue>
  open func update(at index: Swift.Int, item: SAPOData.ComplexValue)
  open func updateOptional(at index: Swift.Int, item: SAPOData.ComplexValue?)
  open func withItemType(_ type: SAPOData.DataType) -> SAPOData.ComplexValueList
  open func withNulls() -> SAPOData.ComplexValueListWithNulls
  open func withType(_ type: SAPOData.DataType) -> SAPOData.ComplexValueList
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue>>
}
@_inheritsConvenienceInitializers open class ComplexValueListWithNulls : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ComplexValue? {
    get
    set
  }
  public static let empty: SAPOData.ComplexValueListWithNulls
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.ComplexValue?)
  open func append(contentsOf list: SAPOData.ComplexValueListWithNulls)
  open func appendThis(_ item: SAPOData.ComplexValue?) -> SAPOData.ComplexValueListWithNulls
  open func copy() -> SAPOData.ComplexValueListWithNulls
  open func first() -> SAPOData.ComplexValue?
  open class func fromArray(_ array: Swift.Array<SAPOData.ComplexValue?>) -> SAPOData.ComplexValueListWithNulls
  open func includes(item: SAPOData.ComplexValue?) -> Swift.Bool
  open func indexOf(item: SAPOData.ComplexValue?, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.ComplexValue?)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexValueListWithNulls)
  open func item(at index: Swift.Int) -> SAPOData.ComplexValue?
  open func last() -> SAPOData.ComplexValue?
  open func lastIndexOf(item: SAPOData.ComplexValue?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue?>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexValueListWithNulls
  open func single() -> SAPOData.ComplexValue?
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexValueListWithNulls
  open func toArray() -> Swift.Array<SAPOData.ComplexValue?>
  open func update(at index: Swift.Int, item: SAPOData.ComplexValue?)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue?>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValue?>>
}
open class ComplexValueMap : SAPOData.MapBase {
  public static let empty: SAPOData.ComplexValueMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.ComplexValueMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.ComplexValue
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.ComplexValue)
  open func updateThis(key: Swift.String, value: SAPOData.ComplexValue) -> SAPOData.ComplexValueMap
  open func updateValue(_ value: SAPOData.ComplexValue, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.ComplexValue?
  open func values() -> SAPOData.ComplexValueList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.ComplexValue {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.ComplexValueMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.ComplexValueMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.ComplexValueMap.Entry)
    open func append(contentsOf list: SAPOData.ComplexValueMap.EntryList)
    open func appendThis(_ item: SAPOData.ComplexValueMap.Entry) -> SAPOData.ComplexValueMap.EntryList
    open func copy() -> SAPOData.ComplexValueMap.EntryList
    open func first() -> SAPOData.ComplexValueMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.ComplexValueMap.Entry>) -> SAPOData.ComplexValueMap.EntryList
    open func includes(item: SAPOData.ComplexValueMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.ComplexValueMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.ComplexValueMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.ComplexValueMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.ComplexValueMap.Entry
    open func last() -> SAPOData.ComplexValueMap.Entry
    open func lastIndexOf(item: SAPOData.ComplexValueMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValueMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.ComplexValueMap.EntryList
    open func single() -> SAPOData.ComplexValueMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ComplexValueMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.ComplexValueMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.ComplexValueMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValueMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ComplexValueMap.Entry>>
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class ConvertDataValue : SAPOData.ObjectBase {
  override public init()
  open class func toJSON(_ value: Swift.AnyObject?) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class CustomPath : SAPOData.ObjectBase {
  final public var atomElement: Swift.String
  final public var atomChild: Swift.String?
  final public var keepInContent: Swift.Bool
  override public init()
  open class func fromTarget(path: Swift.String) -> SAPOData.CustomPath?
  open var myProperty: SAPOData.Property {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class CustomPathList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.CustomPath {
    get
    set
  }
  public static let empty: SAPOData.CustomPathList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.CustomPath)
  open func append(contentsOf list: SAPOData.CustomPathList)
  open func appendThis(_ item: SAPOData.CustomPath) -> SAPOData.CustomPathList
  open func copy() -> SAPOData.CustomPathList
  open func first() -> SAPOData.CustomPath
  open class func fromArray(_ array: Swift.Array<SAPOData.CustomPath>) -> SAPOData.CustomPathList
  open func includes(item: SAPOData.CustomPath) -> Swift.Bool
  open func indexOf(item: SAPOData.CustomPath, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.CustomPath)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.CustomPathList)
  open func item(at index: Swift.Int) -> SAPOData.CustomPath
  open func last() -> SAPOData.CustomPath
  open func lastIndexOf(item: SAPOData.CustomPath, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.CustomPath>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.CustomPathList
  open func single() -> SAPOData.CustomPath
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.CustomPathList
  open func toArray() -> Swift.Array<SAPOData.CustomPath>
  open func update(at index: Swift.Int, item: SAPOData.CustomPath)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.CustomPath>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.CustomPath>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataComparer : SAPOData.Comparer {
  public static let singleton: SAPOData.Comparer
  override open func compare(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataEquality : SAPOData.Equality {
  public static let singleton: SAPOData.Equality
  override open func equal(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataError : SAPOData.ErrorBase {
  final public var safeMessage: Swift.Bool
  override public init()
  open func safe() -> SAPOData.DataError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataFormat {
  public static let atom: Swift.Int
  public static let json: Swift.Int
  public static let html: Swift.Int
  public static let text: Swift.Int
  public static let xml: Swift.Int
  public static func mediaType(format: Swift.Int) -> Swift.String
  public static func name(format: Swift.Int) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataFormatError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DataInternal {
  public static let mediaPropertyId: Swift.Int
  public static let mediaPropertyEtagId: Swift.Int
  public static let mediaPropertyTypeId: Swift.Int
  public static let streamPropertyMinEtagId: Swift.Int
  public static let streamPropertyMaxEtagId: Swift.Int
  public static let streamPropertyMinTypeId: Swift.Int
  public static let streamPropertyMaxTypeId: Swift.Int
  public static let entityListType: SAPOData.DataType
  public static let dataListType: SAPOData.DataType
  public static let complexListType: SAPOData.DataType
  public static func checkETag(_ tag: Swift.String?) -> Swift.Bool
  public static func defaultForDataType(_ type: SAPOData.DataType) -> SAPOData.DataValue?
  public static func defaultForProperty(_ property: SAPOData.Property, required: Swift.Bool = true) -> SAPOData.DataValue?
  public static func fixInferred(structure: SAPOData.StructureBase)
  public static func generateETag() -> Swift.String
  public static func odataTypeName(type: SAPOData.DataType, dataVersion: Swift.Int, edmPrefix: Swift.Bool, hashPrefix: Swift.Bool) -> Swift.String
  public static func queryResult(query: SAPOData.DataQuery, result: Swift.AnyObject?) -> SAPOData.QueryResult
  public static func setOldProperty(inProperty: SAPOData.Property, toProperty: SAPOData.Property)
  public static func structureDataList(structure: SAPOData.StructureBase) -> SAPOData.DataValueList
  public static func structureHasArray(structure: SAPOData.StructureBase) -> SAPOData.BooleanArray
  public static var xsVersion: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMethod : SAPOData.ObjectBase {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var resourcePath: Swift.String
  final public var targetPath: Swift.String
  final public var unboundMethod: Swift.String?
  final public var isExtension: Swift.Bool
  final public var entitySet: SAPOData.EntitySet?
  final public var httpMethod: Swift.String?
  final public var sourceLine: Swift.Int
  final public var isImported: Swift.Bool
  final public var isFunction: Swift.Bool
  final public var isAction: Swift.Bool
  final public var isBound: Swift.Bool
  final public var isComposable: Swift.Bool
  final public var isUnicode: Swift.Bool
  final public var minLength: Swift.Int
  final public var maxLength: Swift.Int
  final public var precision: Swift.Int
  final public var scale: Swift.Int
  final public var srid: Swift.Int
  final public var isOptional: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open var fixedLength: Swift.Bool {
    get
  }
  open var importedName: Swift.String {
    get
  }
  open var isOverloaded: Swift.Bool {
    get
  }
  open var metrics: SAPOData.DataMethodMetrics {
    get
  }
  open var name: Swift.String {
    get
  }
  open var overloadMap: SAPOData.DataMethodMap {
    get
  }
  open var parameters: SAPOData.ParameterList {
    get
    set(value)
  }
  open var returnType: SAPOData.DataType {
    get
    set(value)
  }
  open var signatureForParameters: Swift.String {
    get
  }
  open var signatureForReturnType: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  open var typeSignature: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMethodCall : SAPOData.ObjectBase {
  override public init()
  open class func apply(method: SAPOData.DataMethod, parameters: SAPOData.ParameterList) -> SAPOData.DataMethodCall
  open var method: SAPOData.DataMethod {
    get
    set(value)
  }
  open var parameters: SAPOData.ParameterList {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMethodList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataMethod {
    get
    set
  }
  public static let empty: SAPOData.DataMethodList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.DataMethod)
  open func append(contentsOf list: SAPOData.DataMethodList)
  open func appendThis(_ item: SAPOData.DataMethod) -> SAPOData.DataMethodList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.DataMethodList
  open func first() -> SAPOData.DataMethod
  open class func fromArray(_ array: Swift.Array<SAPOData.DataMethod>) -> SAPOData.DataMethodList
  open func includes(item: SAPOData.DataMethod) -> Swift.Bool
  open func indexOf(item: SAPOData.DataMethod, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.DataMethod)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataMethodList)
  open func item(at index: Swift.Int) -> SAPOData.DataMethod
  open func last() -> SAPOData.DataMethod
  open func lastIndexOf(item: SAPOData.DataMethod, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataMethod>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataMethodList
  open func single() -> SAPOData.DataMethod
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataMethodList
  open func toArray() -> Swift.Array<SAPOData.DataMethod>
  open func update(at index: Swift.Int, item: SAPOData.DataMethod)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataMethod>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataMethod>>
}
open class DataMethodMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataMethodMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.DataMethod) throws
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.DataMethodMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataMethod
  open func sortedEntries() throws -> SAPOData.DataMethodMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.DataMethodList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataMethod)
  open func updateThis(key: Swift.String, value: SAPOData.DataMethod) -> SAPOData.DataMethodMap
  open func updateValue(_ value: SAPOData.DataMethod, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataMethod?
  open func values() -> SAPOData.DataMethodList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.DataMethod {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataMethodMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataMethodMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.DataMethodMap.Entry)
    open func append(contentsOf list: SAPOData.DataMethodMap.EntryList)
    open func appendThis(_ item: SAPOData.DataMethodMap.Entry) -> SAPOData.DataMethodMap.EntryList
    open func copy() -> SAPOData.DataMethodMap.EntryList
    open func first() -> SAPOData.DataMethodMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataMethodMap.Entry>) -> SAPOData.DataMethodMap.EntryList
    open func includes(item: SAPOData.DataMethodMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.DataMethodMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.DataMethodMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataMethodMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.DataMethodMap.Entry
    open func last() -> SAPOData.DataMethodMap.Entry
    open func lastIndexOf(item: SAPOData.DataMethodMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataMethodMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataMethodMap.EntryList
    open func single() -> SAPOData.DataMethodMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataMethodMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataMethodMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.DataMethodMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataMethodMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataMethodMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMethodMetrics : SAPOData.ObjectBase {
  override public init()
  open var onlineExecuteMethodTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineMethodResultBytes: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineMethodResultBytes_gzip: SAPOData.DataMetric {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMetric : SAPOData.ObjectBase {
  override public init()
  open func add(_ value: Swift.Int64)
  open class func byteInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open var component: Swift.String {
    get
  }
  open class func copyAndResetAll() -> SAPOData.DataMetricList
  open var count: Swift.Int64 {
    get
  }
  open class func createDatabaseTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createIndexTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createLinkTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createMediaTime(component: Swift.String) -> SAPOData.DataMetric
  open class func createTableTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deleteDatabaseTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deleteEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deleteLinkTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deleteStreamTime(component: Swift.String) -> SAPOData.DataMetric
  open class func deltaDownloadBytes(component: Swift.String) -> SAPOData.DataMetric
  open class func deltaDownloadBytes_gzip(component: Swift.String) -> SAPOData.DataMetric
  open class func deltaDownloadRows(component: Swift.String) -> SAPOData.DataMetric
  open class func deltaDownloadTime(component: Swift.String) -> SAPOData.DataMetric
  open class func downloadMediaTime(component: Swift.String) -> SAPOData.DataMetric
  open class func downloadPhaseTime(component: Swift.String) -> SAPOData.DataMetric
  open class func downloadStreamTime(component: Swift.String) -> SAPOData.DataMetric
  open class func entityInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open class func errorInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open class func errorMetricName(method: Swift.String, error: Swift.Error) -> Swift.String
  open class func executeMethodTime(component: Swift.String) -> SAPOData.DataMetric
  open class func executeQueryTime(component: Swift.String) -> SAPOData.DataMetric
  open class func fetchMetadataSize(component: Swift.String) -> SAPOData.DataMetric
  open class func fetchMetadataSize_gzip(component: Swift.String) -> SAPOData.DataMetric
  open class func fetchMetadataTime(component: Swift.String) -> SAPOData.DataMetric
  open class func followedNextLink(component: Swift.String) -> SAPOData.DataMetric
  open var id: Swift.Int {
    get
  }
  open class func initialDownloadBytes(component: Swift.String) -> SAPOData.DataMetric
  open class func initialDownloadBytes_gzip(component: Swift.String) -> SAPOData.DataMetric
  open class func initialDownloadRows(component: Swift.String) -> SAPOData.DataMetric
  open class func initialDownloadTime(component: Swift.String) -> SAPOData.DataMetric
  open class func instance(component: Swift.String, metric: Swift.String, unit: Swift.String) -> SAPOData.DataMetric
  open class func linkInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open class func loadMetadataTime(component: Swift.String) -> SAPOData.DataMetric
  open class func logAll()
  open var maximum: Swift.Int64 {
    get
  }
  open class func methodResultBytes(component: Swift.String) -> SAPOData.DataMetric
  open class func methodResultBytes_gzip(component: Swift.String) -> SAPOData.DataMetric
  open var metric: Swift.String {
    get
  }
  open var minimum: Swift.Int64 {
    get
  }
  open class func parseMetadataTime(component: Swift.String) -> SAPOData.DataMetric
  open class func pingServerTime(component: Swift.String) -> SAPOData.DataMetric
  open class func queryResultBytes(component: Swift.String) -> SAPOData.DataMetric
  open class func queryResultBytes_gzip(component: Swift.String) -> SAPOData.DataMetric
  open class func queryResultRows(component: Swift.String) -> SAPOData.DataMetric
  open class func requestInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open func reset()
  open class func resetAll()
  open class func rowInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open class func selectEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open var sum: Swift.Int64 {
    get
  }
  open class func timeInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open var unit: Swift.String {
    get
  }
  open class func updateEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open class func updateLinkTime(component: Swift.String) -> SAPOData.DataMetric
  open class func uploadMediaTime(component: Swift.String) -> SAPOData.DataMetric
  open class func uploadStreamTime(component: Swift.String) -> SAPOData.DataMetric
  open class func uploadTime(component: Swift.String) -> SAPOData.DataMetric
  open class func upsertEntityTime(component: Swift.String) -> SAPOData.DataMetric
  open class func warningInstance(component: Swift.String, metric: Swift.String) -> SAPOData.DataMetric
  open func write(buffer: SAPOData.CharBuffer)
  open class func writeAll(buffer: SAPOData.CharBuffer)
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataMetricList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataMetric {
    get
    set
  }
  public static let empty: SAPOData.DataMetricList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.DataMetric)
  open func append(contentsOf list: SAPOData.DataMetricList)
  open func appendThis(_ item: SAPOData.DataMetric) -> SAPOData.DataMetricList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.DataMetricList
  open func first() -> SAPOData.DataMetric
  open class func fromArray(_ array: Swift.Array<SAPOData.DataMetric>) -> SAPOData.DataMetricList
  open func includes(item: SAPOData.DataMetric) -> Swift.Bool
  open func indexOf(item: SAPOData.DataMetric, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.DataMetric)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataMetricList)
  open func item(at index: Swift.Int) -> SAPOData.DataMetric
  open func last() -> SAPOData.DataMetric
  open func lastIndexOf(item: SAPOData.DataMetric, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataMetric>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataMetricList
  open func single() -> SAPOData.DataMetric
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataMetricList
  open func toArray() -> Swift.Array<SAPOData.DataMetric>
  open func update(at index: Swift.Int, item: SAPOData.DataMetric)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataMetric>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataMetric>>
}
open class DataMetricMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataMetricMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.DataMetricMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataMetric
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataMetric)
  open func updateThis(key: Swift.String, value: SAPOData.DataMetric) -> SAPOData.DataMetricMap
  open func updateValue(_ value: SAPOData.DataMetric, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataMetric?
  open func values() -> SAPOData.DataMetricList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.DataMetric {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataMetricMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataMetricMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.DataMetricMap.Entry)
    open func append(contentsOf list: SAPOData.DataMetricMap.EntryList)
    open func appendThis(_ item: SAPOData.DataMetricMap.Entry) -> SAPOData.DataMetricMap.EntryList
    open func copy() -> SAPOData.DataMetricMap.EntryList
    open func first() -> SAPOData.DataMetricMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataMetricMap.Entry>) -> SAPOData.DataMetricMap.EntryList
    open func includes(item: SAPOData.DataMetricMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.DataMetricMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.DataMetricMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataMetricMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.DataMetricMap.Entry
    open func last() -> SAPOData.DataMetricMap.Entry
    open func lastIndexOf(item: SAPOData.DataMetricMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataMetricMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataMetricMap.EntryList
    open func single() -> SAPOData.DataMetricMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataMetricMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataMetricMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.DataMetricMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataMetricMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataMetricMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataNetworkError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataPath : SAPOData.PropertyPath {
  open func atIndex(_ itemIndex: Swift.Int) -> SAPOData.DataPath
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.DataPath?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.DataPath
  override open var dataType: SAPOData.DataType {
    get
  }
  open var definedProperty: SAPOData.Property? {
    get
  }
  open func dynamicPath(_ child: Swift.String) -> SAPOData.DataPath
  open var dynamicProperty: Swift.String? {
    get
  }
  open var entityKey: SAPOData.EntityKey? {
    get
  }
  open func hasSegments() -> Swift.Bool
  open var isNavigation: Swift.Bool {
    get
  }
  open func isProperty(_ property: SAPOData.Property) -> Swift.Bool
  open var isStructural: Swift.Bool {
    get
  }
  open var itemIndex: Swift.Int? {
    get
  }
  open class func lambda(_ name: Swift.String) -> SAPOData.DataPath
  open var lambdaVariable: Swift.String? {
    get
  }
  open class func of(_ start: SAPOData.Property) -> SAPOData.DataPath
  open class func ofDynamic(_ start: Swift.String) -> SAPOData.DataPath
  open var parentPath: SAPOData.DataPath? {
    get
  }
  open func path(_ child: SAPOData.Property) -> SAPOData.DataPath
  open var pathSegments: SAPOData.StringList {
    get
  }
  open var pathType: Swift.Int {
    get
  }
  open var rootProperty: SAPOData.Property? {
    get
  }
  open var segmentCount: Swift.Int {
    get
  }
  open class func toDynamic(segments: SAPOData.StringList) -> SAPOData.DataPath
  override open func toPath() -> SAPOData.DataPath
  override open func toString() -> Swift.String
  override open func unwrap() -> SAPOData.DataValue
  open func withKey(_ entityKey: SAPOData.EntityKey) -> SAPOData.DataPath
  open class func withSegments(type: Swift.Int, segments: SAPOData.StringList) -> SAPOData.DataPath
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataQuery : SAPOData.ObjectBase {
  final public var requestPath: Swift.String?
  final public var queryString: Swift.String?
  final public var dataFormat: Swift.Int?
  final public var entityKey: SAPOData.EntityKey?
  final public var entitySet: SAPOData.EntitySet?
  final public var entityType: SAPOData.EntityType?
  final public var derivedType: SAPOData.StructureType?
  final public var methodCall: SAPOData.DataMethodCall?
  final public var propertyPath: SAPOData.DataPath?
  final public var expectSingle: Swift.Bool
  final public var selectItems: SAPOData.SelectItemList?
  final public var distinctItems: Swift.Bool
  final public var allSelected: Swift.Bool
  final public var keySelected: Swift.Bool
  final public var expandItems: SAPOData.ExpandItemList?
  final public var transformValues: SAPOData.TransformValueList?
  final public var groupTransform: SAPOData.GroupTransform?
  final public var searchText: Swift.String?
  final public var queryFilter: SAPOData.QueryFilter?
  final public var sortItems: SAPOData.SortItemList?
  final public var countOnly: Swift.Bool
  final public var countInline: Swift.Bool
  final public var streamResponse: Swift.Bool
  final public var deltaResponse: Swift.Bool
  final public var deltaTime: SAPOData.GlobalDateTime?
  final public var deltaToken: Swift.String?
  final public var trackChanges: Swift.Bool
  final public var skipToken: Swift.String?
  final public var skipCount: Swift.Int?
  final public var pageSize: Swift.Int?
  final public var topCount: Swift.Int?
  final public var aliasValues: SAPOData.DataValueMap?
  final public var customOptions: SAPOData.StringMap?
  final public var internalData: Swift.AnyObject?
  final public var systemFlags: Swift.Int
  override public init()
  open func `where`(_ test: SAPOData.QueryFilter) -> SAPOData.DataQuery
  open func aggregate(_ items: SAPOData.AggregateValue...) -> SAPOData.DataQuery
  open func bind(_ resource: SAPOData.BindingPath) -> SAPOData.DataQuery
  open func check() throws
  open func count() -> SAPOData.DataQuery
  open func custom(_ name: Swift.String, _ value: Swift.String) -> SAPOData.DataQuery
  open func expand(_ items: SAPOData.PropertyPath...) -> SAPOData.DataQuery
  open func expand(_ item: SAPOData.PropertyPath, withQuery query: SAPOData.DataQuery) -> SAPOData.DataQuery
  open func expandedProperties() -> SAPOData.StringSet
  open func expandsProperty(_ property: SAPOData.Property) -> Swift.Bool
  open func filter(_ test: SAPOData.QueryFilter) -> SAPOData.DataQuery
  open func from(_ entitySet: SAPOData.EntitySet) -> SAPOData.DataQuery
  open func fromDefault(_ entitySet: SAPOData.EntitySet) -> SAPOData.DataQuery
  open func groupBy(_ items: SAPOData.PropertyPath...) -> SAPOData.DataQuery
  open func inlineCount() -> SAPOData.DataQuery
  open func invoke(_ method: SAPOData.DataMethod, _ parameters: SAPOData.ParameterList = ParameterList.empty) -> SAPOData.DataQuery
  open func load(_ entity: SAPOData.EntityValue, _ path: SAPOData.PropertyPath? = nil) -> SAPOData.DataQuery
  open class func newIfNull(query: SAPOData.DataQuery?) -> SAPOData.DataQuery
  open func orderBy(_ value: SAPOData.QueryValue, _ order: SAPOData.SortOrder = SortOrder.ascending) -> SAPOData.DataQuery
  open func page(_ size: Swift.Int) -> SAPOData.DataQuery
  open func path(_ target: SAPOData.DataPath) -> SAPOData.DataQuery
  open func property(_ target: SAPOData.Property) -> SAPOData.DataQuery
  open func search(_ text: Swift.String) -> SAPOData.DataQuery
  open func select(_ items: SAPOData.PropertyPath...) -> SAPOData.DataQuery
  open func selectAll() -> SAPOData.DataQuery
  open func selectDistinct(_ items: SAPOData.PropertyPath...) -> SAPOData.DataQuery
  open func selectKey() -> SAPOData.DataQuery
  open func selectsProperty(_ property: SAPOData.Property) -> Swift.Bool
  open func skip(_ count: Swift.Int) -> SAPOData.DataQuery
  open func sortedByProperties() -> SAPOData.StringSet
  open func stream() -> SAPOData.DataQuery
  open func thenBy(_ value: SAPOData.QueryValue, _ order: SAPOData.SortOrder = SortOrder.ascending) -> SAPOData.DataQuery
  override open func toString() -> Swift.String
  open func top(_ count: Swift.Int) -> SAPOData.DataQuery
  open func transform(_ items: SAPOData.TransformValue...) -> SAPOData.DataQuery
  open var url: Swift.String? {
    get
    set(value)
  }
  open func withChangeTracking(deltaLink: Swift.String? = nil) -> SAPOData.DataQuery
  open func withKey(_ key: SAPOData.EntityKey) -> SAPOData.DataQuery
  open func withType(_ type: SAPOData.StructureType) -> SAPOData.DataQuery
  open func withURL(_ url: Swift.String?) -> SAPOData.DataQuery
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataQueryError : SAPOData.DataError {
  override public init()
  open class func cannotParse(_ value: Swift.String, type: Swift.String) -> SAPOData.DataQueryError
  open class func withCause(_ cause: Swift.Error?) -> SAPOData.DataQueryError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.DataQueryError
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataSchema : SAPOData.ObjectBase {
  final public var namespace: Swift.String
  final public var alias: Swift.String?
  final public var sourceLine: Swift.Int
  override public init()
  open func annotation(withName term: Swift.String) throws -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotationTerms: SAPOData.AnnotationTermMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open var complexTypes: SAPOData.ComplexTypeMap {
    get
  }
  open var dataMethods: SAPOData.DataMethodMap {
    get
  }
  open var entityContainers: SAPOData.EntityContainerMap {
    get
  }
  open var entitySets: SAPOData.EntitySetMap {
    get
  }
  open var entityTypes: SAPOData.EntityTypeMap {
    get
  }
  open var enumTypes: SAPOData.EnumTypeMap {
    get
  }
  open var lookupMethods: SAPOData.DataMethodMap {
    get
  }
  open var lookupSets: SAPOData.EntitySetMap {
    get
  }
  open var lookupSingletons: SAPOData.EntitySetMap {
    get
  }
  open var simpleTypes: SAPOData.SimpleTypeMap {
    get
  }
  open var singletons: SAPOData.EntitySetMap {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataSchemaError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataSchemaList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataSchema {
    get
    set
  }
  public static let empty: SAPOData.DataSchemaList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.DataSchema)
  open func append(contentsOf list: SAPOData.DataSchemaList)
  open func appendThis(_ item: SAPOData.DataSchema) -> SAPOData.DataSchemaList
  open func copy() -> SAPOData.DataSchemaList
  open func first() -> SAPOData.DataSchema
  open class func fromArray(_ array: Swift.Array<SAPOData.DataSchema>) -> SAPOData.DataSchemaList
  open func includes(item: SAPOData.DataSchema) -> Swift.Bool
  open func indexOf(item: SAPOData.DataSchema, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.DataSchema)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataSchemaList)
  open func item(at index: Swift.Int) -> SAPOData.DataSchema
  open func last() -> SAPOData.DataSchema
  open func lastIndexOf(item: SAPOData.DataSchema, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataSchema>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataSchemaList
  open func single() -> SAPOData.DataSchema
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataSchemaList
  open func toArray() -> Swift.Array<SAPOData.DataSchema>
  open func update(at index: Swift.Int, item: SAPOData.DataSchema)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataSchema>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataSchema>>
}
open class DataSchemaMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataSchemaMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.DataSchema) throws
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.DataSchemaMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataSchema
  open func sortedEntries() throws -> SAPOData.DataSchemaMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.DataSchemaList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataSchema)
  open func updateThis(key: Swift.String, value: SAPOData.DataSchema) -> SAPOData.DataSchemaMap
  open func updateValue(_ value: SAPOData.DataSchema, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataSchema?
  open func values() -> SAPOData.DataSchemaList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.DataSchema {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataSchemaMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataSchemaMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.DataSchemaMap.Entry)
    open func append(contentsOf list: SAPOData.DataSchemaMap.EntryList)
    open func appendThis(_ item: SAPOData.DataSchemaMap.Entry) -> SAPOData.DataSchemaMap.EntryList
    open func copy() -> SAPOData.DataSchemaMap.EntryList
    open func first() -> SAPOData.DataSchemaMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataSchemaMap.Entry>) -> SAPOData.DataSchemaMap.EntryList
    open func includes(item: SAPOData.DataSchemaMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.DataSchemaMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.DataSchemaMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataSchemaMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.DataSchemaMap.Entry
    open func last() -> SAPOData.DataSchemaMap.Entry
    open func lastIndexOf(item: SAPOData.DataSchemaMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataSchemaMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataSchemaMap.EntryList
    open func single() -> SAPOData.DataSchemaMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataSchemaMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataSchemaMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.DataSchemaMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataSchemaMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataSchemaMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataServiceError : SAPOData.DataError {
  final public var status: Swift.Int
  final public var response: SAPOData.ErrorResponse?
  override public init()
  open class func notImplemented(method: Swift.String) -> SAPOData.DataServiceError
  open var statusText: Swift.String {
    get
  }
  open class func withCause(_ cause: Swift.Error?) -> SAPOData.DataServiceError
  open class func withCauseAndMessage(cause: Swift.Error?, message: Swift.String?) -> SAPOData.DataServiceError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.DataServiceError
  open class func withResponse(status: Swift.Int, message: Swift.String?, response: SAPOData.ErrorResponse?) -> SAPOData.DataServiceError
  open class func withStatus(_ status: Swift.Int, message: Swift.String? = nil) -> SAPOData.DataServiceError
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataStorageError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataStreamError : SAPOData.DataError {
  override public init()
  open class func withCause(_ cause: Swift.Error?) -> SAPOData.DataStreamError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.DataStreamError
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataType : SAPOData.ObjectBase {
  public static let codeUnknown: Swift.Int
  public static let string: Swift.Int
  public static let binary: Swift.Int
  public static let boolean: Swift.Int
  public static let char: Swift.Int
  public static let byte: Swift.Int
  public static let short: Swift.Int
  public static let int: Swift.Int
  public static let long: Swift.Int
  public static let integer: Swift.Int
  public static let decimal: Swift.Int
  public static let float: Swift.Int
  public static let double: Swift.Int
  public static let unsignedByte: Swift.Int
  public static let unsignedShort: Swift.Int
  public static let unsignedInt: Swift.Int
  public static let unsignedLong: Swift.Int
  public static let enumValue: Swift.Int
  public static let guidValue: Swift.Int
  public static let byteStream: Swift.Int
  public static let charStream: Swift.Int
  public static let streamLink: Swift.Int
  public static let localDate: Swift.Int
  public static let localTime: Swift.Int
  public static let localDateTime: Swift.Int
  public static let globalDateTime: Swift.Int
  public static let dayTimeDuration: Swift.Int
  public static let yearMonthDuration: Swift.Int
  public static let geographyValue: Swift.Int
  public static let geographyPoint: Swift.Int
  public static let geographyMultiPoint: Swift.Int
  public static let geographyLineString: Swift.Int
  public static let geographyMultiLineString: Swift.Int
  public static let geographyPolygon: Swift.Int
  public static let geographyMultiPolygon: Swift.Int
  public static let geographyCollection: Swift.Int
  public static let geometryValue: Swift.Int
  public static let geometryPoint: Swift.Int
  public static let geometryMultiPoint: Swift.Int
  public static let geometryLineString: Swift.Int
  public static let geometryMultiLineString: Swift.Int
  public static let geometryPolygon: Swift.Int
  public static let geometryMultiPolygon: Swift.Int
  public static let geometryCollection: Swift.Int
  public static let edmPrimitive: Swift.Int
  public static let object: Swift.Int
  public static let complexValue: Swift.Int
  public static let entityValue: Swift.Int
  public static let list: Swift.Int
  public static let dataValueList: Swift.Int
  public static let complexValueList: Swift.Int
  public static let entityValueList: Swift.Int
  public static let deltaStream: Swift.Int
  public static let path: Swift.Int
  public static let pathExpression: Swift.Int
  public static let annotationPath: Swift.Int
  public static let structuralPath: Swift.Int
  public static let navigationPath: Swift.Int
  public static let propertyPath: Swift.Int
  public static let targetPath: Swift.Int
  public static let dynamicPath: Swift.Int
  public static let queryAlias: Swift.Int
  public static let queryFilter: Swift.Int
  public static let queryFunctionCall: Swift.Int
  public static let queryOperatorCall: Swift.Int
  public static let unknown: SAPOData.DataType
  override public init()
  open var baseType: SAPOData.DataType {
    get
  }
  open var code: Swift.Int {
    get
  }
  open class func forCode(_ code: Swift.Int) -> SAPOData.DataType
  open class func forName(_ name: Swift.String) -> SAPOData.DataType
  open var isBasic: Swift.Bool {
    get
  }
  open var isBasicList: Swift.Bool {
    get
  }
  open var isCalendar: Swift.Bool {
    get
  }
  open var isComplex: Swift.Bool {
    get
  }
  open var isComplexList: Swift.Bool {
    get
  }
  open var isDerived: Swift.Bool {
    get
  }
  open var isEntity: Swift.Bool {
    get
  }
  open var isEntityList: Swift.Bool {
    get
  }
  open var isEnum: Swift.Bool {
    get
  }
  open var isEnumList: Swift.Bool {
    get
  }
  open var isGeography: Swift.Bool {
    get
  }
  open var isGeometry: Swift.Bool {
    get
  }
  open var isGeospatial: Swift.Bool {
    get
  }
  open var isGuid: Swift.Bool {
    get
  }
  open var isList: Swift.Bool {
    get
  }
  open var isNumber: Swift.Bool {
    get
  }
  open var isPath: Swift.Bool {
    get
  }
  open var isStream: Swift.Bool {
    get
  }
  open var isUnsigned: Swift.Bool {
    get
  }
  open var itemType: SAPOData.DataType {
    get
  }
  open class func listOf(item: SAPOData.DataType) -> SAPOData.DataType
  open var name: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataType {
    get
    set
  }
  public static let empty: SAPOData.DataTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.DataType)
  open func append(contentsOf list: SAPOData.DataTypeList)
  open func appendThis(_ item: SAPOData.DataType) -> SAPOData.DataTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.DataTypeList
  open func first() -> SAPOData.DataType
  open class func fromArray(_ array: Swift.Array<SAPOData.DataType>) -> SAPOData.DataTypeList
  open func includes(item: SAPOData.DataType) -> Swift.Bool
  open func indexOf(item: SAPOData.DataType, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.DataType)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataTypeList)
  open func item(at index: Swift.Int) -> SAPOData.DataType
  open func last() -> SAPOData.DataType
  open func lastIndexOf(item: SAPOData.DataType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataType>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataTypeList
  open func single() -> SAPOData.DataType
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataTypeList
  open func toArray() -> Swift.Array<SAPOData.DataType>
  open func update(at index: Swift.Int, item: SAPOData.DataType)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataType>>
}
open class DataTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.DataTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataType
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataType)
  open func updateThis(key: Swift.String, value: SAPOData.DataType) -> SAPOData.DataTypeMap
  open func updateValue(_ value: SAPOData.DataType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataType?
  open func values() -> SAPOData.DataTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.DataType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.DataTypeMap.Entry)
    open func append(contentsOf list: SAPOData.DataTypeMap.EntryList)
    open func appendThis(_ item: SAPOData.DataTypeMap.Entry) -> SAPOData.DataTypeMap.EntryList
    open func copy() -> SAPOData.DataTypeMap.EntryList
    open func first() -> SAPOData.DataTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataTypeMap.Entry>) -> SAPOData.DataTypeMap.EntryList
    open func includes(item: SAPOData.DataTypeMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.DataTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.DataTypeMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataTypeMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.DataTypeMap.Entry
    open func last() -> SAPOData.DataTypeMap.Entry
    open func lastIndexOf(item: SAPOData.DataTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataTypeMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataTypeMap.EntryList
    open func single() -> SAPOData.DataTypeMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataTypeMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.DataTypeMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataTypeMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataValue : SAPOData.ObjectBase, Swift.Comparable, Swift.Hashable {
  public static func < (lhs: SAPOData.DataValue, rhs: SAPOData.DataValue) -> Swift.Bool
  public static func == (lhs: SAPOData.DataValue, rhs: SAPOData.DataValue) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public static let undefined: SAPOData.DataValue
  override public init()
  open class func cloneMutable(_ value: SAPOData.DataValue?) -> SAPOData.DataValue?
  open var dataType: SAPOData.DataType {
    get
  }
  open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  open func hashCode() -> Swift.Int
  open var typeCode: Swift.Int {
    get
  }
  open func hash(into hasher: inout Swift.Hasher)
  @objc deinit
}
@_inheritsConvenienceInitializers open class DataValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataValue {
    get
    set
  }
  public static let empty: SAPOData.DataValueList
  final public var isReference: Swift.Bool
  final public var nextLink: Swift.String?
  final public var readLink: Swift.String?
  final public var totalCount: Swift.Int64?
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.DataValue)
  open func append(contentsOf list: SAPOData.DataValueList)
  open func appendOptional(_ item: SAPOData.DataValue?) -> SAPOData.DataValueList
  open func appendThis(_ item: SAPOData.DataValue) -> SAPOData.DataValueList
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.DataValueList
  open func copy() -> SAPOData.DataValueList
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.DataValueList?, b: SAPOData.DataValueList?) -> Swift.Bool
  open func first() -> SAPOData.DataValue
  open class func fromArray(_ array: Swift.Array<SAPOData.DataValue>) -> SAPOData.DataValueList
  open class func fromArray(_ array: Swift.Array<SAPOData.DataValue?>) -> SAPOData.DataValueList
  open func includes(item: SAPOData.DataValue) -> Swift.Bool
  open func indexOf(item: SAPOData.DataValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.DataValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataValueList)
  open func item(at index: Swift.Int) -> SAPOData.DataValue
  open func last() -> SAPOData.DataValue
  open func lastIndexOf(item: SAPOData.DataValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataValue>>
  open func optionalItem(at index: Swift.Int) -> SAPOData.DataValue?
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataValueList
  open class func shareOptional(_ list: SAPOData.ListBase) -> SAPOData.DataValueList
  open func single() -> SAPOData.DataValue
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataValueList
  open func toArray() -> Swift.Array<SAPOData.DataValue>
  open func update(at index: Swift.Int, item: SAPOData.DataValue)
  open func updateOptional(at index: Swift.Int, item: SAPOData.DataValue?)
  open func withItemType(_ type: SAPOData.DataType) -> SAPOData.DataValueList
  open func withNulls() -> SAPOData.DataValueListWithNulls
  open func withType(_ type: SAPOData.DataType) -> SAPOData.DataValueList
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataValue>>
}
@_inheritsConvenienceInitializers open class DataValueListWithNulls : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DataValue? {
    get
    set
  }
  public static let empty: SAPOData.DataValueListWithNulls
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.DataValue?)
  open func append(contentsOf list: SAPOData.DataValueListWithNulls)
  open func appendThis(_ item: SAPOData.DataValue?) -> SAPOData.DataValueListWithNulls
  open func copy() -> SAPOData.DataValueListWithNulls
  open func first() -> SAPOData.DataValue?
  open class func fromArray(_ array: Swift.Array<SAPOData.DataValue?>) -> SAPOData.DataValueListWithNulls
  open func includes(item: SAPOData.DataValue?) -> Swift.Bool
  open func indexOf(item: SAPOData.DataValue?, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.DataValue?)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataValueListWithNulls)
  open func item(at index: Swift.Int) -> SAPOData.DataValue?
  open func last() -> SAPOData.DataValue?
  open func lastIndexOf(item: SAPOData.DataValue?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataValue?>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataValueListWithNulls
  open func single() -> SAPOData.DataValue?
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataValueListWithNulls
  open func toArray() -> Swift.Array<SAPOData.DataValue?>
  open func update(at index: Swift.Int, item: SAPOData.DataValue?)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataValue?>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataValue?>>
}
open class DataValueMap : SAPOData.MapBase {
  public static let empty: SAPOData.DataValueMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.DataValueMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.DataValue?
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.DataValue?)
  open func updateThis(key: Swift.String, value: SAPOData.DataValue?) -> SAPOData.DataValueMap
  open func updateValue(_ value: SAPOData.DataValue?, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.DataValue?
  open func values() -> SAPOData.DataValueList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.DataValue? {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.DataValueMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.DataValueMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.DataValueMap.Entry)
    open func append(contentsOf list: SAPOData.DataValueMap.EntryList)
    open func appendThis(_ item: SAPOData.DataValueMap.Entry) -> SAPOData.DataValueMap.EntryList
    open func copy() -> SAPOData.DataValueMap.EntryList
    open func first() -> SAPOData.DataValueMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.DataValueMap.Entry>) -> SAPOData.DataValueMap.EntryList
    open func includes(item: SAPOData.DataValueMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.DataValueMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.DataValueMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.DataValueMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.DataValueMap.Entry
    open func last() -> SAPOData.DataValueMap.Entry
    open func lastIndexOf(item: SAPOData.DataValueMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DataValueMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.DataValueMap.EntryList
    open func single() -> SAPOData.DataValueMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DataValueMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.DataValueMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.DataValueMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DataValueMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DataValueMap.Entry>>
  }
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class DataVersion {
  public static let ODATA_V1: Swift.Int
  public static let ODATA_V2: Swift.Int
  public static let ODATA_V3: Swift.Int
  public static let ODATA_V4: Swift.Int
  public static let ODATA_V4_01: Swift.Int
  public static func asText(version: Swift.Int) -> Swift.String
  public static func parse(version: Swift.String) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DayOfWeek {
  public static let monday: Swift.Int
  public static let tuesday: Swift.Int
  public static let wednesday: Swift.Int
  public static let thursday: Swift.Int
  public static let friday: Swift.Int
  public static let saturday: Swift.Int
  public static let sunday: Swift.Int
  public static func name(day: Swift.Int) -> Swift.String
  public static func name3(day: Swift.Int) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DayTimeDuration : SAPOData.DataValue {
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.DayTimeDuration?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.DayTimeDuration
  open class func compare(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Int
  open func compareTo(_ value: SAPOData.DayTimeDuration) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var days: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.DayTimeDuration?, _ right: SAPOData.DayTimeDuration?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open var hours: Swift.Int {
    get
  }
  open func lessEqual(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Bool
  open func lessThan(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.DayTimeDuration, _ right: SAPOData.DayTimeDuration) -> Swift.Bool
  open var minutes: Swift.Int {
    get
  }
  open var nanos: Swift.Int {
    get
  }
  open func normalize() -> SAPOData.DayTimeDuration
  open func notEqual(_ value: SAPOData.DayTimeDuration) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.DayTimeDuration?, _ right: SAPOData.DayTimeDuration?) -> Swift.Bool
  open class func of(sign: Swift.Int, days: Swift.Int, hours: Swift.Int, minutes: Swift.Int, seconds: Swift.Int, nanos: Swift.Int = (0 as Int)) -> SAPOData.DayTimeDuration
  open class func ofDecimal(seconds: SAPOData.BigDecimal) -> SAPOData.DayTimeDuration
  open class func parse(_ text: Swift.String) -> SAPOData.DayTimeDuration?
  open var seconds: Swift.Int {
    get
  }
  open var sign: Swift.Int {
    get
  }
  open func toDecimal() -> SAPOData.BigDecimal
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DayTimeDurationList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.DayTimeDuration {
    get
    set
  }
  public static let empty: SAPOData.DayTimeDurationList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.DayTimeDuration)
  open func append(contentsOf list: SAPOData.DayTimeDurationList)
  open func appendThis(_ item: SAPOData.DayTimeDuration) -> SAPOData.DayTimeDurationList
  open func copy() -> SAPOData.DayTimeDurationList
  open func first() -> SAPOData.DayTimeDuration
  open class func fromArray(_ array: Swift.Array<SAPOData.DayTimeDuration>) -> SAPOData.DayTimeDurationList
  open func includes(item: SAPOData.DayTimeDuration) -> Swift.Bool
  open func indexOf(item: SAPOData.DayTimeDuration, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.DayTimeDuration)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DayTimeDurationList)
  open func item(at index: Swift.Int) -> SAPOData.DayTimeDuration
  open func last() -> SAPOData.DayTimeDuration
  open func lastIndexOf(item: SAPOData.DayTimeDuration, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.DayTimeDuration>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DayTimeDurationList
  open func single() -> SAPOData.DayTimeDuration
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DayTimeDurationList
  open func toArray() -> Swift.Array<SAPOData.DayTimeDuration>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.DayTimeDuration)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.DayTimeDuration>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.DayTimeDuration>>
}
@_inheritsConvenienceInitializers open class DecimalList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [SAPOData.BigDecimal]) -> SAPOData.DecimalList
  public func toArray() -> [SAPOData.BigDecimal]
  public subscript(index: Swift.Int) -> SAPOData.BigDecimal {
    get
    set
  }
  public static let empty: SAPOData.DecimalList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.BigDecimal)
  open func append(contentsOf list: SAPOData.DecimalList)
  open func appendThis(_ item: SAPOData.BigDecimal) -> SAPOData.DecimalList
  open func copy() -> SAPOData.DecimalList
  open func first() -> SAPOData.BigDecimal
  open func includes(item: SAPOData.BigDecimal) -> Swift.Bool
  open func indexOf(item: SAPOData.BigDecimal, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.BigDecimal)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DecimalList)
  open func item(at index: Swift.Int) -> SAPOData.BigDecimal
  open func last() -> SAPOData.BigDecimal
  open func lastIndexOf(item: SAPOData.BigDecimal, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.BigDecimal>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DecimalList
  open func single() -> SAPOData.BigDecimal
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DecimalList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.BigDecimal)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.BigDecimal>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.BigDecimal>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DecimalValue : SAPOData.DataValue {
  public static let zero: SAPOData.DecimalValue
  open class func compare(_ left: SAPOData.DecimalValue, _ right: SAPOData.DecimalValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.DecimalValue?, _ right: SAPOData.DecimalValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: SAPOData.BigDecimal) -> SAPOData.DecimalValue
  open class func of(optional value: SAPOData.BigDecimal?) -> SAPOData.DecimalValue?
  open class func optional(_ value: Swift.AnyObject?) -> SAPOData.BigDecimal?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> SAPOData.BigDecimal
  open var value: SAPOData.BigDecimal {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class DeltaStream : SAPOData.DataValue {
  final public var isClosed: Swift.Bool
  final public var deltaItem: Swift.AnyObject?
  final public var deltaLink: Swift.String?
  final public var nextLink: Swift.String?
  final public var readLink: Swift.String?
  override public init()
  open func abort() throws
  open func close() throws
  open func current() throws -> Swift.AnyObject?
  override open var dataType: SAPOData.DataType {
    get
  }
  open func entity() throws -> SAPOData.EntityValue
  open func hasCurrent() throws -> Swift.Bool
  open func hasEntity() throws -> Swift.Bool
  open func hasLink() throws -> Swift.Bool
  open func link() throws -> SAPOData.ChangedLink
  open func next() throws -> Swift.Bool
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class DoubleList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Double]) -> SAPOData.DoubleList
  public func toArray() -> [Swift.Double]
  public subscript(index: Swift.Int) -> Swift.Double {
    get
    set
  }
  public static let empty: SAPOData.DoubleList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Double)
  open func append(contentsOf list: SAPOData.DoubleList)
  open func appendThis(_ item: Swift.Double) -> SAPOData.DoubleList
  open func copy() -> SAPOData.DoubleList
  open func first() -> Swift.Double
  open func includes(item: Swift.Double) -> Swift.Bool
  open func indexOf(item: Swift.Double, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Double)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.DoubleList)
  open func item(at index: Swift.Int) -> Swift.Double
  open func last() -> Swift.Double
  open func lastIndexOf(item: Swift.Double, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Double>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.DoubleList
  open func single() -> Swift.Double
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.DoubleList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Double)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Double>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Double>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DoubleValue : SAPOData.DataValue {
  public static let zero: SAPOData.DoubleValue
  open class func compare(_ left: SAPOData.DoubleValue, _ right: SAPOData.DoubleValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.DoubleValue?, _ right: SAPOData.DoubleValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Double) -> SAPOData.DoubleValue
  open class func of(optional value: Swift.Double?) -> SAPOData.DoubleValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Double?
  override open func toString() -> Swift.String
  open func toString3() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Double
  open var value: Swift.Double {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityContainer : SAPOData.ObjectBase {
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var isDefault: Swift.Bool
  final public var sourceLine: Swift.Int
  override public init()
  open func annotation(withName term: Swift.String) throws -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open var baseContainer: SAPOData.EntityContainer {
    get
    set(value)
  }
  open var dataMethods: SAPOData.DataMethodMap {
    get
  }
  open var entitySets: SAPOData.EntitySetMap {
    get
  }
  open var name: Swift.String {
    get
  }
  open var singletons: SAPOData.EntitySetMap {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityContainerList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EntityContainer {
    get
    set
  }
  public static let empty: SAPOData.EntityContainerList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.EntityContainer)
  open func append(contentsOf list: SAPOData.EntityContainerList)
  open func appendThis(_ item: SAPOData.EntityContainer) -> SAPOData.EntityContainerList
  open func copy() -> SAPOData.EntityContainerList
  open func first() -> SAPOData.EntityContainer
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityContainer>) -> SAPOData.EntityContainerList
  open func includes(item: SAPOData.EntityContainer) -> Swift.Bool
  open func indexOf(item: SAPOData.EntityContainer, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.EntityContainer)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityContainerList)
  open func item(at index: Swift.Int) -> SAPOData.EntityContainer
  open func last() -> SAPOData.EntityContainer
  open func lastIndexOf(item: SAPOData.EntityContainer, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainer>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityContainerList
  open func single() -> SAPOData.EntityContainer
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityContainerList
  open func toArray() -> Swift.Array<SAPOData.EntityContainer>
  open func update(at index: Swift.Int, item: SAPOData.EntityContainer)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainer>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainer>>
}
open class EntityContainerMap : SAPOData.MapBase {
  public static let empty: SAPOData.EntityContainerMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EntityContainer) throws
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.EntityContainerMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EntityContainer
  open func sortedEntries() throws -> SAPOData.EntityContainerMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.EntityContainerList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EntityContainer)
  open func updateThis(key: Swift.String, value: SAPOData.EntityContainer) -> SAPOData.EntityContainerMap
  open func updateValue(_ value: SAPOData.EntityContainer, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EntityContainer?
  open func values() -> SAPOData.EntityContainerList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.EntityContainer {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntityContainerMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EntityContainerMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.EntityContainerMap.Entry)
    open func append(contentsOf list: SAPOData.EntityContainerMap.EntryList)
    open func appendThis(_ item: SAPOData.EntityContainerMap.Entry) -> SAPOData.EntityContainerMap.EntryList
    open func copy() -> SAPOData.EntityContainerMap.EntryList
    open func first() -> SAPOData.EntityContainerMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EntityContainerMap.Entry>) -> SAPOData.EntityContainerMap.EntryList
    open func includes(item: SAPOData.EntityContainerMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.EntityContainerMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.EntityContainerMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityContainerMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.EntityContainerMap.Entry
    open func last() -> SAPOData.EntityContainerMap.Entry
    open func lastIndexOf(item: SAPOData.EntityContainerMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainerMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityContainerMap.EntryList
    open func single() -> SAPOData.EntityContainerMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityContainerMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EntityContainerMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.EntityContainerMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainerMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityContainerMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityKey : SAPOData.ObjectBase {
  final public var map: SAPOData.DataValueMap
  override public init()
  override open func toString() -> Swift.String
  open func with(name: Swift.String, value: SAPOData.DataValue?) -> SAPOData.EntityKey
  open func withProperty(_ property: SAPOData.Property, value: SAPOData.DataValue?) -> SAPOData.EntityKey
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntitySet : SAPOData.ObjectBase, SAPOData.BindingPath {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  public static let undefined: SAPOData.EntitySet
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var resourcePath: Swift.String
  final public var targetPath: Swift.String
  final public var isExtension: Swift.Bool
  final public var systemFlags: Swift.Int
  final public var sourceLine: Swift.Int
  final public var isSingleton: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open func binding(withName name: Swift.String) -> SAPOData.EntitySet
  open var defaultSelect: SAPOData.SelectItemList {
    get
  }
  open var entityType: SAPOData.EntityType {
    get
    set(value)
  }
  open var metrics: SAPOData.EntitySetMetrics {
    get
  }
  open var name: Swift.String {
    get
  }
  open var pathBindings: SAPOData.EntitySetMap {
    get
  }
  override open func toString() -> Swift.String
  open class func undefinedIfNull(entitySet: SAPOData.EntitySet?) -> SAPOData.EntitySet
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntitySetList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EntitySet {
    get
    set
  }
  public static let empty: SAPOData.EntitySetList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.EntitySet)
  open func append(contentsOf list: SAPOData.EntitySetList)
  open func appendThis(_ item: SAPOData.EntitySet) -> SAPOData.EntitySetList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.EntitySetList
  open func first() -> SAPOData.EntitySet
  open class func fromArray(_ array: Swift.Array<SAPOData.EntitySet>) -> SAPOData.EntitySetList
  open func includes(item: SAPOData.EntitySet) -> Swift.Bool
  open func indexOf(item: SAPOData.EntitySet, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.EntitySet)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntitySetList)
  open func item(at index: Swift.Int) -> SAPOData.EntitySet
  open func last() -> SAPOData.EntitySet
  open func lastIndexOf(item: SAPOData.EntitySet, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntitySetList
  open func single() -> SAPOData.EntitySet
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntitySetList
  open func toArray() -> Swift.Array<SAPOData.EntitySet>
  open func update(at index: Swift.Int, item: SAPOData.EntitySet)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySet>>
}
open class EntitySetMap : SAPOData.MapBase {
  public static let empty: SAPOData.EntitySetMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EntitySet) throws
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.EntitySetMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EntitySet
  open func sortedEntries() throws -> SAPOData.EntitySetMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.EntitySetList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EntitySet)
  open func updateThis(key: Swift.String, value: SAPOData.EntitySet) -> SAPOData.EntitySetMap
  open func updateValue(_ value: SAPOData.EntitySet, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EntitySet?
  open func values() -> SAPOData.EntitySetList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.EntitySet {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntitySetMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EntitySetMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.EntitySetMap.Entry)
    open func append(contentsOf list: SAPOData.EntitySetMap.EntryList)
    open func appendThis(_ item: SAPOData.EntitySetMap.Entry) -> SAPOData.EntitySetMap.EntryList
    open func copy() -> SAPOData.EntitySetMap.EntryList
    open func first() -> SAPOData.EntitySetMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EntitySetMap.Entry>) -> SAPOData.EntitySetMap.EntryList
    open func includes(item: SAPOData.EntitySetMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.EntitySetMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.EntitySetMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntitySetMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.EntitySetMap.Entry
    open func last() -> SAPOData.EntitySetMap.Entry
    open func lastIndexOf(item: SAPOData.EntitySetMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntitySetMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntitySetMap.EntryList
    open func single() -> SAPOData.EntitySetMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntitySetMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EntitySetMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.EntitySetMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySetMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntitySetMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntitySetMetrics : SAPOData.ObjectBase {
  override public init()
  open var deltaDownloadBytes: SAPOData.DataMetric {
    get
    set(value)
  }
  open var deltaDownloadBytes_gzip: SAPOData.DataMetric {
    get
    set(value)
  }
  open var deltaDownloadRows: SAPOData.DataMetric {
    get
    set(value)
  }
  open var deltaDownloadTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var initialDownloadBytes: SAPOData.DataMetric {
    get
    set(value)
  }
  open var initialDownloadBytes_gzip: SAPOData.DataMetric {
    get
    set(value)
  }
  open var initialDownloadRows: SAPOData.DataMetric {
    get
    set(value)
  }
  open var initialDownloadTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var offlineCreateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var offlineDeleteEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var offlineExecuteQueryTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var offlineQueryResultRows: SAPOData.DataMetric {
    get
    set(value)
  }
  open var offlineUpdateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineCreateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineCreateLinkTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineDeleteEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineDeleteLinkTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineExecuteQueryTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineFollowedNextCount: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineHttpResponseTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineQueryResultBytes: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineQueryResultBytes_gzip: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineQueryResultRows: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineReadEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineUpdateEntityTime: SAPOData.DataMetric {
    get
    set(value)
  }
  open var onlineUpdateLinkTime: SAPOData.DataMetric {
    get
    set(value)
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class EntityStream : SAPOData.ObjectBase {
  open func abort() throws
  open func close() throws
  open var deltaLink: Swift.String? {
    get
  }
  open func hasNext() throws -> Swift.Bool
  open var isClosed: Swift.Bool {
    get
  }
  open func next() throws -> SAPOData.EntityValue
  open var nextLink: Swift.String? {
    get
  }
  open var readLink: Swift.String? {
    get
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class EntityType : SAPOData.StructureType {
  public static let undefined: SAPOData.EntityType
  public static let abstractBase: SAPOData.EntityType
  final public var subtypes: SAPOData.EntityTypeList?
  final public var isMedia: Swift.Bool
  final public var customPaths: SAPOData.CustomPathList?
  final public var countSets: Swift.Int
  override public init()
  override open var code: Swift.Int {
    get
  }
  open var hasSubtypes: Swift.Bool {
    get
  }
  open var hasSupertype: Swift.Bool {
    get
  }
  open var keyProperties: SAPOData.PropertyList {
    get
    set(value)
  }
  open func keyProperty(name: Swift.String) -> SAPOData.Property
  open var mediaProperty: SAPOData.StreamProperty {
    get
    set(value)
  }
  open func registerFactory(_ factory: SAPOData.ObjectFactory)
  open var supertype: SAPOData.EntityType? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  open func withFactory(_ factory: SAPOData.ObjectFactory) -> SAPOData.EntityType
  @objc deinit
}
@_inheritsConvenienceInitializers open class EntityTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EntityType {
    get
    set
  }
  public static let empty: SAPOData.EntityTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.EntityType)
  open func append(contentsOf list: SAPOData.EntityTypeList)
  open func appendThis(_ item: SAPOData.EntityType) -> SAPOData.EntityTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.EntityTypeList
  open func first() -> SAPOData.EntityType
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityType>) -> SAPOData.EntityTypeList
  open func includes(item: SAPOData.EntityType) -> Swift.Bool
  open func indexOf(item: SAPOData.EntityType, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.EntityType)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityTypeList)
  open func item(at index: Swift.Int) -> SAPOData.EntityType
  open func last() -> SAPOData.EntityType
  open func lastIndexOf(item: SAPOData.EntityType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityType>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityTypeList
  open func single() -> SAPOData.EntityType
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityTypeList
  open func toArray() -> Swift.Array<SAPOData.EntityType>
  open func update(at index: Swift.Int, item: SAPOData.EntityType)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityType>>
}
open class EntityTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.EntityTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EntityType)
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.EntityTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EntityType
  open func sortedEntries() -> SAPOData.EntityTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.EntityTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EntityType)
  open func updateThis(key: Swift.String, value: SAPOData.EntityType) -> SAPOData.EntityTypeMap
  open func updateValue(_ value: SAPOData.EntityType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EntityType?
  open func values() -> SAPOData.EntityTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.EntityType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntityTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EntityTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.EntityTypeMap.Entry)
    open func append(contentsOf list: SAPOData.EntityTypeMap.EntryList)
    open func appendThis(_ item: SAPOData.EntityTypeMap.Entry) -> SAPOData.EntityTypeMap.EntryList
    open func copy() -> SAPOData.EntityTypeMap.EntryList
    open func first() -> SAPOData.EntityTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EntityTypeMap.Entry>) -> SAPOData.EntityTypeMap.EntryList
    open func includes(item: SAPOData.EntityTypeMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.EntityTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.EntityTypeMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityTypeMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.EntityTypeMap.Entry
    open func last() -> SAPOData.EntityTypeMap.Entry
    open func lastIndexOf(item: SAPOData.EntityTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityTypeMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityTypeMap.EntryList
    open func single() -> SAPOData.EntityTypeMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EntityTypeMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.EntityTypeMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityTypeMap.Entry>>
  }
  override public init()
  @objc deinit
}
open class EntityValue : SAPOData.StructureBase, SAPOData.BindingPath {
  required public init(from decoder: Swift.Decoder) throws
  override public func encode(to encoder: Swift.Encoder) throws
  final public var parentEntity: SAPOData.EntityValue?
  final public var parentProperty: SAPOData.Property?
  final public var deltaTime: SAPOData.GlobalDateTime?
  final public var entityID: Swift.String?
  final public var readLink: Swift.String?
  final public var editLink: Swift.String?
  final public var systemKey: Swift.Int64
  final public var internalData: Swift.AnyObject?
  final public var systemFlags: Swift.Int
  public init(withDefaults: Swift.Bool = false, type: SAPOData.EntityType? = nil)
  open func bindEntity(_ entity: SAPOData.EntityValue, to: SAPOData.Property)
  open var canonicalURL: Swift.String {
    get
  }
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.EntityValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.EntityValue
  open class func compareKeys(_ left: SAPOData.EntityValue?, _ right: SAPOData.EntityValue?) -> Swift.Int
  open func copyEntity() -> SAPOData.EntityValue
  open func copyKey(from: SAPOData.EntityValue)
  open func copyProperties(from: SAPOData.EntityValue)
  override open var dataType: SAPOData.DataType {
    get
  }
  open var entityKey: SAPOData.EntityKey {
    get
  }
  open var entitySet: SAPOData.EntitySet {
    get
    set(value)
  }
  open var entityTag: Swift.String? {
    get
    set(value)
  }
  open var entityType: SAPOData.EntityType {
    get
  }
  open class func equal(_ left: SAPOData.EntityValue?, _ right: SAPOData.EntityValue?) -> Swift.Bool
  open class func equalKeys(_ left: SAPOData.EntityValue?, _ right: SAPOData.EntityValue?) -> Swift.Bool
  open var hasChangedBindings: Swift.Bool {
    get
    set(value)
  }
  open func hasKey() -> Swift.Bool
  open var hasLocalRelatives: Swift.Bool? {
    get
    set(value)
  }
  open var hasPendingChanges: Swift.Bool {
    get
    set(value)
  }
  open var hasRelativesWithPendingChanges: Swift.Bool? {
    get
    set(value)
  }
  open var inErrorState: Swift.Bool {
    get
    set(value)
  }
  open func inSet(_ set: SAPOData.EntitySet) -> SAPOData.EntityValue
  open var isBinding: Swift.Bool {
    get
    set(value)
  }
  open var isCreated: Swift.Bool {
    get
    set(value)
  }
  open var isDeleted: Swift.Bool {
    get
    set(value)
  }
  open var isLocal: Swift.Bool {
    get
    set(value)
  }
  open var isNew: Swift.Bool {
    get
    set(value)
  }
  open func isNewOrChanged(property: SAPOData.Property) -> Swift.Bool
  open var isReference: Swift.Bool {
    get
    set(value)
  }
  open var isResolved: Swift.Bool {
    get
    set(value)
  }
  open var isResolving: Swift.Bool {
    get
    set(value)
  }
  open var isUpdated: Swift.Bool {
    get
    set(value)
  }
  open var isUpsert: Swift.Bool {
    get
    set(value)
  }
  open var mediaStream: SAPOData.StreamLink {
    get
    set(value)
  }
  open var mustBeModified: Swift.Bool {
    get
    set(value)
  }
  open var mustBeReloaded: Swift.Bool {
    get
    set(value)
  }
  open var noLocalCascade: Swift.Bool {
    get
    set(value)
  }
  open class func ofType(_ type: SAPOData.EntityType) -> SAPOData.EntityValue
  open var oldEntity: SAPOData.EntityValue? {
    get
    set(value)
  }
  open func rememberOld()
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open func unbindEntity(_ entity: SAPOData.EntityValue?, from: SAPOData.Property)
  open func withKey(_ key: SAPOData.EntityKey) -> SAPOData.EntityValue
  open func withLock(work: @escaping () -> Swift.Void)
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class EntityValueList : SAPOData.ListBase, Swift.Codable, Swift.Sequence {
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  public subscript(index: Swift.Int) -> SAPOData.EntityValue {
    get
    set
  }
  public static let empty: SAPOData.EntityValueList
  final public var isDelta: Swift.Bool
  final public var isReference: Swift.Bool
  final public var deltaLink: Swift.String?
  final public var nextLink: Swift.String?
  final public var readLink: Swift.String?
  final public var totalCount: Swift.Int64?
  final public var changedLinks: SAPOData.ChangedLinkList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.EntityValue)
  open func append(contentsOf list: SAPOData.EntityValueList)
  open func appendOptional(_ item: SAPOData.EntityValue?) -> SAPOData.EntityValueList
  open func appendThis(_ item: SAPOData.EntityValue) -> SAPOData.EntityValueList
  open func applyPageSize(query: SAPOData.DataQuery) -> SAPOData.EntityValueList
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.EntityValueList
  open func copy() -> SAPOData.EntityValueList
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.EntityValueList?, b: SAPOData.EntityValueList?) -> Swift.Bool
  open func filterAndSort(query: SAPOData.DataQuery) throws -> SAPOData.EntityValueList
  open func filterWithQuery(_ query: SAPOData.DataQuery) throws -> SAPOData.EntityValueList
  open func first() -> SAPOData.EntityValue
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityValue>) -> SAPOData.EntityValueList
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityValue?>) -> SAPOData.EntityValueList
  open func includes(item: SAPOData.EntityValue) -> Swift.Bool
  open func indexOf(item: SAPOData.EntityValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.EntityValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityValueList)
  open func item(at index: Swift.Int) -> SAPOData.EntityValue
  open func last() -> SAPOData.EntityValue
  open func lastIndexOf(item: SAPOData.EntityValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue>>
  open func optionalItem(at index: Swift.Int) -> SAPOData.EntityValue?
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityValueList
  open class func shareOptional(_ list: SAPOData.ListBase) -> SAPOData.EntityValueList
  open func single() -> SAPOData.EntityValue
  open func skipAndTop(query: SAPOData.DataQuery) -> SAPOData.EntityValueList
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityValueList
  open func sortWithQuery(_ query: SAPOData.DataQuery) throws
  open func toArray() -> Swift.Array<SAPOData.EntityValue>
  open func update(at index: Swift.Int, item: SAPOData.EntityValue)
  open func updateOptional(at index: Swift.Int, item: SAPOData.EntityValue?)
  open func withItemType(_ type: SAPOData.DataType) -> SAPOData.EntityValueList
  open func withNulls() -> SAPOData.EntityValueListWithNulls
  open func withType(_ type: SAPOData.DataType) -> SAPOData.EntityValueList
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue>>
}
@_inheritsConvenienceInitializers open class EntityValueListWithNulls : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EntityValue? {
    get
    set
  }
  public static let empty: SAPOData.EntityValueListWithNulls
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.EntityValue?)
  open func append(contentsOf list: SAPOData.EntityValueListWithNulls)
  open func appendThis(_ item: SAPOData.EntityValue?) -> SAPOData.EntityValueListWithNulls
  open func copy() -> SAPOData.EntityValueListWithNulls
  open func first() -> SAPOData.EntityValue?
  open class func fromArray(_ array: Swift.Array<SAPOData.EntityValue?>) -> SAPOData.EntityValueListWithNulls
  open func includes(item: SAPOData.EntityValue?) -> Swift.Bool
  open func indexOf(item: SAPOData.EntityValue?, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.EntityValue?)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityValueListWithNulls)
  open func item(at index: Swift.Int) -> SAPOData.EntityValue?
  open func last() -> SAPOData.EntityValue?
  open func lastIndexOf(item: SAPOData.EntityValue?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue?>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityValueListWithNulls
  open func single() -> SAPOData.EntityValue?
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityValueListWithNulls
  open func toArray() -> Swift.Array<SAPOData.EntityValue?>
  open func update(at index: Swift.Int, item: SAPOData.EntityValue?)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue?>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValue?>>
}
open class EntityValueMap : SAPOData.MapBase {
  public static let empty: SAPOData.EntityValueMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.EntityValueMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EntityValue
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EntityValue)
  open func updateThis(key: Swift.String, value: SAPOData.EntityValue) -> SAPOData.EntityValueMap
  open func updateValue(_ value: SAPOData.EntityValue, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EntityValue?
  open func values() -> SAPOData.EntityValueList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.EntityValue {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EntityValueMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EntityValueMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.EntityValueMap.Entry)
    open func append(contentsOf list: SAPOData.EntityValueMap.EntryList)
    open func appendThis(_ item: SAPOData.EntityValueMap.Entry) -> SAPOData.EntityValueMap.EntryList
    open func copy() -> SAPOData.EntityValueMap.EntryList
    open func first() -> SAPOData.EntityValueMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EntityValueMap.Entry>) -> SAPOData.EntityValueMap.EntryList
    open func includes(item: SAPOData.EntityValueMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.EntityValueMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.EntityValueMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.EntityValueMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.EntityValueMap.Entry
    open func last() -> SAPOData.EntityValueMap.Entry
    open func lastIndexOf(item: SAPOData.EntityValueMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EntityValueMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EntityValueMap.EntryList
    open func single() -> SAPOData.EntityValueMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EntityValueMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EntityValueMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.EntityValueMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValueMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EntityValueMap.Entry>>
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class EnumType : SAPOData.DataType {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  public static let undefined: SAPOData.EnumType
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var sourceLine: Swift.Int
  final public var isExtension: Swift.Bool
  final public var isInferred: Swift.Bool
  final public var isFlags: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  override open var code: Swift.Int {
    get
  }
  open var derivedFrom: SAPOData.DataType {
    get
    set(value)
  }
  open func findMember(name: Swift.String) -> SAPOData.EnumValue?
  override open var isDerived: Swift.Bool {
    get
  }
  open func member(name: Swift.String) -> SAPOData.EnumValue
  open var memberList: SAPOData.EnumValueList {
    get
    set(value)
  }
  open var memberMap: SAPOData.EnumValueMap {
    get
    set(value)
  }
  override open var name: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  open func withByte(_ value: Swift.Int) -> SAPOData.EnumValue
  open func withInt(_ value: Swift.Int) -> SAPOData.EnumValue
  open func withLong(_ value: Swift.Int64) -> SAPOData.EnumValue
  open func withOptionalByte(_ value: Swift.Int?) -> SAPOData.EnumValue?
  open func withOptionalInt(_ value: Swift.Int?) -> SAPOData.EnumValue?
  open func withOptionalLong(_ value: Swift.Int64?) -> SAPOData.EnumValue?
  open func withOptionalShort(_ value: Swift.Int?) -> SAPOData.EnumValue?
  open func withShort(_ value: Swift.Int) -> SAPOData.EnumValue
  open func withUnsignedByte(_ value: SAPOData.UnsignedByte?) -> SAPOData.EnumValue?
  @objc deinit
}
@_inheritsConvenienceInitializers open class EnumTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EnumType {
    get
    set
  }
  public static let empty: SAPOData.EnumTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.EnumType)
  open func append(contentsOf list: SAPOData.EnumTypeList)
  open func appendThis(_ item: SAPOData.EnumType) -> SAPOData.EnumTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.EnumTypeList
  open func first() -> SAPOData.EnumType
  open class func fromArray(_ array: Swift.Array<SAPOData.EnumType>) -> SAPOData.EnumTypeList
  open func includes(item: SAPOData.EnumType) -> Swift.Bool
  open func indexOf(item: SAPOData.EnumType, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.EnumType)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.EnumTypeList)
  open func item(at index: Swift.Int) -> SAPOData.EnumType
  open func last() -> SAPOData.EnumType
  open func lastIndexOf(item: SAPOData.EnumType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EnumType>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EnumTypeList
  open func single() -> SAPOData.EnumType
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EnumTypeList
  open func toArray() -> Swift.Array<SAPOData.EnumType>
  open func update(at index: Swift.Int, item: SAPOData.EnumType)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EnumType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EnumType>>
}
open class EnumTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.EnumTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EnumType)
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.EnumTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EnumType
  open func sortedEntries() -> SAPOData.EnumTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.EnumTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EnumType)
  open func updateThis(key: Swift.String, value: SAPOData.EnumType) -> SAPOData.EnumTypeMap
  open func updateValue(_ value: SAPOData.EnumType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EnumType?
  open func values() -> SAPOData.EnumTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.EnumType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EnumTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EnumTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.EnumTypeMap.Entry)
    open func append(contentsOf list: SAPOData.EnumTypeMap.EntryList)
    open func appendThis(_ item: SAPOData.EnumTypeMap.Entry) -> SAPOData.EnumTypeMap.EntryList
    open func copy() -> SAPOData.EnumTypeMap.EntryList
    open func first() -> SAPOData.EnumTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EnumTypeMap.Entry>) -> SAPOData.EnumTypeMap.EntryList
    open func includes(item: SAPOData.EnumTypeMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.EnumTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.EnumTypeMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.EnumTypeMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.EnumTypeMap.Entry
    open func last() -> SAPOData.EnumTypeMap.Entry
    open func lastIndexOf(item: SAPOData.EnumTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EnumTypeMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EnumTypeMap.EntryList
    open func single() -> SAPOData.EnumTypeMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EnumTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EnumTypeMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.EnumTypeMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EnumTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EnumTypeMap.Entry>>
  }
  override public init()
  @objc deinit
}
open class EnumValue : SAPOData.DataValue {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  final public var isExtension: Swift.Bool
  final public var sourceLine: Swift.Int
  public init(num: Swift.Int64, str: Swift.String, type: SAPOData.EnumType)
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open func byteValue() -> Swift.Int
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.EnumValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.EnumValue
  open class func compare(x: SAPOData.EnumValue, y: SAPOData.EnumValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var enumType: SAPOData.EnumType {
    get
  }
  open class func equal(x: SAPOData.EnumValue?, y: SAPOData.EnumValue?) -> Swift.Bool
  open func intValue() -> Swift.Int
  open func longValue() -> Swift.Int64
  open var name: Swift.String {
    get
  }
  open func shortValue() -> Swift.Int
  override open func toString() -> Swift.String
  open var value: SAPOData.DataValue {
    get
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class EnumValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.EnumValue {
    get
    set
  }
  public static let empty: SAPOData.EnumValueList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.EnumValue)
  open func append(contentsOf list: SAPOData.EnumValueList)
  open func appendThis(_ item: SAPOData.EnumValue) -> SAPOData.EnumValueList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.EnumValueList
  open func first() -> SAPOData.EnumValue
  open class func fromArray(_ array: Swift.Array<SAPOData.EnumValue>) -> SAPOData.EnumValueList
  open func includes(item: SAPOData.EnumValue) -> Swift.Bool
  open func indexOf(item: SAPOData.EnumValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.EnumValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.EnumValueList)
  open func item(at index: Swift.Int) -> SAPOData.EnumValue
  open func last() -> SAPOData.EnumValue
  open func lastIndexOf(item: SAPOData.EnumValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EnumValue>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.EnumValueList
  open func single() -> SAPOData.EnumValue
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EnumValueList
  open func toArray() -> Swift.Array<SAPOData.EnumValue>
  open func update(at index: Swift.Int, item: SAPOData.EnumValue)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EnumValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EnumValue>>
}
open class EnumValueMap : SAPOData.MapBase {
  public static let empty: SAPOData.EnumValueMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.EnumValue) throws
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.EnumValueMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.EnumValue
  open func sortedEntries() throws -> SAPOData.EnumValueMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.EnumValueList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.EnumValue)
  open func updateThis(key: Swift.String, value: SAPOData.EnumValue) -> SAPOData.EnumValueMap
  open func updateValue(_ value: SAPOData.EnumValue, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.EnumValue?
  open func values() -> SAPOData.EnumValueList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.EnumValue {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.EnumValueMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.EnumValueMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.EnumValueMap.Entry)
    open func append(contentsOf list: SAPOData.EnumValueMap.EntryList)
    open func appendThis(_ item: SAPOData.EnumValueMap.Entry) -> SAPOData.EnumValueMap.EntryList
    open func copy() -> SAPOData.EnumValueMap.EntryList
    open func first() -> SAPOData.EnumValueMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.EnumValueMap.Entry>) -> SAPOData.EnumValueMap.EntryList
    open func includes(item: SAPOData.EnumValueMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.EnumValueMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.EnumValueMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.EnumValueMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.EnumValueMap.Entry
    open func last() -> SAPOData.EnumValueMap.Entry
    open func lastIndexOf(item: SAPOData.EnumValueMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.EnumValueMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.EnumValueMap.EntryList
    open func single() -> SAPOData.EnumValueMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.EnumValueMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.EnumValueMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.EnumValueMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.EnumValueMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.EnumValueMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class ErrorResponse : SAPOData.ObjectBase {
  final public var code: Swift.String
  final public var message: Swift.String
  final public var language: Swift.String?
  final public var target: Swift.String?
  final public var details: SAPOData.ErrorResponseList
  final public var innerDetails: Swift.String?
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class ErrorResponseList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ErrorResponse {
    get
    set
  }
  public static let empty: SAPOData.ErrorResponseList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.ErrorResponse)
  open func append(contentsOf list: SAPOData.ErrorResponseList)
  open func appendThis(_ item: SAPOData.ErrorResponse) -> SAPOData.ErrorResponseList
  open func copy() -> SAPOData.ErrorResponseList
  open func first() -> SAPOData.ErrorResponse
  open class func fromArray(_ array: Swift.Array<SAPOData.ErrorResponse>) -> SAPOData.ErrorResponseList
  open func includes(item: SAPOData.ErrorResponse) -> Swift.Bool
  open func indexOf(item: SAPOData.ErrorResponse, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.ErrorResponse)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ErrorResponseList)
  open func item(at index: Swift.Int) -> SAPOData.ErrorResponse
  open func last() -> SAPOData.ErrorResponse
  open func lastIndexOf(item: SAPOData.ErrorResponse, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ErrorResponse>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ErrorResponseList
  open func single() -> SAPOData.ErrorResponse
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ErrorResponseList
  open func toArray() -> Swift.Array<SAPOData.ErrorResponse>
  open func update(at index: Swift.Int, item: SAPOData.ErrorResponse)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ErrorResponse>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ErrorResponse>>
}
@_inheritsConvenienceInitializers open class ExpandItem : SAPOData.ObjectBase {
  public static func of(property: SAPOData.Property) -> SAPOData.ExpandItem
  final public var query: SAPOData.DataQuery?
  final public var isHidden: Swift.Bool
  override public init()
  open class func of(_ item: SAPOData.PropertyPath) -> SAPOData.ExpandItem
  open var path: SAPOData.DataPath {
    get
    set(value)
  }
  open func requiredQuery() -> SAPOData.DataQuery
  open func toProperty() -> SAPOData.Property?
  open func toRequiredProperty() throws -> SAPOData.Property
  override open func toString() -> Swift.String
  open func withQuery(_ query: SAPOData.DataQuery) -> SAPOData.ExpandItem
  @objc deinit
}
@_inheritsConvenienceInitializers open class ExpandItemList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.ExpandItem {
    get
    set
  }
  public static let empty: SAPOData.ExpandItemList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.ExpandItem)
  open func append(contentsOf list: SAPOData.ExpandItemList)
  open func appendThis(_ item: SAPOData.ExpandItem) -> SAPOData.ExpandItemList
  open func copy() -> SAPOData.ExpandItemList
  open func first() -> SAPOData.ExpandItem
  open func forProperty(_ property: SAPOData.Property) throws -> SAPOData.ExpandItem?
  open class func fromArray(_ array: Swift.Array<SAPOData.ExpandItem>) -> SAPOData.ExpandItemList
  open func hasProperty(_ property: SAPOData.Property) throws -> Swift.Bool
  open func includes(item: SAPOData.ExpandItem) -> Swift.Bool
  open func indexOf(item: SAPOData.ExpandItem, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.ExpandItem)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ExpandItemList)
  open func item(at index: Swift.Int) -> SAPOData.ExpandItem
  open func last() -> SAPOData.ExpandItem
  open func lastIndexOf(item: SAPOData.ExpandItem, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ExpandItem>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ExpandItemList
  open func single() -> SAPOData.ExpandItem
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ExpandItemList
  open func toArray() -> Swift.Array<SAPOData.ExpandItem>
  open func update(at index: Swift.Int, item: SAPOData.ExpandItem)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ExpandItem>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ExpandItem>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ExpandTransform : SAPOData.TransformValue {
  open class func create(_ propertyPath: SAPOData.PropertyPath) -> SAPOData.ExpandTransform
  open var expandItem: SAPOData.ExpandTransform? {
    get
  }
  open var filter: SAPOData.FilterTransform? {
    get
  }
  open var propertyPath: SAPOData.PropertyPath {
    get
  }
  open class func withExpand(_ propertyPath: SAPOData.PropertyPath, expandItem: SAPOData.ExpandTransform) -> SAPOData.ExpandTransform
  open class func withFilter(_ propertyPath: SAPOData.PropertyPath, filter: SAPOData.FilterTransform) -> SAPOData.ExpandTransform
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FilterTransform : SAPOData.TransformValue {
  open class func of(_ queryFilter: SAPOData.QueryFilter) -> SAPOData.FilterTransform
  open var queryFilter: SAPOData.QueryFilter {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class FloatList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Float]) -> SAPOData.FloatList
  public func toArray() -> [Swift.Float]
  public subscript(index: Swift.Int) -> Swift.Float {
    get
    set
  }
  public static let empty: SAPOData.FloatList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Float)
  open func append(contentsOf list: SAPOData.FloatList)
  open func appendThis(_ item: Swift.Float) -> SAPOData.FloatList
  open func copy() -> SAPOData.FloatList
  open func first() -> Swift.Float
  open func includes(item: Swift.Float) -> Swift.Bool
  open func indexOf(item: Swift.Float, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Float)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.FloatList)
  open func item(at index: Swift.Int) -> Swift.Float
  open func last() -> Swift.Float
  open func lastIndexOf(item: Swift.Float, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Float>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.FloatList
  open func single() -> Swift.Float
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.FloatList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Float)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Float>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Float>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FloatValue : SAPOData.DataValue {
  public static let zero: SAPOData.FloatValue
  open class func compare(_ left: SAPOData.FloatValue, _ right: SAPOData.FloatValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.FloatValue?, _ right: SAPOData.FloatValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Float) -> SAPOData.FloatValue
  open class func of(optional value: Swift.Float?) -> SAPOData.FloatValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Float?
  override open func toString() -> Swift.String
  open func toString3() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Float
  open var value: Swift.Float {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyCollection : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyCollection?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyCollection
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open var geographies: SAPOData.GeographyValueList {
    get
    set(value)
  }
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyCollection
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyCollection
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyLineString : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyLineString?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyLineString
  open var coordinates: SAPOData.LineStringCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyLineString
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyLineString
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyMultiLineString : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiLineString?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiLineString
  open var coordinates: SAPOData.MultiLineStringCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyMultiLineString
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyMultiLineString
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyMultiPoint : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiPoint?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiPoint
  open var coordinates: SAPOData.MultiPointCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyMultiPoint
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyMultiPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyMultiPolygon : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiPolygon?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyMultiPolygon
  open var coordinates: SAPOData.MultiPolygonCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyMultiPolygon
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyMultiPolygon
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyPoint : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyPoint?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyPoint
  open var coordinates: SAPOData.PointCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyPoint
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyPoint
  open class func with(x: Swift.Double, y: Swift.Double) -> SAPOData.GeographyPoint
  open class func with(x: Swift.Double, y: Swift.Double, m: Swift.Double) -> SAPOData.GeographyPoint
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double) -> SAPOData.GeographyPoint
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double, m: Swift.Double) -> SAPOData.GeographyPoint
  open class func with(latitude: Swift.Double, longitude: Swift.Double) -> SAPOData.GeographyPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyPolygon : SAPOData.GeographyValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyPolygon?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyPolygon
  open var coordinates: SAPOData.PolygonCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeographyPolygon
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyPolygon
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyValue : SAPOData.GeospatialValue {
  public static let defaultSrid: Swift.Int
  override public init()
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeographyValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeographyValue
  open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parseAny(_ text: Swift.String, type: SAPOData.DataType) throws -> SAPOData.GeographyValue
  open class func parseAnyWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeographyValue
  override open var srsCode: Swift.Int {
    get
    set(value)
  }
  override open var srsName: Swift.String? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeographyValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.GeographyValue {
    get
    set
  }
  public static let empty: SAPOData.GeographyValueList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.GeographyValue)
  open func append(contentsOf list: SAPOData.GeographyValueList)
  open func appendThis(_ item: SAPOData.GeographyValue) -> SAPOData.GeographyValueList
  open func copy() -> SAPOData.GeographyValueList
  open func first() -> SAPOData.GeographyValue
  open class func fromArray(_ array: Swift.Array<SAPOData.GeographyValue>) -> SAPOData.GeographyValueList
  open func includes(item: SAPOData.GeographyValue) -> Swift.Bool
  open func indexOf(item: SAPOData.GeographyValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.GeographyValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.GeographyValueList)
  open func item(at index: Swift.Int) -> SAPOData.GeographyValue
  open func last() -> SAPOData.GeographyValue
  open func lastIndexOf(item: SAPOData.GeographyValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.GeographyValue>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.GeographyValueList
  open func single() -> SAPOData.GeographyValue
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.GeographyValueList
  open func toArray() -> Swift.Array<SAPOData.GeographyValue>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.GeographyValue)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.GeographyValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.GeographyValue>>
}
@_inheritsConvenienceInitializers open class GeometryCollection : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryCollection?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryCollection
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open var geometries: SAPOData.GeometryValueList {
    get
    set(value)
  }
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryCollection
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryCollection
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryLineString : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryLineString?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryLineString
  open var coordinates: SAPOData.LineStringCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryLineString
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryLineString
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryMultiLineString : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiLineString?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiLineString
  open var coordinates: SAPOData.MultiLineStringCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryMultiLineString
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryMultiLineString
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryMultiPoint : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiPoint?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiPoint
  open var coordinates: SAPOData.MultiPointCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryMultiPoint
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryMultiPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryMultiPolygon : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiPolygon?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryMultiPolygon
  open var coordinates: SAPOData.MultiPolygonCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryMultiPolygon
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryMultiPolygon
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryPoint : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryPoint?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryPoint
  open var coordinates: SAPOData.PointCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryPoint
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryPolygon : SAPOData.GeometryValue {
  override public init()
  override open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryPolygon?
  override open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryPolygon
  open var coordinates: SAPOData.PolygonCoordinates {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.GeometryPolygon
  open class func parseWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryPolygon
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryValue : SAPOData.GeospatialValue {
  public static let defaultSrid: Swift.Int
  override public init()
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GeometryValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GeometryValue
  open func formatWKT(sridRequired: Swift.Bool = false) -> Swift.String
  open class func parseAny(_ text: Swift.String, type: SAPOData.DataType) throws -> SAPOData.GeometryValue
  open class func parseAnyWKT(_ text: Swift.String, sridRequired: Swift.Bool = false) throws -> SAPOData.GeometryValue
  override open var srsCode: Swift.Int {
    get
    set(value)
  }
  override open var srsName: Swift.String? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  open class func with(x: Swift.Double, y: Swift.Double) -> SAPOData.GeometryPoint
  open class func with(x: Swift.Double, y: Swift.Double, m: Swift.Double) -> SAPOData.GeometryPoint
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double) -> SAPOData.GeometryPoint
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double, m: Swift.Double) -> SAPOData.GeometryPoint
  open class func with(latitude: Swift.Double, longitude: Swift.Double) -> SAPOData.GeometryPoint
  @objc deinit
}
@_inheritsConvenienceInitializers open class GeometryValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.GeometryValue {
    get
    set
  }
  public static let empty: SAPOData.GeometryValueList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.GeometryValue)
  open func append(contentsOf list: SAPOData.GeometryValueList)
  open func appendThis(_ item: SAPOData.GeometryValue) -> SAPOData.GeometryValueList
  open func copy() -> SAPOData.GeometryValueList
  open func first() -> SAPOData.GeometryValue
  open class func fromArray(_ array: Swift.Array<SAPOData.GeometryValue>) -> SAPOData.GeometryValueList
  open func includes(item: SAPOData.GeometryValue) -> Swift.Bool
  open func indexOf(item: SAPOData.GeometryValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.GeometryValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.GeometryValueList)
  open func item(at index: Swift.Int) -> SAPOData.GeometryValue
  open func last() -> SAPOData.GeometryValue
  open func lastIndexOf(item: SAPOData.GeometryValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.GeometryValue>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.GeometryValueList
  open func single() -> SAPOData.GeometryValue
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.GeometryValueList
  open func toArray() -> Swift.Array<SAPOData.GeometryValue>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.GeometryValue)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.GeometryValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.GeometryValue>>
}
@_inheritsConvenienceInitializers open class GeospatialValue : SAPOData.DataValue {
  override public init()
  open var srsCode: Swift.Int {
    get
    set(value)
  }
  open var srsName: Swift.String? {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class GlobalDateTime : SAPOData.DataValue {
  public static let GMT: Foundation.TimeZone
  public func utc() -> Foundation.Date
  public static func from(utc dateTime: Foundation.Date, in timeZone: Foundation.TimeZone = GMT) -> SAPOData.GlobalDateTime
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GlobalDateTime?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GlobalDateTime
  open class func compare(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Int
  open func compareTo(_ value: SAPOData.GlobalDateTime) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var date: SAPOData.LocalDate {
    get
  }
  open var day: Swift.Int {
    get
  }
  open var dayOfWeek: Swift.Int {
    get
  }
  open var dayOfYear: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.GlobalDateTime?, _ right: SAPOData.GlobalDateTime?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open var hour: Swift.Int {
    get
  }
  open func lessEqual(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Bool
  open func lessThan(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.GlobalDateTime, _ right: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func millisBetween(a: SAPOData.GlobalDateTime, b: SAPOData.GlobalDateTime) -> Swift.Int64
  open func minus(_ value: SAPOData.GlobalDateTime) -> Swift.Double
  open var minute: Swift.Int {
    get
  }
  open var month: Swift.Int {
    get
  }
  open var nano: Swift.Int {
    get
  }
  open func normalize() -> SAPOData.GlobalDateTime
  open func notEqual(_ value: SAPOData.GlobalDateTime) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.GlobalDateTime?, _ right: SAPOData.GlobalDateTime?) -> Swift.Bool
  open class func now() -> SAPOData.GlobalDateTime
  open class func of(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int, nano: Swift.Int = (0 as Int)) -> SAPOData.GlobalDateTime
  open var offset: Swift.Int {
    get
  }
  open class func parse(_ text: Swift.String) -> SAPOData.GlobalDateTime?
  open func plusDays(_ days: Swift.Int) -> SAPOData.GlobalDateTime
  open func plusHours(_ hours: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusMicros(_ micros: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusMillis(_ millis: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusMinutes(_ minutes: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusMonths(_ months: Swift.Int) -> SAPOData.GlobalDateTime
  open func plusNanos(_ nanos: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusSeconds(_ seconds: Swift.Int64) -> SAPOData.GlobalDateTime
  open func plusWeeks(_ weeks: Swift.Int) -> SAPOData.GlobalDateTime
  open func plusYears(_ years: Swift.Int) -> SAPOData.GlobalDateTime
  open var second: Swift.Int {
    get
  }
  open var time: SAPOData.LocalTime {
    get
  }
  open func toLocal() -> SAPOData.LocalDateTime
  override open func toString() -> Swift.String
  open var year: Swift.Int {
    get
  }
  open func zone(offset: Swift.Int) -> SAPOData.GlobalDateTime
  @objc deinit
}
@_inheritsConvenienceInitializers open class GlobalDateTimeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.GlobalDateTime {
    get
    set
  }
  public static let empty: SAPOData.GlobalDateTimeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.GlobalDateTime)
  open func append(contentsOf list: SAPOData.GlobalDateTimeList)
  open func appendThis(_ item: SAPOData.GlobalDateTime) -> SAPOData.GlobalDateTimeList
  open func copy() -> SAPOData.GlobalDateTimeList
  open func first() -> SAPOData.GlobalDateTime
  open class func fromArray(_ array: Swift.Array<SAPOData.GlobalDateTime>) -> SAPOData.GlobalDateTimeList
  open func includes(item: SAPOData.GlobalDateTime) -> Swift.Bool
  open func indexOf(item: SAPOData.GlobalDateTime, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.GlobalDateTime)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.GlobalDateTimeList)
  open func item(at index: Swift.Int) -> SAPOData.GlobalDateTime
  open func last() -> SAPOData.GlobalDateTime
  open func lastIndexOf(item: SAPOData.GlobalDateTime, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.GlobalDateTime>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.GlobalDateTimeList
  open func single() -> SAPOData.GlobalDateTime
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.GlobalDateTimeList
  open func toArray() -> Swift.Array<SAPOData.GlobalDateTime>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.GlobalDateTime)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.GlobalDateTime>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.GlobalDateTime>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class GroupTransform : SAPOData.TransformValue {
  final public var transformValues: SAPOData.TransformValueList?
  open func aggregate(_ items: SAPOData.AggregateValue...) -> SAPOData.GroupTransform
  open func aggregateList(items: SAPOData.AggregateValueList) -> SAPOData.GroupTransform
  open class func groupBy(_ items: SAPOData.PropertyPath...) -> SAPOData.GroupTransform
  open class func groupByList(items: SAPOData.PropertyPathList) -> SAPOData.GroupTransform
  open var groupingPaths: SAPOData.PropertyPathList {
    get
  }
  open func transform(_ items: SAPOData.TransformValue...) -> SAPOData.GroupTransform
  open func transformList(items: SAPOData.TransformValueList) -> SAPOData.GroupTransform
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class GuidValue : SAPOData.DataValue {
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.GuidValue?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.GuidValue
  open class func compare(x: SAPOData.GuidValue, y: SAPOData.GuidValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(x: SAPOData.GuidValue?, y: SAPOData.GuidValue?) -> Swift.Bool
  open class func of(_ value: SAPOData.GUID) -> SAPOData.GuidValue
  open class func ofOptional(_ value: SAPOData.GUID?) -> SAPOData.GuidValue?
  open class func parse(_ value: Swift.String) -> SAPOData.GuidValue?
  open class func random() -> SAPOData.GuidValue
  open func toBinary() -> Foundation.Data
  override open func toString() -> Swift.String
  open func toString32() -> Swift.String
  open func toString36() -> Swift.String
  open var value: SAPOData.GUID {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class GuidValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.GuidValue {
    get
    set
  }
  public static let empty: SAPOData.GuidValueList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.GuidValue)
  open func append(contentsOf list: SAPOData.GuidValueList)
  open func appendThis(_ item: SAPOData.GuidValue) -> SAPOData.GuidValueList
  open func copy() -> SAPOData.GuidValueList
  open func first() -> SAPOData.GuidValue
  open class func fromArray(_ array: Swift.Array<SAPOData.GuidValue>) -> SAPOData.GuidValueList
  open func includes(item: SAPOData.GuidValue) -> Swift.Bool
  open func indexOf(item: SAPOData.GuidValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.GuidValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.GuidValueList)
  open func item(at index: Swift.Int) -> SAPOData.GuidValue
  open func last() -> SAPOData.GuidValue
  open func lastIndexOf(item: SAPOData.GuidValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.GuidValue>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.GuidValueList
  open func single() -> SAPOData.GuidValue
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.GuidValueList
  open func toArray() -> Swift.Array<SAPOData.GuidValue>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.GuidValue)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.GuidValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.GuidValue>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class HttpDateTime : SAPOData.ObjectBase {
  open var day: Swift.Int {
    get
  }
  open var dayOfWeek: Swift.Int {
    get
  }
  open var dayOfYear: Swift.Int {
    get
  }
  open var hour: Swift.Int {
    get
  }
  open var minute: Swift.Int {
    get
  }
  open var month: Swift.Int {
    get
  }
  open class func of(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int) -> SAPOData.HttpDateTime
  open class func ofGlobal(_ value: SAPOData.GlobalDateTime) -> SAPOData.HttpDateTime
  open class func parse(_ text: Swift.String, fix: Swift.Bool = false) -> SAPOData.HttpDateTime?
  open var second: Swift.Int {
    get
  }
  open func toGlobal() -> SAPOData.GlobalDateTime
  override open func toString() -> Swift.String
  open var year: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class IntList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Int]) -> SAPOData.IntList
  public func toArray() -> [Swift.Int]
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.IntList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Int)
  open func append(contentsOf list: SAPOData.IntList)
  open func appendThis(_ item: Swift.Int) -> SAPOData.IntList
  open func copy() -> SAPOData.IntList
  open func first() -> Swift.Int
  open func includes(item: Swift.Int) -> Swift.Bool
  open func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Int)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.IntList)
  open func item(at index: Swift.Int) -> Swift.Int
  open func last() -> Swift.Int
  open func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.IntList
  open func single() -> Swift.Int
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.IntList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Int)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IntValue : SAPOData.DataValue {
  public static let zero: SAPOData.IntValue
  open class func compare(_ left: SAPOData.IntValue, _ right: SAPOData.IntValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.IntValue?, _ right: SAPOData.IntValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.IntValue
  open class func of(optional value: Swift.Int?) -> SAPOData.IntValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  open var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class IntegerList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [SAPOData.BigInteger]) -> SAPOData.IntegerList
  public func toArray() -> [SAPOData.BigInteger]
  public subscript(index: Swift.Int) -> SAPOData.BigInteger {
    get
    set
  }
  public static let empty: SAPOData.IntegerList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.BigInteger)
  open func append(contentsOf list: SAPOData.IntegerList)
  open func appendThis(_ item: SAPOData.BigInteger) -> SAPOData.IntegerList
  open func copy() -> SAPOData.IntegerList
  open func first() -> SAPOData.BigInteger
  open func includes(item: SAPOData.BigInteger) -> Swift.Bool
  open func indexOf(item: SAPOData.BigInteger, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.BigInteger)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.IntegerList)
  open func item(at index: Swift.Int) -> SAPOData.BigInteger
  open func last() -> SAPOData.BigInteger
  open func lastIndexOf(item: SAPOData.BigInteger, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.BigInteger>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.IntegerList
  open func single() -> SAPOData.BigInteger
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.IntegerList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.BigInteger)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.BigInteger>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.BigInteger>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class IntegerValue : SAPOData.DataValue {
  public static let zero: SAPOData.IntegerValue
  open class func compare(_ left: SAPOData.IntegerValue, _ right: SAPOData.IntegerValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.IntegerValue?, _ right: SAPOData.IntegerValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: SAPOData.BigInteger) -> SAPOData.IntegerValue
  open class func of(optional value: SAPOData.BigInteger?) -> SAPOData.IntegerValue?
  open class func optional(_ value: Swift.AnyObject?) -> SAPOData.BigInteger?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> SAPOData.BigInteger
  open var value: SAPOData.BigInteger {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LineStringCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PointCoordinates {
    get
    set
  }
  public static let empty: SAPOData.LineStringCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.PointCoordinates)
  open func append(contentsOf list: SAPOData.LineStringCoordinates)
  open func appendThis(_ item: SAPOData.PointCoordinates) -> SAPOData.LineStringCoordinates
  open func copy() -> SAPOData.LineStringCoordinates
  open func first() -> SAPOData.PointCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.PointCoordinates>) -> SAPOData.LineStringCoordinates
  open func includes(item: SAPOData.PointCoordinates) -> Swift.Bool
  open func indexOf(item: SAPOData.PointCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.PointCoordinates)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.LineStringCoordinates)
  open func item(at index: Swift.Int) -> SAPOData.PointCoordinates
  open func last() -> SAPOData.PointCoordinates
  open func lastIndexOf(item: SAPOData.PointCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LineStringCoordinates
  open func single() -> SAPOData.PointCoordinates
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LineStringCoordinates
  open func toArray() -> Swift.Array<SAPOData.PointCoordinates>
  open func update(at index: Swift.Int, item: SAPOData.PointCoordinates)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>
}
open class ListBase : SAPOData.DataValue {
  public init(capacity: Swift.Int)
  open var comparer: SAPOData.Comparer {
    get
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  open var equality: SAPOData.Equality {
    get
  }
  open var isEmpty: Swift.Bool {
    get
  }
  open var length: Swift.Int {
    get
  }
  open func remove(at index: Swift.Int)
  open func removeAll()
  open func removeFirst()
  open func removeLast()
  open func removeRange(start: Swift.Int, end: Swift.Int)
  open func reverse()
  open func shareWith(other: SAPOData.ListBase, replace: Swift.Bool)
  open func sort()
  open func sortWith(comparer: SAPOData.Comparer)
  open func toDynamic() -> SAPOData.ListBase?
  override open func toString() -> Swift.String
  open var untypedList: SAPOData.UntypedList {
    get
  }
  open func validate(_ value: Swift.AnyObject?) -> Swift.AnyObject?
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LocalDate : SAPOData.DataValue {
  public static let GMT: Foundation.TimeZone
  public static func from(utc date: Foundation.Date, in timeZone: Foundation.TimeZone = GMT) -> SAPOData.LocalDate
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.LocalDate?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.LocalDate
  open class func compare(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Int
  open func compareTo(_ value: SAPOData.LocalDate) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var day: Swift.Int {
    get
  }
  open var dayOfWeek: Swift.Int {
    get
  }
  open var dayOfYear: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.LocalDate?, _ right: SAPOData.LocalDate?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open func lessEqual(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Bool
  open func lessThan(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.LocalDate, _ right: SAPOData.LocalDate) -> Swift.Bool
  open func minus(_ value: SAPOData.LocalDate) -> Swift.Double
  open var month: Swift.Int {
    get
  }
  open func notEqual(_ value: SAPOData.LocalDate) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.LocalDate?, _ right: SAPOData.LocalDate?) -> Swift.Bool
  open class func now() -> SAPOData.LocalDate
  open class func of(year: Swift.Int, month: Swift.Int, day: Swift.Int) -> SAPOData.LocalDate
  open class func parse(_ text: Swift.String) -> SAPOData.LocalDate?
  open func plusDays(_ days: Swift.Int) -> SAPOData.LocalDate
  open func plusMonths(_ months: Swift.Int) -> SAPOData.LocalDate
  open func plusWeeks(_ weeks: Swift.Int) -> SAPOData.LocalDate
  open func plusYears(_ years: Swift.Int) -> SAPOData.LocalDate
  override open func toString() -> Swift.String
  open var year: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LocalDateList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LocalDate {
    get
    set
  }
  public static let empty: SAPOData.LocalDateList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.LocalDate)
  open func append(contentsOf list: SAPOData.LocalDateList)
  open func appendThis(_ item: SAPOData.LocalDate) -> SAPOData.LocalDateList
  open func copy() -> SAPOData.LocalDateList
  open func first() -> SAPOData.LocalDate
  open class func fromArray(_ array: Swift.Array<SAPOData.LocalDate>) -> SAPOData.LocalDateList
  open func includes(item: SAPOData.LocalDate) -> Swift.Bool
  open func indexOf(item: SAPOData.LocalDate, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.LocalDate)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.LocalDateList)
  open func item(at index: Swift.Int) -> SAPOData.LocalDate
  open func last() -> SAPOData.LocalDate
  open func lastIndexOf(item: SAPOData.LocalDate, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LocalDate>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LocalDateList
  open func single() -> SAPOData.LocalDate
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LocalDateList
  open func toArray() -> Swift.Array<SAPOData.LocalDate>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.LocalDate)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LocalDate>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LocalDate>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LocalDateTime : SAPOData.DataValue {
  public static let GMT: Foundation.TimeZone
  public func utc(from timeZone: Foundation.TimeZone = GMT) -> Foundation.Date
  public static func from(utc dateTime: Foundation.Date, in timeZone: Foundation.TimeZone = GMT) -> SAPOData.LocalDateTime
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.LocalDateTime?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.LocalDateTime
  open class func compare(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Int
  open func compareTo(_ value: SAPOData.LocalDateTime) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open var date: SAPOData.LocalDate {
    get
  }
  open var day: Swift.Int {
    get
  }
  open var dayOfWeek: Swift.Int {
    get
  }
  open var dayOfYear: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.LocalDateTime?, _ right: SAPOData.LocalDateTime?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open var hour: Swift.Int {
    get
  }
  open func lessEqual(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Bool
  open func lessThan(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.LocalDateTime, _ right: SAPOData.LocalDateTime) -> Swift.Bool
  open class func millisBetween(a: SAPOData.LocalDateTime, b: SAPOData.LocalDateTime) -> Swift.Int64
  open func minus(_ value: SAPOData.LocalDateTime) -> Swift.Double
  open var minute: Swift.Int {
    get
  }
  open var month: Swift.Int {
    get
  }
  open var nano: Swift.Int {
    get
  }
  open func notEqual(_ value: SAPOData.LocalDateTime) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.LocalDateTime?, _ right: SAPOData.LocalDateTime?) -> Swift.Bool
  open class func now() -> SAPOData.LocalDateTime
  open class func of(year: Swift.Int, month: Swift.Int, day: Swift.Int, hour: Swift.Int, minute: Swift.Int, second: Swift.Int, nano: Swift.Int = (0 as Int)) -> SAPOData.LocalDateTime
  open class func parse(_ text: Swift.String) -> SAPOData.LocalDateTime?
  open func plusDays(_ days: Swift.Int) -> SAPOData.LocalDateTime
  open func plusHours(_ hours: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusMicros(_ micros: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusMillis(_ millis: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusMinutes(_ minutes: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusMonths(_ months: Swift.Int) -> SAPOData.LocalDateTime
  open func plusNanos(_ nanos: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusSeconds(_ seconds: Swift.Int64) -> SAPOData.LocalDateTime
  open func plusWeeks(_ weeks: Swift.Int) -> SAPOData.LocalDateTime
  open func plusYears(_ years: Swift.Int) -> SAPOData.LocalDateTime
  open var second: Swift.Int {
    get
  }
  open var time: SAPOData.LocalTime {
    get
  }
  open func toGlobal(offset: Swift.Int = (0 as Int)) -> SAPOData.GlobalDateTime
  override open func toString() -> Swift.String
  open var year: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class LocalDateTimeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LocalDateTime {
    get
    set
  }
  public static let empty: SAPOData.LocalDateTimeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.LocalDateTime)
  open func append(contentsOf list: SAPOData.LocalDateTimeList)
  open func appendThis(_ item: SAPOData.LocalDateTime) -> SAPOData.LocalDateTimeList
  open func copy() -> SAPOData.LocalDateTimeList
  open func first() -> SAPOData.LocalDateTime
  open class func fromArray(_ array: Swift.Array<SAPOData.LocalDateTime>) -> SAPOData.LocalDateTimeList
  open func includes(item: SAPOData.LocalDateTime) -> Swift.Bool
  open func indexOf(item: SAPOData.LocalDateTime, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.LocalDateTime)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.LocalDateTimeList)
  open func item(at index: Swift.Int) -> SAPOData.LocalDateTime
  open func last() -> SAPOData.LocalDateTime
  open func lastIndexOf(item: SAPOData.LocalDateTime, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LocalDateTime>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LocalDateTimeList
  open func single() -> SAPOData.LocalDateTime
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LocalDateTimeList
  open func toArray() -> Swift.Array<SAPOData.LocalDateTime>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.LocalDateTime)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LocalDateTime>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LocalDateTime>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LocalTime : SAPOData.DataValue {
  public static let GMT: Foundation.TimeZone
  public static func from(utc time: Foundation.Date, in timeZone: Foundation.TimeZone = GMT) -> SAPOData.LocalTime
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.LocalTime?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.LocalTime
  open class func compare(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Int
  open func compareTo(_ value: SAPOData.LocalTime) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.LocalTime?, _ right: SAPOData.LocalTime?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open var hour: Swift.Int {
    get
  }
  open func lessEqual(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Bool
  open func lessThan(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.LocalTime, _ right: SAPOData.LocalTime) -> Swift.Bool
  open func minus(_ value: SAPOData.LocalTime) -> Swift.Double
  open var minute: Swift.Int {
    get
  }
  open var nano: Swift.Int {
    get
  }
  open func notEqual(_ value: SAPOData.LocalTime) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.LocalTime?, _ right: SAPOData.LocalTime?) -> Swift.Bool
  open class func now() -> SAPOData.LocalTime
  open class func of(hour: Swift.Int, minute: Swift.Int, second: Swift.Int, nano: Swift.Int = (0 as Int)) -> SAPOData.LocalTime
  open class func parse(_ text: Swift.String) -> SAPOData.LocalTime?
  open func plusHours(_ hours: Swift.Int64) -> SAPOData.LocalTime
  open func plusMicros(_ micros: Swift.Int64) -> SAPOData.LocalTime
  open func plusMillis(_ millis: Swift.Int64) -> SAPOData.LocalTime
  open func plusMinutes(_ minutes: Swift.Int64) -> SAPOData.LocalTime
  open func plusNanos(_ nanos: Swift.Int64) -> SAPOData.LocalTime
  open func plusSeconds(_ seconds: Swift.Int64) -> SAPOData.LocalTime
  open var second: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class LocalTimeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LocalTime {
    get
    set
  }
  public static let empty: SAPOData.LocalTimeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.LocalTime)
  open func append(contentsOf list: SAPOData.LocalTimeList)
  open func appendThis(_ item: SAPOData.LocalTime) -> SAPOData.LocalTimeList
  open func copy() -> SAPOData.LocalTimeList
  open func first() -> SAPOData.LocalTime
  open class func fromArray(_ array: Swift.Array<SAPOData.LocalTime>) -> SAPOData.LocalTimeList
  open func includes(item: SAPOData.LocalTime) -> Swift.Bool
  open func indexOf(item: SAPOData.LocalTime, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.LocalTime)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.LocalTimeList)
  open func item(at index: Swift.Int) -> SAPOData.LocalTime
  open func last() -> SAPOData.LocalTime
  open func lastIndexOf(item: SAPOData.LocalTime, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LocalTime>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LocalTimeList
  open func single() -> SAPOData.LocalTime
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LocalTimeList
  open func toArray() -> Swift.Array<SAPOData.LocalTime>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.LocalTime)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LocalTime>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LocalTime>>
}
@_inheritsConvenienceInitializers open class LongList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Int64]) -> SAPOData.LongList
  public func toArray() -> [Swift.Int64]
  public subscript(index: Swift.Int) -> Swift.Int64 {
    get
    set
  }
  public static let empty: SAPOData.LongList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Int64)
  open func append(contentsOf list: SAPOData.LongList)
  open func appendThis(_ item: Swift.Int64) -> SAPOData.LongList
  open func copy() -> SAPOData.LongList
  open func first() -> Swift.Int64
  open func includes(item: Swift.Int64) -> Swift.Bool
  open func indexOf(item: Swift.Int64, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Int64)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.LongList)
  open func item(at index: Swift.Int) -> Swift.Int64
  open func last() -> Swift.Int64
  open func lastIndexOf(item: Swift.Int64, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int64>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.LongList
  open func single() -> Swift.Int64
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.LongList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Int64)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int64>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int64>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class LongValue : SAPOData.DataValue {
  public static let zero: SAPOData.LongValue
  open class func compare(_ left: SAPOData.LongValue, _ right: SAPOData.LongValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.LongValue?, _ right: SAPOData.LongValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int64) -> SAPOData.LongValue
  open class func of(optional value: Swift.Int64?) -> SAPOData.LongValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int64?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int64
  open var value: Swift.Int64 {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class MapBase : SAPOData.ObjectBase {
  override public init()
  open var isEmpty: Swift.Bool {
    get
  }
  open func removeAll()
  open var size: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  open var untypedMap: SAPOData.UntypedMap {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class MetadataLock : SAPOData.ObjectBase {
  override public init()
  open var mutex: SAPOData.ReadWriteMutex {
    get
  }
  open func readLock(action: @escaping () throws -> Swift.Void) throws
  open func writeLock(action: @escaping () throws -> Swift.Void) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class MonthOfYear {
  public static let january: Swift.Int
  public static let february: Swift.Int
  public static let march: Swift.Int
  public static let april: Swift.Int
  public static let may: Swift.Int
  public static let june: Swift.Int
  public static let july: Swift.Int
  public static let august: Swift.Int
  public static let september: Swift.Int
  public static let october: Swift.Int
  public static let november: Swift.Int
  public static let december: Swift.Int
  public static func name(month: Swift.Int) -> Swift.String
  public static func name3(month: Swift.Int) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class MultiLineStringCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LineStringCoordinates {
    get
    set
  }
  public static let empty: SAPOData.MultiLineStringCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.LineStringCoordinates)
  open func append(contentsOf list: SAPOData.MultiLineStringCoordinates)
  open func appendThis(_ item: SAPOData.LineStringCoordinates) -> SAPOData.MultiLineStringCoordinates
  open func copy() -> SAPOData.MultiLineStringCoordinates
  open func first() -> SAPOData.LineStringCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.LineStringCoordinates>) -> SAPOData.MultiLineStringCoordinates
  open func includes(item: SAPOData.LineStringCoordinates) -> Swift.Bool
  open func indexOf(item: SAPOData.LineStringCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.LineStringCoordinates)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.MultiLineStringCoordinates)
  open func item(at index: Swift.Int) -> SAPOData.LineStringCoordinates
  open func last() -> SAPOData.LineStringCoordinates
  open func lastIndexOf(item: SAPOData.LineStringCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.MultiLineStringCoordinates
  open func single() -> SAPOData.LineStringCoordinates
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.MultiLineStringCoordinates
  open func toArray() -> Swift.Array<SAPOData.LineStringCoordinates>
  open func update(at index: Swift.Int, item: SAPOData.LineStringCoordinates)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>
}
@_inheritsConvenienceInitializers open class MultiPointCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PointCoordinates {
    get
    set
  }
  public static let empty: SAPOData.MultiPointCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.PointCoordinates)
  open func append(contentsOf list: SAPOData.MultiPointCoordinates)
  open func appendThis(_ item: SAPOData.PointCoordinates) -> SAPOData.MultiPointCoordinates
  open func copy() -> SAPOData.MultiPointCoordinates
  open func first() -> SAPOData.PointCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.PointCoordinates>) -> SAPOData.MultiPointCoordinates
  open func includes(item: SAPOData.PointCoordinates) -> Swift.Bool
  open func indexOf(item: SAPOData.PointCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.PointCoordinates)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.MultiPointCoordinates)
  open func item(at index: Swift.Int) -> SAPOData.PointCoordinates
  open func last() -> SAPOData.PointCoordinates
  open func lastIndexOf(item: SAPOData.PointCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.MultiPointCoordinates
  open func single() -> SAPOData.PointCoordinates
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.MultiPointCoordinates
  open func toArray() -> Swift.Array<SAPOData.PointCoordinates>
  open func update(at index: Swift.Int, item: SAPOData.PointCoordinates)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PointCoordinates>>
}
@_inheritsConvenienceInitializers open class MultiPolygonCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PolygonCoordinates {
    get
    set
  }
  public static let empty: SAPOData.MultiPolygonCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.PolygonCoordinates)
  open func append(contentsOf list: SAPOData.MultiPolygonCoordinates)
  open func appendThis(_ item: SAPOData.PolygonCoordinates) -> SAPOData.MultiPolygonCoordinates
  open func copy() -> SAPOData.MultiPolygonCoordinates
  open func first() -> SAPOData.PolygonCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.PolygonCoordinates>) -> SAPOData.MultiPolygonCoordinates
  open func includes(item: SAPOData.PolygonCoordinates) -> Swift.Bool
  open func indexOf(item: SAPOData.PolygonCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.PolygonCoordinates)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.MultiPolygonCoordinates)
  open func item(at index: Swift.Int) -> SAPOData.PolygonCoordinates
  open func last() -> SAPOData.PolygonCoordinates
  open func lastIndexOf(item: SAPOData.PolygonCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PolygonCoordinates>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.MultiPolygonCoordinates
  open func single() -> SAPOData.PolygonCoordinates
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.MultiPolygonCoordinates
  open func toArray() -> Swift.Array<SAPOData.PolygonCoordinates>
  open func update(at index: Swift.Int, item: SAPOData.PolygonCoordinates)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PolygonCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PolygonCoordinates>>
}
@_inheritsConvenienceInitializers open class NavigationProperty : SAPOData.Property {
  override public init()
  override open var containsTarget: Swift.Bool {
    get
    set(value)
  }
  override open var hasForeignKeys: Swift.Int {
    get
    set(value)
  }
  override open var onDeleteAction: Swift.Int {
    get
    set(value)
  }
  override open var partnerPath: Swift.String? {
    get
    set(value)
  }
  override open var referentialConstraints: SAPOData.StringMap {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ObjectList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> Swift.AnyObject {
    get
    set
  }
  public static let empty: SAPOData.ObjectList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.AnyObject)
  open func append(contentsOf list: SAPOData.ObjectList)
  open func appendThis(_ item: Swift.AnyObject) -> SAPOData.ObjectList
  open func copy() -> SAPOData.ObjectList
  open func first() -> Swift.AnyObject
  open class func fromArray(_ array: Swift.Array<Swift.AnyObject>) -> SAPOData.ObjectList
  open func includes(item: Swift.AnyObject) -> Swift.Bool
  open func indexOf(item: Swift.AnyObject, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.AnyObject)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ObjectList)
  open func item(at index: Swift.Int) -> Swift.AnyObject
  open func last() -> Swift.AnyObject
  open func lastIndexOf(item: Swift.AnyObject, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.AnyObject>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ObjectList
  open func single() -> Swift.AnyObject
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ObjectList
  open func toArray() -> Swift.Array<Swift.AnyObject>
  open func update(at index: Swift.Int, item: Swift.AnyObject)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.AnyObject>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.AnyObject>>
}
open class ObjectMap : SAPOData.MapBase {
  public static let empty: SAPOData.ObjectMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.ObjectMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.AnyObject
  open func sortedEntries() -> SAPOData.ObjectMap.EntryList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.AnyObject)
  open func updateThis(key: Swift.String, value: Swift.AnyObject) -> SAPOData.ObjectMap
  open func updateValue(_ value: Swift.AnyObject, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.AnyObject?
  open func values() -> SAPOData.ObjectList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: Swift.AnyObject {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.ObjectMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.ObjectMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.ObjectMap.Entry)
    open func append(contentsOf list: SAPOData.ObjectMap.EntryList)
    open func appendThis(_ item: SAPOData.ObjectMap.Entry) -> SAPOData.ObjectMap.EntryList
    open func copy() -> SAPOData.ObjectMap.EntryList
    open func first() -> SAPOData.ObjectMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.ObjectMap.Entry>) -> SAPOData.ObjectMap.EntryList
    open func includes(item: SAPOData.ObjectMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.ObjectMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.ObjectMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.ObjectMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.ObjectMap.Entry
    open func last() -> SAPOData.ObjectMap.Entry
    open func lastIndexOf(item: SAPOData.ObjectMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.ObjectMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.ObjectMap.EntryList
    open func single() -> SAPOData.ObjectMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ObjectMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.ObjectMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.ObjectMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.ObjectMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.ObjectMap.Entry>>
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class Parameter : SAPOData.ObjectBase {
  public static let modeIn: Swift.Int
  public static let modeOut: Swift.Int
  public static let modeInOut: Swift.Int
  final public var name: Swift.String
  final public var mode: Swift.Int
  final public var value: SAPOData.DataValue?
  final public var sourceLine: Swift.Int
  final public var isUnicode: Swift.Bool
  final public var minLength: Swift.Int
  final public var maxLength: Swift.Int
  final public var precision: Swift.Int
  final public var scale: Swift.Int
  final public var srid: Swift.Int
  final public var isOptional: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) throws -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open var fixedLength: Swift.Bool {
    get
  }
  override open func toString() -> Swift.String
  open var type: SAPOData.DataType {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ParameterList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.Parameter {
    get
    set
  }
  public static let empty: SAPOData.ParameterList
  override public init(capacity: Swift.Int = (4 as Int))
  open func addFormal(name: Swift.String, type: SAPOData.DataType)
  open func append(_ item: SAPOData.Parameter)
  open func append(contentsOf list: SAPOData.ParameterList)
  open func appendThis(_ item: SAPOData.Parameter) -> SAPOData.ParameterList
  open func copy() -> SAPOData.ParameterList
  open func first() -> SAPOData.Parameter
  open class func fromArray(_ array: Swift.Array<SAPOData.Parameter>) -> SAPOData.ParameterList
  open func includes(item: SAPOData.Parameter) -> Swift.Bool
  open func indexOf(item: SAPOData.Parameter, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.Parameter)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ParameterList)
  open func item(at index: Swift.Int) -> SAPOData.Parameter
  open func last() -> SAPOData.Parameter
  open func lastIndexOf(item: SAPOData.Parameter, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.Parameter>>
  open func remove(name: Swift.String) -> Swift.Bool
  open func required(name: Swift.String) -> SAPOData.DataValue?
  open func requiredList(name: Swift.String) -> SAPOData.ListBase
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ParameterList
  open func single() -> SAPOData.Parameter
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ParameterList
  open func toArray() -> Swift.Array<SAPOData.Parameter>
  open func update(at index: Swift.Int, item: SAPOData.Parameter)
  open func with(name: Swift.String, value: SAPOData.DataValue?) -> SAPOData.ParameterList
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.Parameter>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.Parameter>>
}
@_inheritsConvenienceInitializers open class PathAnnotations : SAPOData.ObjectBase {
  final public var sourceLine: Swift.Int
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open var path: SAPOData.DataPath {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class PathAnnotationsList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PathAnnotations {
    get
    set
  }
  public static let empty: SAPOData.PathAnnotationsList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.PathAnnotations)
  open func append(contentsOf list: SAPOData.PathAnnotationsList)
  open func appendThis(_ item: SAPOData.PathAnnotations) -> SAPOData.PathAnnotationsList
  open func copy() -> SAPOData.PathAnnotationsList
  open func first() -> SAPOData.PathAnnotations
  open class func fromArray(_ array: Swift.Array<SAPOData.PathAnnotations>) -> SAPOData.PathAnnotationsList
  open func includes(item: SAPOData.PathAnnotations) -> Swift.Bool
  open func indexOf(item: SAPOData.PathAnnotations, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.PathAnnotations)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.PathAnnotationsList)
  open func item(at index: Swift.Int) -> SAPOData.PathAnnotations
  open func last() -> SAPOData.PathAnnotations
  open func lastIndexOf(item: SAPOData.PathAnnotations, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotations>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PathAnnotationsList
  open func single() -> SAPOData.PathAnnotations
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PathAnnotationsList
  open func toArray() -> Swift.Array<SAPOData.PathAnnotations>
  open func update(at index: Swift.Int, item: SAPOData.PathAnnotations)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotations>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotations>>
}
open class PathAnnotationsMap : SAPOData.MapBase {
  public static let empty: SAPOData.PathAnnotationsMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.PathAnnotationsMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.PathAnnotations
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.PathAnnotations)
  open func updateThis(key: Swift.String, value: SAPOData.PathAnnotations) -> SAPOData.PathAnnotationsMap
  open func updateValue(_ value: SAPOData.PathAnnotations, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.PathAnnotations?
  open func values() -> SAPOData.PathAnnotationsList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.PathAnnotations {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.PathAnnotationsMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.PathAnnotationsMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.PathAnnotationsMap.Entry)
    open func append(contentsOf list: SAPOData.PathAnnotationsMap.EntryList)
    open func appendThis(_ item: SAPOData.PathAnnotationsMap.Entry) -> SAPOData.PathAnnotationsMap.EntryList
    open func copy() -> SAPOData.PathAnnotationsMap.EntryList
    open func first() -> SAPOData.PathAnnotationsMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.PathAnnotationsMap.Entry>) -> SAPOData.PathAnnotationsMap.EntryList
    open func includes(item: SAPOData.PathAnnotationsMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.PathAnnotationsMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.PathAnnotationsMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.PathAnnotationsMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.PathAnnotationsMap.Entry
    open func last() -> SAPOData.PathAnnotationsMap.Entry
    open func lastIndexOf(item: SAPOData.PathAnnotationsMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotationsMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.PathAnnotationsMap.EntryList
    open func single() -> SAPOData.PathAnnotationsMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PathAnnotationsMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.PathAnnotationsMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.PathAnnotationsMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotationsMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PathAnnotationsMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class PointCoordinates : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Double]) -> SAPOData.PointCoordinates
  public func toArray() -> [Swift.Double]
  public subscript(index: Swift.Int) -> Swift.Double {
    get
    set
  }
  public static let empty: SAPOData.PointCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  open var altitude: Swift.Double {
    get
    set(value)
  }
  open func append(_ item: Swift.Double)
  open func append(contentsOf list: SAPOData.PointCoordinates)
  open func appendThis(_ item: Swift.Double) -> SAPOData.PointCoordinates
  open func copy() -> SAPOData.PointCoordinates
  open func first() -> Swift.Double
  open func includes(item: Swift.Double) -> Swift.Bool
  open func indexOf(item: Swift.Double, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Double)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.PointCoordinates)
  open func item(at index: Swift.Int) -> Swift.Double
  open func last() -> Swift.Double
  open func lastIndexOf(item: Swift.Double, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open var latitude: Swift.Double {
    get
    set(value)
  }
  open var longitude: Swift.Double {
    get
    set(value)
  }
  open var m: Swift.Double {
    get
  }
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Double>>
  open var measure: Swift.Double {
    get
  }
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PointCoordinates
  open func single() -> Swift.Double
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PointCoordinates
  open func update(at index: Swift.Int, item: Swift.Double)
  open class func with(x: Swift.Double, y: Swift.Double) -> SAPOData.PointCoordinates
  open class func with(x: Swift.Double, y: Swift.Double, m: Swift.Double) -> SAPOData.PointCoordinates
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double) -> SAPOData.PointCoordinates
  open class func with(x: Swift.Double, y: Swift.Double, z: Swift.Double, m: Swift.Double) -> SAPOData.PointCoordinates
  open class func with(latitude: Swift.Double, longitude: Swift.Double) -> SAPOData.PointCoordinates
  open var x: Swift.Double {
    get
    set(value)
  }
  open var y: Swift.Double {
    get
    set(value)
  }
  open var z: Swift.Double {
    get
    set(value)
  }
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Double>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Double>>
}
@_inheritsConvenienceInitializers open class PolygonCoordinates : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.LineStringCoordinates {
    get
    set
  }
  public static let empty: SAPOData.PolygonCoordinates
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.LineStringCoordinates)
  open func append(contentsOf list: SAPOData.PolygonCoordinates)
  open func appendThis(_ item: SAPOData.LineStringCoordinates) -> SAPOData.PolygonCoordinates
  open func copy() -> SAPOData.PolygonCoordinates
  open func first() -> SAPOData.LineStringCoordinates
  open class func fromArray(_ array: Swift.Array<SAPOData.LineStringCoordinates>) -> SAPOData.PolygonCoordinates
  open func includes(item: SAPOData.LineStringCoordinates) -> Swift.Bool
  open func indexOf(item: SAPOData.LineStringCoordinates, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.LineStringCoordinates)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.PolygonCoordinates)
  open func item(at index: Swift.Int) -> SAPOData.LineStringCoordinates
  open func last() -> SAPOData.LineStringCoordinates
  open func lastIndexOf(item: SAPOData.LineStringCoordinates, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PolygonCoordinates
  open func single() -> SAPOData.LineStringCoordinates
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PolygonCoordinates
  open func toArray() -> Swift.Array<SAPOData.LineStringCoordinates>
  open func update(at index: Swift.Int, item: SAPOData.LineStringCoordinates)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.LineStringCoordinates>>
}
@_inheritsConvenienceInitializers open class Property : SAPOData.PropertyPath {
  public func path(child: SAPOData.Property) -> SAPOData.DataPath
  public static let onDeleteCascade: Swift.Int
  public static let onDeleteRestrict: Swift.Int
  public static let onDeleteSetDefault: Swift.Int
  public static let onDeleteSetNull: Swift.Int
  public static let hasNoForeignKeys: Swift.Int
  public static let hasForeignKeysInSource: Swift.Int
  public static let hasForeignKeysInTarget: Swift.Int
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  final public var id: Swift.Int
  final public var name: Swift.String
  final public var owningType: Swift.String
  final public var sourceLine: Swift.Int
  final public var customPath: SAPOData.CustomPath?
  final public var column: Swift.String?
  final public var columnType: Swift.String?
  final public var systemFlags: Swift.Int
  final public var isKey: Swift.Bool
  final public var isForeignKey: Swift.Bool
  final public var isExtension: Swift.Bool
  final public var isOptimistic: Swift.Bool
  final public var isUnicode: Swift.Bool
  final public var minLength: Swift.Int
  final public var maxLength: Swift.Int
  final public var precision: Swift.Int
  final public var scale: Swift.Int
  final public var srid: Swift.Int
  final public var defaultValue: SAPOData.DataValue?
  final public var isOptional: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open func basicList(from source: SAPOData.StructureBase) -> SAPOData.DataValueList
  open func binaryValue(from source: SAPOData.StructureBase) -> Foundation.Data
  open func booleanValue(from source: SAPOData.StructureBase) -> Swift.Bool
  open func byteValue(from source: SAPOData.StructureBase) -> Swift.Int
  open func complexList(from source: SAPOData.StructureBase) -> SAPOData.ComplexValueList
  open var complexType: SAPOData.ComplexType {
    get
  }
  open func complexValue(from source: SAPOData.StructureBase) -> SAPOData.ComplexValue
  open var containsTarget: Swift.Bool {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  open func dataValue(from source: SAPOData.StructureBase) -> SAPOData.DataValue?
  open func decimalValue(from source: SAPOData.StructureBase) -> SAPOData.BigDecimal
  open func doubleValue(from source: SAPOData.StructureBase) -> Swift.Double
  open func entityList(from source: SAPOData.StructureBase) -> SAPOData.EntityValueList
  open var entityType: SAPOData.EntityType {
    get
  }
  open func entityValue(from source: SAPOData.StructureBase) -> SAPOData.EntityValue
  open var enumType: SAPOData.EnumType {
    get
  }
  open func enumValue(from source: SAPOData.StructureBase) -> SAPOData.EnumValue
  open var fixedLength: Swift.Bool {
    get
  }
  open func floatValue(from source: SAPOData.StructureBase) -> Swift.Float
  open func guidValue(from source: SAPOData.StructureBase) -> SAPOData.GuidValue
  open var hasForeignKeys: Swift.Int {
    get
    set(value)
  }
  open func intValue(from source: SAPOData.StructureBase) -> Swift.Int
  open func integerValue(from source: SAPOData.StructureBase) -> SAPOData.BigInteger
  open var isCollection: Swift.Bool {
    get
  }
  open var isImmutable: Swift.Bool {
    get
    set(value)
  }
  open var isNavigation: Swift.Bool {
    get
  }
  open var isPersistent: Swift.Bool {
    get
  }
  open var isStream: Swift.Bool {
    get
  }
  open var isStructural: Swift.Bool {
    get
  }
  open var itemComplexType: SAPOData.ComplexType {
    get
  }
  open var itemEntityType: SAPOData.EntityType {
    get
  }
  open func longValue(from source: SAPOData.StructureBase) -> Swift.Int64
  open var onDeleteAction: Swift.Int {
    get
    set(value)
  }
  open func optionalBinary(from source: SAPOData.StructureBase) -> Foundation.Data?
  open func optionalBoolean(from source: SAPOData.StructureBase) -> Swift.Bool?
  open func optionalByte(from source: SAPOData.StructureBase) -> Swift.Int?
  open func optionalComplex(from source: SAPOData.StructureBase) -> SAPOData.ComplexValue?
  open func optionalDecimal(from source: SAPOData.StructureBase) -> SAPOData.BigDecimal?
  open func optionalDouble(from source: SAPOData.StructureBase) -> Swift.Double?
  open func optionalEntity(from source: SAPOData.StructureBase) -> SAPOData.EntityValue?
  open func optionalEnum(from source: SAPOData.StructureBase) -> SAPOData.EnumValue?
  open func optionalFloat(from source: SAPOData.StructureBase) -> Swift.Float?
  open func optionalGuid(from source: SAPOData.StructureBase) -> SAPOData.GuidValue?
  open func optionalInt(from source: SAPOData.StructureBase) -> Swift.Int?
  open func optionalInteger(from source: SAPOData.StructureBase) -> SAPOData.BigInteger?
  open func optionalLong(from source: SAPOData.StructureBase) -> Swift.Int64?
  open func optionalShort(from source: SAPOData.StructureBase) -> Swift.Int?
  open func optionalString(from source: SAPOData.StructureBase) -> Swift.String?
  open func optionalUnsignedByte(from source: SAPOData.StructureBase) -> Swift.Int?
  open func optionalValue(from source: SAPOData.StructureBase) -> SAPOData.DataValue?
  open var partnerPath: Swift.String? {
    get
    set(value)
  }
  open func path(_ child: SAPOData.Property) -> SAPOData.DataPath
  open var qualifiedName: Swift.String {
    get
  }
  open var referentialConstraints: SAPOData.StringMap {
    get
    set(value)
  }
  open func requiredValue(from source: SAPOData.StructureBase) -> SAPOData.DataValue?
  open func setBasicList(in target: SAPOData.StructureBase, to value: SAPOData.DataValueList)
  open func setBinaryValue(in target: SAPOData.StructureBase, to value: Foundation.Data)
  open func setBinaryValue(in target: SAPOData.StructureBase, to value: Foundation.Data?)
  open func setBooleanValue(in target: SAPOData.StructureBase, to value: Swift.Bool)
  open func setBooleanValue(in target: SAPOData.StructureBase, to value: Swift.Bool?)
  open func setByteValue(in target: SAPOData.StructureBase, to value: Swift.Int)
  open func setByteValue(in target: SAPOData.StructureBase, to value: Swift.Int?)
  open func setComplexList(in target: SAPOData.StructureBase, to value: SAPOData.ComplexValueList)
  open func setComplexValue(in target: SAPOData.StructureBase, to value: SAPOData.ComplexValue)
  open func setComplexValue(in target: SAPOData.StructureBase, to value: SAPOData.ComplexValue?)
  open func setDataValue(in target: SAPOData.StructureBase, to value: SAPOData.DataValue?)
  open func setDecimalValue(in target: SAPOData.StructureBase, to value: SAPOData.BigDecimal)
  open func setDecimalValue(in target: SAPOData.StructureBase, to value: SAPOData.BigDecimal?)
  open func setDoubleValue(in target: SAPOData.StructureBase, to value: Swift.Double)
  open func setDoubleValue(in target: SAPOData.StructureBase, to value: Swift.Double?)
  open func setEntityList(in target: SAPOData.StructureBase, to value: SAPOData.EntityValueList)
  open func setEntityValue(in target: SAPOData.StructureBase, to value: SAPOData.EntityValue)
  open func setEntityValue(in target: SAPOData.StructureBase, to value: SAPOData.EntityValue?)
  open func setEnumValue(in target: SAPOData.StructureBase, to value: SAPOData.EnumValue)
  open func setEnumValue(in target: SAPOData.StructureBase, to value: SAPOData.EnumValue?)
  open func setFloatValue(in target: SAPOData.StructureBase, to value: Swift.Float)
  open func setFloatValue(in target: SAPOData.StructureBase, to value: Swift.Float?)
  open func setGuidValue(in target: SAPOData.StructureBase, to value: SAPOData.GuidValue)
  open func setGuidValue(in target: SAPOData.StructureBase, to value: SAPOData.GuidValue?)
  open func setIntValue(in target: SAPOData.StructureBase, to value: Swift.Int)
  open func setIntValue(in target: SAPOData.StructureBase, to value: Swift.Int?)
  open func setIntegerValue(in target: SAPOData.StructureBase, to value: SAPOData.BigInteger)
  open func setIntegerValue(in target: SAPOData.StructureBase, to value: SAPOData.BigInteger?)
  open func setLongValue(in target: SAPOData.StructureBase, to value: Swift.Int64)
  open func setLongValue(in target: SAPOData.StructureBase, to value: Swift.Int64?)
  open func setShortValue(in target: SAPOData.StructureBase, to value: Swift.Int)
  open func setShortValue(in target: SAPOData.StructureBase, to value: Swift.Int?)
  open func setStringValue(in target: SAPOData.StructureBase, to value: Swift.String)
  open func setStringValue(in target: SAPOData.StructureBase, to value: Swift.String?)
  open func setUnsignedByteValue(in target: SAPOData.StructureBase, to value: Swift.Int)
  open func setUnsignedByteValue(in target: SAPOData.StructureBase, to value: Swift.Int?)
  open func shortValue(from source: SAPOData.StructureBase) -> Swift.Int
  open func streamLink(from source: SAPOData.StructureBase) -> SAPOData.StreamLink
  open func stringValue(from source: SAPOData.StructureBase) -> Swift.String
  open var structureType: SAPOData.StructureType {
    get
  }
  override open func toPath() -> SAPOData.DataPath
  override open func toString() -> Swift.String
  open var type: SAPOData.DataType {
    get
    set(value)
  }
  open func unsignedByteValue(from source: SAPOData.StructureBase) -> Swift.Int
  override open func unwrap() -> SAPOData.DataValue
  open func urlString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class PropertyList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.Property {
    get
    set
  }
  public static let empty: SAPOData.PropertyList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.Property)
  open func append(contentsOf list: SAPOData.PropertyList)
  open func appendThis(_ item: SAPOData.Property) -> SAPOData.PropertyList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.PropertyList
  override open var equality: SAPOData.Equality {
    get
  }
  open func first() -> SAPOData.Property
  open class func fromArray(_ array: Swift.Array<SAPOData.Property>) -> SAPOData.PropertyList
  open func includes(item: SAPOData.Property) -> Swift.Bool
  open func indexOf(item: SAPOData.Property, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.Property)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.PropertyList)
  open func item(at index: Swift.Int) -> SAPOData.Property
  open func last() -> SAPOData.Property
  open func lastIndexOf(item: SAPOData.Property, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.Property>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PropertyList
  open func single() -> SAPOData.Property
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PropertyList
  open func toArray() -> Swift.Array<SAPOData.Property>
  open func update(at index: Swift.Int, item: SAPOData.Property)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.Property>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.Property>>
}
open class PropertyMap : SAPOData.MapBase {
  public static let empty: SAPOData.PropertyMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.Property) throws
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.PropertyMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.Property
  open func sortedEntries() throws -> SAPOData.PropertyMap.EntryList
  open func sortedKeys() throws -> SAPOData.StringList
  open func sortedValues() throws -> SAPOData.PropertyList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.Property)
  open func updateThis(key: Swift.String, value: SAPOData.Property) -> SAPOData.PropertyMap
  open func updateValue(_ value: SAPOData.Property, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.Property?
  open func values() -> SAPOData.PropertyList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.Property {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.PropertyMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.PropertyMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.PropertyMap.Entry)
    open func append(contentsOf list: SAPOData.PropertyMap.EntryList)
    open func appendThis(_ item: SAPOData.PropertyMap.Entry) -> SAPOData.PropertyMap.EntryList
    open func copy() -> SAPOData.PropertyMap.EntryList
    open func first() -> SAPOData.PropertyMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.PropertyMap.Entry>) -> SAPOData.PropertyMap.EntryList
    open func includes(item: SAPOData.PropertyMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.PropertyMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.PropertyMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.PropertyMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.PropertyMap.Entry
    open func last() -> SAPOData.PropertyMap.Entry
    open func lastIndexOf(item: SAPOData.PropertyMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PropertyMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.PropertyMap.EntryList
    open func single() -> SAPOData.PropertyMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PropertyMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.PropertyMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.PropertyMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class PropertyPath : SAPOData.QueryValue {
  override public init()
  open func toPath() -> SAPOData.DataPath
  @objc deinit
}
@_inheritsConvenienceInitializers open class PropertyPathList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.PropertyPath {
    get
    set
  }
  public static let empty: SAPOData.PropertyPathList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.PropertyPath)
  open func append(contentsOf list: SAPOData.PropertyPathList)
  open func appendThis(_ item: SAPOData.PropertyPath) -> SAPOData.PropertyPathList
  open func copy() -> SAPOData.PropertyPathList
  open func first() -> SAPOData.PropertyPath
  open class func fromArray(_ array: Swift.Array<SAPOData.PropertyPath>) -> SAPOData.PropertyPathList
  open func includes(item: SAPOData.PropertyPath) -> Swift.Bool
  open func indexOf(item: SAPOData.PropertyPath, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.PropertyPath)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.PropertyPathList)
  open func item(at index: Swift.Int) -> SAPOData.PropertyPath
  open func last() -> SAPOData.PropertyPath
  open func lastIndexOf(item: SAPOData.PropertyPath, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPath>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.PropertyPathList
  open func single() -> SAPOData.PropertyPath
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.PropertyPathList
  open func toArray() -> Swift.Array<SAPOData.PropertyPath>
  open func update(at index: Swift.Int, item: SAPOData.PropertyPath)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPath>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.PropertyPath>>
}
@_inheritsConvenienceInitializers open class QueryAlias : SAPOData.DataValue {
  final public var alias: Swift.String
  override public init()
  override open var dataType: SAPOData.DataType {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryFilter : SAPOData.DataValue {
  override public init()
  open func and(_ filter: SAPOData.DataValue) -> SAPOData.QueryFilter
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func from(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func not() -> SAPOData.QueryFilter
  open func or(_ filter: SAPOData.DataValue) -> SAPOData.QueryFilter
  override open func toString() -> Swift.String
  open var value: SAPOData.DataValue {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryFunction : SAPOData.ObjectBase {
  final public var code: Swift.Int
  final public var name: Swift.String
  final public var minArity: Swift.Int
  final public var maxArity: Swift.Int
  public static let functionMap: SAPOData.QueryFunctionMap
  override public init()
  open class func asType(_ type: SAPOData.DataType, value: SAPOData.DataValue? = nil) -> SAPOData.QueryValue
  open class func ceiling(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func concat(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func contains(_ value: SAPOData.DataValue, searchValue: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func custom(name: Swift.String, arguments: SAPOData.DataValueList) -> SAPOData.QueryValue
  open class func date(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func day(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func endsWith(_ value: SAPOData.DataValue, suffix: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func floor(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func forCode(_ code: Swift.Int) -> SAPOData.QueryFunction
  open class func forName(_ name: Swift.String) throws -> SAPOData.QueryFunction
  open class func fractionalSeconds(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func geoDistance(from: SAPOData.DataValue, to: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func geoIntersects(point: SAPOData.DataValue, polygon: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func geoLength(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func hour(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func indexOf(_ value: SAPOData.DataValue, searchValue: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func isType(_ type: SAPOData.DataType, value: SAPOData.DataValue? = nil) -> SAPOData.QueryFilter
  open class func length(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func maxDateTime() -> SAPOData.QueryValue
  open class func minDateTime() -> SAPOData.QueryValue
  open class func minute(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func month(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func now() -> SAPOData.QueryValue
  open class func round(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func second(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func startsWith(_ value: SAPOData.DataValue, prefix: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func substring(_ value: SAPOData.DataValue, start: SAPOData.DataValue, length: SAPOData.DataValue? = nil) -> SAPOData.QueryValue
  open class func time(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func toLower(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  override open func toString() -> Swift.String
  open class func toUpper(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func totalOffsetMinutes(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func trim(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func year(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  @objc deinit
}
open class QueryFunctionCall : SAPOData.DataValue {
  public init(queryFunction: SAPOData.QueryFunction, callArguments: SAPOData.DataValueList)
  open var callArguments: SAPOData.DataValueList {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  open var queryFunction: SAPOData.QueryFunction {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class QueryFunctionCode {
  public static let contains: Swift.Int
  public static let endsWith: Swift.Int
  public static let startsWith: Swift.Int
  public static let length: Swift.Int
  public static let indexOf: Swift.Int
  public static let substring: Swift.Int
  public static let toLower: Swift.Int
  public static let toUpper: Swift.Int
  public static let trim: Swift.Int
  public static let concat: Swift.Int
  public static let year: Swift.Int
  public static let month: Swift.Int
  public static let day: Swift.Int
  public static let hour: Swift.Int
  public static let minute: Swift.Int
  public static let second: Swift.Int
  public static let fractionalSeconds: Swift.Int
  public static let date: Swift.Int
  public static let time: Swift.Int
  public static let totalOffsetMinutes: Swift.Int
  public static let now: Swift.Int
  public static let minDateTime: Swift.Int
  public static let maxDateTime: Swift.Int
  public static let round: Swift.Int
  public static let floor: Swift.Int
  public static let ceiling: Swift.Int
  public static let cast: Swift.Int
  public static let isof: Swift.Int
  public static let geoDistance: Swift.Int
  public static let geoIntersects: Swift.Int
  public static let geoLength: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryFunctionList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.QueryFunction {
    get
    set
  }
  public static let empty: SAPOData.QueryFunctionList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.QueryFunction)
  open func append(contentsOf list: SAPOData.QueryFunctionList)
  open func appendThis(_ item: SAPOData.QueryFunction) -> SAPOData.QueryFunctionList
  open func copy() -> SAPOData.QueryFunctionList
  open func first() -> SAPOData.QueryFunction
  open class func fromArray(_ array: Swift.Array<SAPOData.QueryFunction>) -> SAPOData.QueryFunctionList
  open func includes(item: SAPOData.QueryFunction) -> Swift.Bool
  open func indexOf(item: SAPOData.QueryFunction, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.QueryFunction)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.QueryFunctionList)
  open func item(at index: Swift.Int) -> SAPOData.QueryFunction
  open func last() -> SAPOData.QueryFunction
  open func lastIndexOf(item: SAPOData.QueryFunction, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunction>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.QueryFunctionList
  open func single() -> SAPOData.QueryFunction
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.QueryFunctionList
  open func toArray() -> Swift.Array<SAPOData.QueryFunction>
  open func update(at index: Swift.Int, item: SAPOData.QueryFunction)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunction>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunction>>
}
open class QueryFunctionMap : SAPOData.MapBase {
  public static let empty: SAPOData.QueryFunctionMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.QueryFunctionMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.QueryFunction
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.QueryFunction)
  open func updateThis(key: Swift.String, value: SAPOData.QueryFunction) -> SAPOData.QueryFunctionMap
  open func updateValue(_ value: SAPOData.QueryFunction, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.QueryFunction?
  open func values() -> SAPOData.QueryFunctionList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.QueryFunction {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.QueryFunctionMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.QueryFunctionMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.QueryFunctionMap.Entry)
    open func append(contentsOf list: SAPOData.QueryFunctionMap.EntryList)
    open func appendThis(_ item: SAPOData.QueryFunctionMap.Entry) -> SAPOData.QueryFunctionMap.EntryList
    open func copy() -> SAPOData.QueryFunctionMap.EntryList
    open func first() -> SAPOData.QueryFunctionMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.QueryFunctionMap.Entry>) -> SAPOData.QueryFunctionMap.EntryList
    open func includes(item: SAPOData.QueryFunctionMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.QueryFunctionMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.QueryFunctionMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.QueryFunctionMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.QueryFunctionMap.Entry
    open func last() -> SAPOData.QueryFunctionMap.Entry
    open func lastIndexOf(item: SAPOData.QueryFunctionMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunctionMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.QueryFunctionMap.EntryList
    open func single() -> SAPOData.QueryFunctionMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.QueryFunctionMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.QueryFunctionMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.QueryFunctionMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunctionMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.QueryFunctionMap.Entry>>
  }
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class QueryInternal {
  public static func applyFunction(call: SAPOData.QueryFunctionCall, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
  public static func applyOperator(call: SAPOData.QueryOperatorCall, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
  public static func evaluate(_ value: SAPOData.DataValue?, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
  public static func evaluatePath(_ path: SAPOData.DataPath, context: SAPOData.StructureBase?) throws -> SAPOData.DataValue?
  public static func evaluateString(_ value: SAPOData.DataValue?, context: SAPOData.StructureBase?) throws -> SAPOData.StringValue?
  public static func immutableFilter(entityType: SAPOData.EntityType, queryFilter: SAPOData.QueryFilter?) -> Swift.Bool
  public static func matchFilter(_ filter: SAPOData.QueryFilter?, context: SAPOData.StructureBase) throws -> Swift.Bool
  public static func referenced(properties: SAPOData.StringSet, functions: SAPOData.StringSet?, operators: SAPOData.StringSet?, value: SAPOData.DataValue?)
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryOperator : SAPOData.ObjectBase {
  public static let operatorMap: SAPOData.QueryOperatorMap
  override public init()
  open class func add(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func all(_ value: SAPOData.DataValue, lambda: SAPOData.DataPath, match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  open class func and(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func any(_ value: SAPOData.DataValue, lambda: SAPOData.DataPath, match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  open var arity: Swift.Int {
    get
  }
  open var code: Swift.Int {
    get
  }
  open class func divide(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func equal(_ left: SAPOData.DataValue?, _ right: SAPOData.DataValue?) -> SAPOData.QueryFilter
  open class func forCode(_ code: Swift.Int) -> SAPOData.QueryOperator
  open class func forName(_ name: Swift.String) throws -> SAPOData.QueryOperator
  open class func greaterEqual(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func greaterThan(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func has(_ value: SAPOData.DataValue, _ flags: SAPOData.EnumValue) -> SAPOData.QueryFilter
  open class func lessEqual(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func lessThan(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func modulo(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func multiply(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  open var name: Swift.String {
    get
  }
  open class func negate(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open class func not(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open class func notEqual(_ left: SAPOData.DataValue?, _ right: SAPOData.DataValue?) -> SAPOData.QueryFilter
  open class func or(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryFilter
  open var priority: Swift.Int {
    get
  }
  open class func subtract(_ left: SAPOData.DataValue, _ right: SAPOData.DataValue) -> SAPOData.QueryValue
  override open func toString() -> Swift.String
  @objc deinit
}
open class QueryOperatorCall : SAPOData.DataValue {
  public init(queryOperator: SAPOData.QueryOperator, callArguments: SAPOData.DataValueList)
  open var callArguments: SAPOData.DataValueList {
    get
    set(value)
  }
  override open var dataType: SAPOData.DataType {
    get
  }
  open var queryOperator: SAPOData.QueryOperator {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class QueryOperatorCode {
  public static let equal: Swift.Int
  public static let notEqual: Swift.Int
  public static let greaterThan: Swift.Int
  public static let greaterEqual: Swift.Int
  public static let lessThan: Swift.Int
  public static let lessEqual: Swift.Int
  public static let and: Swift.Int
  public static let or: Swift.Int
  public static let not: Swift.Int
  public static let negate: Swift.Int
  public static let add: Swift.Int
  public static let subtract: Swift.Int
  public static let multiply: Swift.Int
  public static let divide: Swift.Int
  public static let modulo: Swift.Int
  public static let any: Swift.Int
  public static let all: Swift.Int
  public static let has: Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryOperatorList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.QueryOperator {
    get
    set
  }
  public static let empty: SAPOData.QueryOperatorList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.QueryOperator)
  open func append(contentsOf list: SAPOData.QueryOperatorList)
  open func appendThis(_ item: SAPOData.QueryOperator) -> SAPOData.QueryOperatorList
  open func copy() -> SAPOData.QueryOperatorList
  open func first() -> SAPOData.QueryOperator
  open class func fromArray(_ array: Swift.Array<SAPOData.QueryOperator>) -> SAPOData.QueryOperatorList
  open func includes(item: SAPOData.QueryOperator) -> Swift.Bool
  open func indexOf(item: SAPOData.QueryOperator, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.QueryOperator)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.QueryOperatorList)
  open func item(at index: Swift.Int) -> SAPOData.QueryOperator
  open func last() -> SAPOData.QueryOperator
  open func lastIndexOf(item: SAPOData.QueryOperator, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperator>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.QueryOperatorList
  open func single() -> SAPOData.QueryOperator
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.QueryOperatorList
  open func toArray() -> Swift.Array<SAPOData.QueryOperator>
  open func update(at index: Swift.Int, item: SAPOData.QueryOperator)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperator>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperator>>
}
open class QueryOperatorMap : SAPOData.MapBase {
  public static let empty: SAPOData.QueryOperatorMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.QueryOperatorMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.QueryOperator
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.QueryOperator)
  open func updateThis(key: Swift.String, value: SAPOData.QueryOperator) -> SAPOData.QueryOperatorMap
  open func updateValue(_ value: SAPOData.QueryOperator, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.QueryOperator?
  open func values() -> SAPOData.QueryOperatorList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.QueryOperator {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.QueryOperatorMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.QueryOperatorMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.QueryOperatorMap.Entry)
    open func append(contentsOf list: SAPOData.QueryOperatorMap.EntryList)
    open func appendThis(_ item: SAPOData.QueryOperatorMap.Entry) -> SAPOData.QueryOperatorMap.EntryList
    open func copy() -> SAPOData.QueryOperatorMap.EntryList
    open func first() -> SAPOData.QueryOperatorMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.QueryOperatorMap.Entry>) -> SAPOData.QueryOperatorMap.EntryList
    open func includes(item: SAPOData.QueryOperatorMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.QueryOperatorMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.QueryOperatorMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.QueryOperatorMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.QueryOperatorMap.Entry
    open func last() -> SAPOData.QueryOperatorMap.Entry
    open func lastIndexOf(item: SAPOData.QueryOperatorMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperatorMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.QueryOperatorMap.EntryList
    open func single() -> SAPOData.QueryOperatorMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.QueryOperatorMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.QueryOperatorMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.QueryOperatorMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperatorMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.QueryOperatorMap.Entry>>
  }
  @objc deinit
  override public init()
}
open class QueryResult : SAPOData.ObjectBase {
  public init(query: SAPOData.DataQuery, result: SAPOData.DataValue?, status: Swift.Int = (200 as Int), error: SAPOData.DataServiceError? = nil)
  open func basicList() throws -> SAPOData.DataValueList
  open func check(fixOptions: Swift.Int = (0 as Int)) throws
  open func complexList() throws -> SAPOData.ComplexValueList
  open func count() throws -> Swift.Int64
  open func deltaLink() throws -> Swift.String?
  open func deltaStream() throws -> SAPOData.DeltaStream
  open func entityList() throws -> SAPOData.EntityValueList
  open func entityStream() throws -> SAPOData.EntityStream
  open var error: SAPOData.DataServiceError? {
    get
  }
  open func inlineCount() throws -> Swift.Int64
  open func nextLink() throws -> Swift.String?
  open func nextQuery() throws -> SAPOData.DataQuery
  open func optionalBasic() throws -> SAPOData.DataValue?
  open func optionalComplex() throws -> SAPOData.ComplexValue?
  open func optionalEntity() throws -> SAPOData.EntityValue?
  open var query: SAPOData.DataQuery {
    get
  }
  open func requiredBasic() throws -> SAPOData.DataValue
  open func requiredComplex() throws -> SAPOData.ComplexValue
  open func requiredEntity() throws -> SAPOData.EntityValue
  open var result: SAPOData.DataValue? {
    get
  }
  open var status: Swift.Int {
    get
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class QueryResultError : SAPOData.DataError {
  override public init()
  open class func withCause(_ cause: Swift.Error?) -> SAPOData.QueryResultError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.QueryResultError
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryType : SAPOData.DataValue {
  override public init()
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func of(type: SAPOData.DataType) throws -> SAPOData.QueryType
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class QueryValue : SAPOData.DataValue {
  public func concat(_ text: Swift.String) -> SAPOData.QueryValue
  public func contains(_ text: Swift.String) -> SAPOData.QueryFilter
  public func endsWith(_ suffix: Swift.String) -> SAPOData.QueryFilter
  public func indexOf(_ text: Swift.String) -> SAPOData.QueryValue
  public func startsWith(_ prefix: Swift.String) -> SAPOData.QueryFilter
  public func substring(_ start: Swift.Int, _ length: Swift.Int? = nil) -> SAPOData.QueryValue
  public func equal(_ value: Swift.Bool) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func equal(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func equal(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func equal(_ value: Swift.String) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Bool) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func notEqual(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func notEqual(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func notEqual(_ value: Swift.String) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func lessThan(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func lessThan(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func lessThan(_ value: Swift.String) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func lessEqual(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func lessEqual(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func lessEqual(_ value: Swift.String) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func greaterThan(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func greaterThan(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func greaterThan(_ value: Swift.String) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.Int) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.Int64) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: SAPOData.BigInteger) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: SAPOData.BigDecimal) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.Float) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.Double) -> SAPOData.QueryFilter
  public func greaterEqual(_ value: Swift.String) -> SAPOData.QueryFilter
  public func add(_ value: Swift.Int) -> SAPOData.QueryValue
  public func add(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func add(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func add(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func add(_ value: Swift.Float) -> SAPOData.QueryValue
  public func add(_ value: Swift.Double) -> SAPOData.QueryValue
  public func subtract(_ value: Swift.Int) -> SAPOData.QueryValue
  public func subtract(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func subtract(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func subtract(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func subtract(_ value: Swift.Float) -> SAPOData.QueryValue
  public func subtract(_ value: Swift.Double) -> SAPOData.QueryValue
  public func multiply(_ value: Swift.Int) -> SAPOData.QueryValue
  public func multiply(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func multiply(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func multiply(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func multiply(_ value: Swift.Float) -> SAPOData.QueryValue
  public func multiply(_ value: Swift.Double) -> SAPOData.QueryValue
  public func divide(_ value: Swift.Int) -> SAPOData.QueryValue
  public func divide(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func divide(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func divide(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func divide(_ value: Swift.Float) -> SAPOData.QueryValue
  public func divide(_ value: Swift.Double) -> SAPOData.QueryValue
  public func modulo(_ value: Swift.Int) -> SAPOData.QueryValue
  public func modulo(_ value: Swift.Int64) -> SAPOData.QueryValue
  public func modulo(_ value: SAPOData.BigInteger) -> SAPOData.QueryValue
  public func modulo(_ value: SAPOData.BigDecimal) -> SAPOData.QueryValue
  public func modulo(_ value: Swift.Float) -> SAPOData.QueryValue
  public func modulo(_ value: Swift.Double) -> SAPOData.QueryValue
  @available(swift, deprecated: 4.0, message: "Use the variant with unlabelld parameters.")
  public func any(lambda: SAPOData.DataPath, match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  @available(swift, deprecated: 4.0, message: "Use the variant with unlabeled parameters.")
  public func all(lambda: SAPOData.DataPath, match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  override public init()
  open func add(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func all(_ lambda: SAPOData.DataPath, _ match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  open func any(_ lambda: SAPOData.DataPath, _ match: SAPOData.QueryFilter) -> SAPOData.QueryFilter
  open func asType(_ type: SAPOData.DataType) -> SAPOData.QueryValue
  open func average(as alias: Swift.String) -> SAPOData.AggregateValue
  open func ceiling() -> SAPOData.QueryValue
  open func concat(_ text: SAPOData.DataValue) -> SAPOData.QueryValue
  open func contains(_ text: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func countDistinct(as alias: Swift.String) -> SAPOData.AggregateValue
  override open var dataType: SAPOData.DataType {
    get
  }
  open func date() -> SAPOData.QueryValue
  open func day() -> SAPOData.QueryValue
  open func divide(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func endsWith(_ suffix: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func equal(_ value: SAPOData.DataValue?) -> SAPOData.QueryFilter
  open func floor() -> SAPOData.QueryValue
  open func fractionalSeconds() -> SAPOData.QueryValue
  open func geoDistance(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func geoIntersects(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func geoLength() -> SAPOData.QueryValue
  open func greaterEqual(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func greaterThan(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func has(_ flag: Swift.Int) -> SAPOData.QueryFilter
  open func hour() -> SAPOData.QueryValue
  open func indexOf(_ text: SAPOData.DataValue) -> SAPOData.QueryValue
  open func isNull() -> SAPOData.QueryFilter
  open func isType(_ type: SAPOData.DataType) -> SAPOData.QueryFilter
  open func length() -> SAPOData.QueryValue
  open func lessEqual(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func lessThan(_ value: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func maximum(as alias: Swift.String) -> SAPOData.AggregateValue
  open func minimum(as alias: Swift.String) -> SAPOData.AggregateValue
  open func minute() -> SAPOData.QueryValue
  open func modulo(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func month() -> SAPOData.QueryValue
  open func multiply(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func negate() -> SAPOData.QueryValue
  open func notEqual(_ value: SAPOData.DataValue?) -> SAPOData.QueryFilter
  open func notNull() -> SAPOData.QueryFilter
  open func round() -> SAPOData.QueryValue
  open func second() -> SAPOData.QueryValue
  open func startsWith(_ prefix: SAPOData.DataValue) -> SAPOData.QueryFilter
  open func substring(_ start: SAPOData.DataValue, _ length: SAPOData.DataValue? = nil) -> SAPOData.QueryValue
  open func subtract(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func sum(as alias: Swift.String) -> SAPOData.AggregateValue
  open func time() -> SAPOData.QueryValue
  open func toLower() -> SAPOData.QueryValue
  override open func toString() -> Swift.String
  open func toUpper() -> SAPOData.QueryValue
  open func totalOffsetMinutes() -> SAPOData.QueryValue
  open func trim() -> SAPOData.QueryValue
  open func unwrap() -> SAPOData.DataValue
  open class func wrap(_ value: SAPOData.DataValue) -> SAPOData.QueryValue
  open func year() -> SAPOData.QueryValue
  @objc deinit
}
@_inheritsConvenienceInitializers open class RequestCancelledError : SAPOData.DataError {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class RequestOptions : SAPOData.ObjectBase {
  public static let none: SAPOData.RequestOptions
  override public init()
  open var cancelToken: SAPOData.CancelToken? {
    get
    set(value)
  }
  open func cancelable(_ token: SAPOData.CancelToken) -> SAPOData.RequestOptions
  open func copy() -> SAPOData.RequestOptions
  open class func noneIfNull(options: SAPOData.RequestOptions?) -> SAPOData.RequestOptions
  open var preferNoContent: Swift.Bool {
    get
    set(value)
  }
  open var repeatabilityFirstSent: SAPOData.GlobalDateTime? {
    get
    set(value)
  }
  open var repeatabilityRequestID: SAPOData.GuidValue? {
    get
    set(value)
  }
  open func repeatable(requestID: SAPOData.GuidValue, firstSent: SAPOData.GlobalDateTime) -> SAPOData.RequestOptions
  open var sendEmptyUpdate: Swift.Bool {
    get
    set(value)
  }
  open var updateMode: SAPOData.UpdateMode {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SelectItem : SAPOData.ObjectBase {
  public static func of(property: SAPOData.Property) -> SAPOData.SelectItem
  final public var isHidden: Swift.Bool
  override public init()
  open class func of(_ item: SAPOData.PropertyPath) -> SAPOData.SelectItem
  open var path: SAPOData.DataPath {
    get
    set(value)
  }
  open func toProperty() -> SAPOData.Property?
  open func toRequiredProperty() -> SAPOData.Property
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class SelectItemList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.SelectItem {
    get
    set
  }
  public static let empty: SAPOData.SelectItemList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.SelectItem)
  open func append(contentsOf list: SAPOData.SelectItemList)
  open func appendThis(_ item: SAPOData.SelectItem) -> SAPOData.SelectItemList
  open func copy() -> SAPOData.SelectItemList
  open func first() -> SAPOData.SelectItem
  open func forProperty(_ property: SAPOData.Property) throws -> SAPOData.SelectItem?
  open class func fromArray(_ array: Swift.Array<SAPOData.SelectItem>) -> SAPOData.SelectItemList
  open func hasProperty(_ property: SAPOData.Property) throws -> Swift.Bool
  open func includes(item: SAPOData.SelectItem) -> Swift.Bool
  open func indexOf(item: SAPOData.SelectItem, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.SelectItem)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.SelectItemList)
  open func item(at index: Swift.Int) -> SAPOData.SelectItem
  open func last() -> SAPOData.SelectItem
  open func lastIndexOf(item: SAPOData.SelectItem, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SelectItem>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.SelectItemList
  open func single() -> SAPOData.SelectItem
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SelectItemList
  open func toArray() -> Swift.Array<SAPOData.SelectItem>
  open func update(at index: Swift.Int, item: SAPOData.SelectItem)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SelectItem>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SelectItem>>
}
open class SetBase : SAPOData.ObjectBase {
  public init(capacity: Swift.Int)
  open var isEmpty: Swift.Bool {
    get
  }
  open func removeAll()
  open var size: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  open var untypedSet: SAPOData.UntypedSet {
    get
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class ShortList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Int]) -> SAPOData.ShortList
  public func toArray() -> [Swift.Int]
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.ShortList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Int)
  open func append(contentsOf list: SAPOData.ShortList)
  open func appendThis(_ item: Swift.Int) -> SAPOData.ShortList
  open func copy() -> SAPOData.ShortList
  open func first() -> Swift.Int
  open func includes(item: Swift.Int) -> Swift.Bool
  open func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Int)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.ShortList)
  open func item(at index: Swift.Int) -> Swift.Int
  open func last() -> Swift.Int
  open func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.ShortList
  open func single() -> Swift.Int
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.ShortList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Int)
  override open func validate(_ value: Swift.AnyObject?) -> Swift.AnyObject?
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class ShortValue : SAPOData.DataValue {
  public static let zero: SAPOData.ShortValue
  open class func compare(_ left: SAPOData.ShortValue, _ right: SAPOData.ShortValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.ShortValue?, _ right: SAPOData.ShortValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.ShortValue
  open class func of(optional value: Swift.Int?) -> SAPOData.ShortValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  open class func validate(_ value: Swift.Int) -> Swift.Int
  open var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SimpleType : SAPOData.DataType {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  public static let simplr: SAPOData.EnumType
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var sourceLine: Swift.Int
  final public var typeFacets: SAPOData.TypeFacets?
  final public var isExtension: Swift.Bool
  final public var isInferred: Swift.Bool
  final public var isUnicode: Swift.Bool
  final public var minLength: Swift.Int
  final public var maxLength: Swift.Int
  final public var precision: Swift.Int
  final public var scale: Swift.Int
  final public var srid: Swift.Int
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  override open var code: Swift.Int {
    get
  }
  open var derivedFrom: SAPOData.DataType {
    get
    set(value)
  }
  open var fixedLength: Swift.Bool {
    get
  }
  override open var isDerived: Swift.Bool {
    get
  }
  override open var name: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class SimpleTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.SimpleType {
    get
    set
  }
  public static let empty: SAPOData.SimpleTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.SimpleType)
  open func append(contentsOf list: SAPOData.SimpleTypeList)
  open func appendThis(_ item: SAPOData.SimpleType) -> SAPOData.SimpleTypeList
  override open var comparer: SAPOData.Comparer {
    get
  }
  open func copy() -> SAPOData.SimpleTypeList
  open func first() -> SAPOData.SimpleType
  open class func fromArray(_ array: Swift.Array<SAPOData.SimpleType>) -> SAPOData.SimpleTypeList
  open func includes(item: SAPOData.SimpleType) -> Swift.Bool
  open func indexOf(item: SAPOData.SimpleType, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.SimpleType)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.SimpleTypeList)
  open func item(at index: Swift.Int) -> SAPOData.SimpleType
  open func last() -> SAPOData.SimpleType
  open func lastIndexOf(item: SAPOData.SimpleType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SimpleType>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.SimpleTypeList
  open func single() -> SAPOData.SimpleType
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SimpleTypeList
  open func toArray() -> Swift.Array<SAPOData.SimpleType>
  open func update(at index: Swift.Int, item: SAPOData.SimpleType)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SimpleType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SimpleType>>
}
open class SimpleTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.SimpleTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func add(_ value: SAPOData.SimpleType)
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.SimpleTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.SimpleType
  open func sortedEntries() -> SAPOData.SimpleTypeMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.SimpleTypeList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.SimpleType)
  open func updateThis(key: Swift.String, value: SAPOData.SimpleType) -> SAPOData.SimpleTypeMap
  open func updateValue(_ value: SAPOData.SimpleType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.SimpleType?
  open func values() -> SAPOData.SimpleTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.SimpleType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.SimpleTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.SimpleTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.SimpleTypeMap.Entry)
    open func append(contentsOf list: SAPOData.SimpleTypeMap.EntryList)
    open func appendThis(_ item: SAPOData.SimpleTypeMap.Entry) -> SAPOData.SimpleTypeMap.EntryList
    open func copy() -> SAPOData.SimpleTypeMap.EntryList
    open func first() -> SAPOData.SimpleTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.SimpleTypeMap.Entry>) -> SAPOData.SimpleTypeMap.EntryList
    open func includes(item: SAPOData.SimpleTypeMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.SimpleTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.SimpleTypeMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.SimpleTypeMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.SimpleTypeMap.Entry
    open func last() -> SAPOData.SimpleTypeMap.Entry
    open func lastIndexOf(item: SAPOData.SimpleTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SimpleTypeMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.SimpleTypeMap.EntryList
    open func single() -> SAPOData.SimpleTypeMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SimpleTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.SimpleTypeMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.SimpleTypeMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SimpleTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SimpleTypeMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class SortItem : SAPOData.ObjectBase {
  public static func of(property: SAPOData.Property) -> SAPOData.SortItem
  final public var order: SAPOData.SortOrder
  override public init()
  open class func of(_ value: SAPOData.QueryValue) -> SAPOData.SortItem
  open var path: SAPOData.DataPath? {
    get
  }
  open func toProperty() -> SAPOData.Property?
  open func toRequiredProperty() -> SAPOData.Property
  override open func toString() -> Swift.String
  open var value: SAPOData.QueryValue {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class SortItemList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.SortItem {
    get
    set
  }
  public static let empty: SAPOData.SortItemList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.SortItem)
  open func append(contentsOf list: SAPOData.SortItemList)
  open func appendThis(_ item: SAPOData.SortItem) -> SAPOData.SortItemList
  open func copy() -> SAPOData.SortItemList
  open func first() -> SAPOData.SortItem
  open class func fromArray(_ array: Swift.Array<SAPOData.SortItem>) -> SAPOData.SortItemList
  open func includes(item: SAPOData.SortItem) -> Swift.Bool
  open func indexOf(item: SAPOData.SortItem, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.SortItem)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.SortItemList)
  open func item(at index: Swift.Int) -> SAPOData.SortItem
  open func last() -> SAPOData.SortItem
  open func lastIndexOf(item: SAPOData.SortItem, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.SortItem>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.SortItemList
  open func single() -> SAPOData.SortItem
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.SortItemList
  open func toArray() -> Swift.Array<SAPOData.SortItem>
  open func update(at index: Swift.Int, item: SAPOData.SortItem)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.SortItem>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.SortItem>>
}
public enum SortOrder : Swift.Int {
  case ascending
  case descending
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers open class StreamBase : SAPOData.DataValue {
  override public init()
  open func close() throws
  open var entityTag: Swift.String? {
    get
    set(value)
  }
  open var fileName: Swift.String? {
    get
    set(value)
  }
  open func flush() throws
  open var mediaType: Swift.String? {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StreamLink : SAPOData.DataValue {
  final public var entitySet: SAPOData.EntitySet?
  final public var mediaType: Swift.String?
  final public var entityTag: Swift.String?
  final public var editLink: Swift.String?
  final public var readLink: Swift.String?
  final public var isDeleted: Swift.Bool
  final public var isOffline: Swift.Bool
  override public init()
  open func copyLink() -> SAPOData.StreamLink
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(a: SAPOData.StreamLink?, b: SAPOData.StreamLink?) -> Swift.Bool
  open var inlineData: Foundation.Data? {
    get
    set(value)
  }
  open var inlineText: Swift.String? {
    get
    set(value)
  }
  open var owningType: SAPOData.StructureType {
    get
    set(value)
  }
  open var streamProperty: SAPOData.StreamProperty {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open var valuePath: Swift.String? {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StreamProperty : SAPOData.Property {
  override public init()
  open var entityTag: SAPOData.Property {
    get
    set(value)
  }
  open var mediaType: SAPOData.Property {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StringList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.String]) -> SAPOData.StringList
  public func toArray() -> [Swift.String]
  public subscript(index: Swift.Int) -> Swift.String {
    get
    set
  }
  public static let empty: SAPOData.StringList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.String)
  open func append(contentsOf list: SAPOData.StringList)
  open func appendThis(_ item: Swift.String) -> SAPOData.StringList
  open func concat() -> Swift.String
  open func copy() -> SAPOData.StringList
  open func dropEmpty() -> SAPOData.StringList
  open func first() -> Swift.String
  open func includes(item: Swift.String) -> Swift.Bool
  open func indexOf(item: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.String)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.StringList)
  open func item(at index: Swift.Int) -> Swift.String
  open func join(separator: Swift.String) -> Swift.String
  open func joinLines() -> Swift.String
  open func last() -> Swift.String
  open func lastIndexOf(item: Swift.String, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open class func lines(_ value: Swift.String) -> SAPOData.StringList
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.String>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.StringList
  open func single() -> Swift.String
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.StringList
  open func sortIgnoreCase() -> SAPOData.StringList
  open class func split(_ value: Swift.String, separator: Swift.String, limit: Swift.Int = (2147483647 as Int)) -> SAPOData.StringList
  override open func toDynamic() -> SAPOData.ListBase?
  open func trimAll() -> SAPOData.StringList
  open func update(at index: Swift.Int, item: Swift.String)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.String>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.String>>
}
open class StringMap : SAPOData.MapBase {
  public static let empty: SAPOData.StringMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.StringMap.EntryList
  open func inverse() -> SAPOData.StringMap
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> Swift.String
  open func sortedEntries() -> SAPOData.StringMap.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.StringList
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: Swift.String)
  open func updateThis(key: Swift.String, value: Swift.String) -> SAPOData.StringMap
  open func updateValue(_ value: Swift.String, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> Swift.String?
  open func values() -> SAPOData.StringList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: Swift.String {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.StringMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.StringMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.StringMap.Entry)
    open func append(contentsOf list: SAPOData.StringMap.EntryList)
    open func appendThis(_ item: SAPOData.StringMap.Entry) -> SAPOData.StringMap.EntryList
    open func copy() -> SAPOData.StringMap.EntryList
    open func first() -> SAPOData.StringMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.StringMap.Entry>) -> SAPOData.StringMap.EntryList
    open func includes(item: SAPOData.StringMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.StringMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.StringMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.StringMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.StringMap.Entry
    open func last() -> SAPOData.StringMap.Entry
    open func lastIndexOf(item: SAPOData.StringMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.StringMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.StringMap.EntryList
    open func single() -> SAPOData.StringMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.StringMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.StringMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.StringMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.StringMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.StringMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class StringSet : SAPOData.SetBase {
  public static let empty: SAPOData.StringSet
  override public init(capacity: Swift.Int = (16 as Int))
  open func contains(_ value: Swift.String) -> Swift.Bool
  open func insert(_ value: Swift.String)
  open func insertThis(_ value: Swift.String) -> SAPOData.StringSet
  open func remove(_ value: Swift.String) -> Swift.Bool
  open func sortedValues() throws -> SAPOData.StringList
  open func values() -> SAPOData.StringList
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class StringValue : SAPOData.DataValue {
  public static let empty: SAPOData.StringValue
  open class func compare(_ left: SAPOData.StringValue, _ right: SAPOData.StringValue) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.StringValue?, _ right: SAPOData.StringValue?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.String) -> SAPOData.StringValue
  open class func of(optional value: Swift.String?) -> SAPOData.StringValue?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.String?
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.String
  open var value: Swift.String {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StructuralProperty : SAPOData.Property {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class StructureBase : SAPOData.DataValue, Swift.Codable {
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  override public init()
  open func dataValue(for path: SAPOData.PropertyPath) -> SAPOData.DataValue?
  open var dynamicProperties: SAPOData.DataValueMap {
    get
    set(value)
  }
  open func dynamicValue(name: Swift.String) -> SAPOData.DataValue?
  open func hasDataType(_ type: SAPOData.DataType) -> Swift.Bool
  open func hasDataValue(for property: SAPOData.Property) -> Swift.Bool
  open var hasDynamicProperties: Swift.Bool {
    get
  }
  open func hasNextLink(for property: SAPOData.Property) -> Swift.Bool
  open var isProxy: Swift.Bool {
    get
  }
  open func nextLink(for path: SAPOData.PropertyPath) -> Swift.String?
  open func optionalValue(for path: SAPOData.PropertyPath) -> SAPOData.DataValue?
  open func requiredValue(for path: SAPOData.PropertyPath) -> SAPOData.DataValue
  open func setDataValue(for property: SAPOData.Property, to value: SAPOData.DataValue?)
  open func setDefaultValues(nestedComplex: Swift.Bool = true, nestedEntity: Swift.Bool = false, defaultOptional: Swift.Bool = true, defaultRequired: Swift.Bool = true, skipConstraints: Swift.Bool = false)
  open func setDynamicValue(name: Swift.String, value: SAPOData.DataValue?)
  open func setOptionalValue(for property: SAPOData.Property, to value: SAPOData.DataValue?)
  open func setRequiredValue(for property: SAPOData.Property, to value: SAPOData.DataValue)
  open func streamLink(for property: SAPOData.Property) -> SAPOData.StreamLink
  open var structureType: SAPOData.StructureType {
    get
  }
  open func unsetDataValue(for property: SAPOData.Property)
  open var valuePath: Swift.String? {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StructureType : SAPOData.DataType {
  final public var canBeRemoved: Swift.Bool
  final public var isRemoved: Swift.Bool
  final public var localName: Swift.String
  final public var qualifiedName: Swift.String
  final public var objectFactory: SAPOData.ObjectFactory?
  final public var isAbstract: Swift.Bool
  final public var isOpenType: Swift.Bool
  final public var sourceLine: Swift.Int
  final public var extensionProperties: SAPOData.PropertyList
  final public var isExtension: Swift.Bool
  final public var isInferred: Swift.Bool
  override public init()
  open func annotation(withName term: Swift.String) -> SAPOData.Annotation
  open var annotationList: SAPOData.AnnotationList {
    get
  }
  open var annotationMap: SAPOData.AnnotationMap {
    get
  }
  open var annotations: SAPOData.AnnotationMap {
    get
  }
  open var collectionProperties: SAPOData.PropertyList {
    get
    set(value)
  }
  open var complexProperties: SAPOData.PropertyList {
    get
    set(value)
  }
  override open var name: Swift.String {
    get
  }
  open var navigationProperties: SAPOData.PropertyList {
    get
    set(value)
  }
  open func property(withName name: Swift.String) -> SAPOData.Property
  open var propertyList: SAPOData.PropertyList {
    get
    set(value)
  }
  open var propertyMap: SAPOData.PropertyMap {
    get
    set(value)
  }
  open var streamProperties: SAPOData.PropertyList {
    get
    set(value)
  }
  open var structuralProperties: SAPOData.PropertyList {
    get
    set(value)
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class StructureTypeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.StructureType {
    get
    set
  }
  public static let empty: SAPOData.StructureTypeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.StructureType)
  open func append(contentsOf list: SAPOData.StructureTypeList)
  open func appendThis(_ item: SAPOData.StructureType) -> SAPOData.StructureTypeList
  open func copy() -> SAPOData.StructureTypeList
  open func first() -> SAPOData.StructureType
  open class func fromArray(_ array: Swift.Array<SAPOData.StructureType>) -> SAPOData.StructureTypeList
  open func includes(item: SAPOData.StructureType) -> Swift.Bool
  open func indexOf(item: SAPOData.StructureType, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.StructureType)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.StructureTypeList)
  open func item(at index: Swift.Int) -> SAPOData.StructureType
  open func last() -> SAPOData.StructureType
  open func lastIndexOf(item: SAPOData.StructureType, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.StructureType>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.StructureTypeList
  open func single() -> SAPOData.StructureType
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.StructureTypeList
  open func toArray() -> Swift.Array<SAPOData.StructureType>
  open func update(at index: Swift.Int, item: SAPOData.StructureType)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.StructureType>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.StructureType>>
}
open class StructureTypeMap : SAPOData.MapBase {
  public static let empty: SAPOData.StructureTypeMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.StructureTypeMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.StructureType
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.StructureType)
  open func updateThis(key: Swift.String, value: SAPOData.StructureType) -> SAPOData.StructureTypeMap
  open func updateValue(_ value: SAPOData.StructureType, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.StructureType?
  open func values() -> SAPOData.StructureTypeList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.StructureType {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.StructureTypeMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.StructureTypeMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.StructureTypeMap.Entry)
    open func append(contentsOf list: SAPOData.StructureTypeMap.EntryList)
    open func appendThis(_ item: SAPOData.StructureTypeMap.Entry) -> SAPOData.StructureTypeMap.EntryList
    open func copy() -> SAPOData.StructureTypeMap.EntryList
    open func first() -> SAPOData.StructureTypeMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.StructureTypeMap.Entry>) -> SAPOData.StructureTypeMap.EntryList
    open func includes(item: SAPOData.StructureTypeMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.StructureTypeMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.StructureTypeMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.StructureTypeMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.StructureTypeMap.Entry
    open func last() -> SAPOData.StructureTypeMap.Entry
    open func lastIndexOf(item: SAPOData.StructureTypeMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.StructureTypeMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.StructureTypeMap.EntryList
    open func single() -> SAPOData.StructureTypeMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.StructureTypeMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.StructureTypeMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.StructureTypeMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.StructureTypeMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.StructureTypeMap.Entry>>
  }
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class SystemKey {
  public static let offlineOriginalEntity: Swift.Int64
  public static let offlinePendingDeleted: Swift.Int64
  public static let offlinePendingUpdated: Swift.Int64
  public static let offlinePendingCreated: Swift.Int64
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class TopTransform : SAPOData.AmountTransform {
  open class func count(amount: Swift.Int, value: SAPOData.DataValue) throws -> SAPOData.TopTransform
  open class func percent(amount: Swift.Double, value: SAPOData.DataValue) throws -> SAPOData.TopTransform
  open class func sum(amount: Swift.Double, value: SAPOData.DataValue) throws -> SAPOData.TopTransform
  @objc deinit
}
@_inheritsConvenienceInitializers open class TransformValue : SAPOData.QueryValue {
  final public var items: SAPOData.TransformValueList
  override public init()
  open func chain(_ item: SAPOData.TransformValue) -> SAPOData.TransformValue
  @objc deinit
}
@_inheritsConvenienceInitializers open class TransformValueList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.TransformValue {
    get
    set
  }
  public static let empty: SAPOData.TransformValueList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.TransformValue)
  open func append(contentsOf list: SAPOData.TransformValueList)
  open func appendThis(_ item: SAPOData.TransformValue) -> SAPOData.TransformValueList
  open func copy() -> SAPOData.TransformValueList
  open func first() -> SAPOData.TransformValue
  open class func fromArray(_ array: Swift.Array<SAPOData.TransformValue>) -> SAPOData.TransformValueList
  open func includes(item: SAPOData.TransformValue) -> Swift.Bool
  open func indexOf(item: SAPOData.TransformValue, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.TransformValue)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.TransformValueList)
  open func item(at index: Swift.Int) -> SAPOData.TransformValue
  open func last() -> SAPOData.TransformValue
  open func lastIndexOf(item: SAPOData.TransformValue, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.TransformValue>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.TransformValueList
  open func single() -> SAPOData.TransformValue
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.TransformValueList
  open func toArray() -> Swift.Array<SAPOData.TransformValue>
  open func update(at index: Swift.Int, item: SAPOData.TransformValue)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.TransformValue>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.TransformValue>>
}
@_inheritsConvenienceInitializers open class TypeFacets : SAPOData.ObjectBase {
  public static let anyLength: Swift.Int
  public static let anyPrecision: Swift.Int
  public static let floatingScale: Swift.Int
  public static let variableScale: Swift.Int
  public static let variableSrid: Swift.Int
  final public var isOptional: Swift.Bool?
  final public var isUnicode: Swift.Bool?
  final public var minLength: Swift.Int?
  final public var maxLength: Swift.Int?
  final public var precision: Swift.Int?
  final public var scale: Swift.Int?
  final public var srid: Swift.Int?
  final public var defaultValue: SAPOData.DataValue?
  override public init()
  open class func merge(from: SAPOData.TypeFacets?, to: SAPOData.TypeFacets?) throws -> SAPOData.TypeFacets?
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class UnsignedByte : SAPOData.DataValue {
  public static let maxValue: Swift.Int
  public static let zero: SAPOData.UnsignedByte
  open class func compare(_ left: SAPOData.UnsignedByte, _ right: SAPOData.UnsignedByte) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.UnsignedByte?, _ right: SAPOData.UnsignedByte?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.UnsignedByte
  open class func of(optional value: Swift.Int?) -> SAPOData.UnsignedByte?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  open class func toInt(_ value: Swift.Int) -> Swift.Int
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  open class func validate(_ value: Swift.Int) -> Swift.Int
  open var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class UnsignedByteList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Int]) -> SAPOData.UnsignedByteList
  public func toArray() -> [Swift.Int]
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.UnsignedByteList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Int)
  open func append(contentsOf list: SAPOData.UnsignedByteList)
  open func appendThis(_ item: Swift.Int) -> SAPOData.UnsignedByteList
  open func copy() -> SAPOData.UnsignedByteList
  open func first() -> Swift.Int
  open func includes(item: Swift.Int) -> Swift.Bool
  open func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Int)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.UnsignedByteList)
  open func item(at index: Swift.Int) -> Swift.Int
  open func last() -> Swift.Int
  open func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.UnsignedByteList
  open func single() -> Swift.Int
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.UnsignedByteList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Int)
  override open func validate(_ value: Swift.AnyObject?) -> Swift.AnyObject?
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class UnsignedShort : SAPOData.DataValue {
  public static let maxValue: Swift.Int
  public static let zero: SAPOData.UnsignedShort
  open class func compare(_ left: SAPOData.UnsignedShort, _ right: SAPOData.UnsignedShort) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.UnsignedShort?, _ right: SAPOData.UnsignedShort?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open class func of(_ value: Swift.Int) -> SAPOData.UnsignedShort
  open class func of(optional value: Swift.Int?) -> SAPOData.UnsignedShort?
  open class func optional(_ value: Swift.AnyObject?) -> Swift.Int?
  open class func toInt(_ value: Swift.Int) -> Swift.Int
  override open func toString() -> Swift.String
  override open var typeCode: Swift.Int {
    get
  }
  open class func unwrap(_ value: Swift.AnyObject?) -> Swift.Int
  open class func validate(_ value: Swift.Int) -> Swift.Int
  open var value: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class UnsignedShortList : SAPOData.ListBase, Swift.Sequence {
  public static func fromArray(_ array: [Swift.Int]) -> SAPOData.UnsignedShortList
  public func toArray() -> [Swift.Int]
  public subscript(index: Swift.Int) -> Swift.Int {
    get
    set
  }
  public static let empty: SAPOData.UnsignedShortList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: Swift.Int)
  open func append(contentsOf list: SAPOData.UnsignedShortList)
  open func appendThis(_ item: Swift.Int) -> SAPOData.UnsignedShortList
  open func copy() -> SAPOData.UnsignedShortList
  open func first() -> Swift.Int
  open func includes(item: Swift.Int) -> Swift.Bool
  open func indexOf(item: Swift.Int, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.Int)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.UnsignedShortList)
  open func item(at index: Swift.Int) -> Swift.Int
  open func last() -> Swift.Int
  open func lastIndexOf(item: Swift.Int, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<Swift.Int>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.UnsignedShortList
  open func single() -> Swift.Int
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.UnsignedShortList
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: Swift.Int)
  override open func validate(_ value: Swift.AnyObject?) -> Swift.AnyObject?
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<Swift.Int>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<Swift.Int>>
}
public enum UpdateMode : Swift.Int {
  case merge
  case replace
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class YearMonthDuration : SAPOData.DataValue {
  open class func castOptional(_ value: SAPOData.DataValue?) -> SAPOData.YearMonthDuration?
  open class func castRequired(_ value: SAPOData.DataValue?) -> SAPOData.YearMonthDuration
  open class func compare(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Int
  open func compareTo(_ value: SAPOData.YearMonthDuration) -> Swift.Int
  override open var dataType: SAPOData.DataType {
    get
  }
  open class func equal(_ left: SAPOData.YearMonthDuration?, _ right: SAPOData.YearMonthDuration?) -> Swift.Bool
  override open func equals(_ value: Swift.AnyObject?) -> Swift.Bool
  open func greaterEqual(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func greaterEqual(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Bool
  open func greaterThan(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func greaterThan(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Bool
  override open func hashCode() -> Swift.Int
  open func lessEqual(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func lessEqual(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Bool
  open func lessThan(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func lessThan(_ left: SAPOData.YearMonthDuration, _ right: SAPOData.YearMonthDuration) -> Swift.Bool
  open var months: Swift.Int {
    get
  }
  open func normalize() -> SAPOData.YearMonthDuration
  open func notEqual(_ value: SAPOData.YearMonthDuration) -> Swift.Bool
  open class func notEqual(_ left: SAPOData.YearMonthDuration?, _ right: SAPOData.YearMonthDuration?) -> Swift.Bool
  open class func of(sign: Swift.Int, years: Swift.Int, months: Swift.Int) -> SAPOData.YearMonthDuration
  open class func parse(_ text: Swift.String) -> SAPOData.YearMonthDuration?
  open var sign: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  open var years: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class YearMonthDurationList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.YearMonthDuration {
    get
    set
  }
  public static let empty: SAPOData.YearMonthDurationList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.YearMonthDuration)
  open func append(contentsOf list: SAPOData.YearMonthDurationList)
  open func appendThis(_ item: SAPOData.YearMonthDuration) -> SAPOData.YearMonthDurationList
  open func copy() -> SAPOData.YearMonthDurationList
  open func first() -> SAPOData.YearMonthDuration
  open class func fromArray(_ array: Swift.Array<SAPOData.YearMonthDuration>) -> SAPOData.YearMonthDurationList
  open func includes(item: SAPOData.YearMonthDuration) -> Swift.Bool
  open func indexOf(item: SAPOData.YearMonthDuration, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.YearMonthDuration)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.YearMonthDurationList)
  open func item(at index: Swift.Int) -> SAPOData.YearMonthDuration
  open func last() -> SAPOData.YearMonthDuration
  open func lastIndexOf(item: SAPOData.YearMonthDuration, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.YearMonthDuration>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.YearMonthDurationList
  open func single() -> SAPOData.YearMonthDuration
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.YearMonthDurationList
  open func toArray() -> Swift.Array<SAPOData.YearMonthDuration>
  override open func toDynamic() -> SAPOData.ListBase?
  open func update(at index: Swift.Int, item: SAPOData.YearMonthDuration)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.YearMonthDuration>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.YearMonthDuration>>
}
@_hasMissingDesignatedInitializers public class GeoJson {
  public static func format(_ value: SAPOData.DataValue?) -> Swift.String
  public static func formatObject(_ value: SAPOData.DataValue) -> SAPOData.JsonObject
  public static func parse(_ text: Swift.String, type: SAPOData.DataType) throws -> SAPOData.DataValue?
  public static func parseObject(geo: SAPOData.JsonObject, type: SAPOData.DataType) throws -> SAPOData.DataValue
  @objc deinit
}
open class JsonArray : SAPOData.JsonElement {
  public static let empty: SAPOData.JsonArray
  public init(capacity: Swift.Int = (4 as Int))
  open func addAll(list: SAPOData.JsonArray)
  open func append(_ item: SAPOData.JsonElement?)
  open func appendThis(_ item: SAPOData.JsonElement?) -> SAPOData.JsonArray
  open func array(index: Swift.Int) throws -> SAPOData.JsonArray
  open func copy() -> SAPOData.JsonArray
  open func first() -> SAPOData.JsonElement?
  open class func fromElement(_ value: SAPOData.JsonElement?) throws -> SAPOData.JsonArray
  open func includes(item: SAPOData.JsonElement?) -> Swift.Bool
  open func indexOf(item: SAPOData.JsonElement?, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.JsonElement?)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.JsonArray)
  open var isEmpty: Swift.Bool {
    get
  }
  open func item(at index: Swift.Int) -> SAPOData.JsonElement?
  open func last() -> SAPOData.JsonElement?
  open func lastIndexOf(item: Swift.AnyObject?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open var length: Swift.Int {
    get
  }
  open func objectValue(index: Swift.Int) throws -> SAPOData.JsonObject
  open func remove(at index: Swift.Int)
  open func removeAll()
  open func removeRange(start: Swift.Int, end: Swift.Int)
  open func reverse()
  open func single() -> SAPOData.JsonElement?
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.JsonArray
  open func sort()
  open func stringValue(index: Swift.Int) throws -> Swift.String
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var untypedList: SAPOData.UntypedList {
    get
  }
  open func update(at index: Swift.Int, item: SAPOData.JsonElement?)
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonBoolean : SAPOData.JsonElement {
  public static let FALSE: SAPOData.JsonBoolean
  public static let TRUE: SAPOData.JsonBoolean
  open class func of(_ value: Swift.Bool) -> SAPOData.JsonBoolean
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.Bool {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JsonBooleanToken : SAPOData.JsonToken {
  open class func of(_ value: Swift.Bool) -> SAPOData.JsonBooleanToken
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.Bool {
    get
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonDeltaStream : SAPOData.DeltaStream {
  override open func abort() throws
  override open func close() throws
  open class func fromStream(_ stream: SAPOData.CharStream, context: SAPOData.DataContext) throws -> SAPOData.JsonDeltaStream
  override open func next() throws -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonElement : SAPOData.ObjectBase {
  public static let typeBoolean: Swift.Int
  public static let typeNumber: Swift.Int
  public static let typeString: Swift.Int
  public static let typeArray: Swift.Int
  public static let typeObject: Swift.Int
  override public init()
  open class func applyVersion(_ version: Swift.Int, toElement: SAPOData.JsonElement?) -> SAPOData.JsonElement?
  open class func format(element: SAPOData.JsonElement?) -> Swift.String
  open class func parse(_ text: Swift.String) throws -> SAPOData.JsonElement?
  open class func parseArray(_ text: Swift.String) throws -> SAPOData.JsonArray
  open class func parseObject(_ text: Swift.String) throws -> SAPOData.JsonObject
  open class func parseOptimized(_ text: Swift.String, optimized: Swift.Bool) throws -> SAPOData.JsonElement?
  open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonElementStream : SAPOData.ObjectBase {
  open func beginArray() throws -> SAPOData.JsonArray?
  open func beginObject() throws -> SAPOData.JsonObject?
  open func decompress() throws -> SAPOData.JsonElementStream
  open func endArray() throws
  open func endObject() throws
  open func expectBoolean() throws -> SAPOData.JsonBooleanToken
  open func expectColon() throws
  open func expectComma() throws
  open func expectNumber() throws -> SAPOData.JsonNumberToken
  open func expectString() throws -> SAPOData.JsonStringToken
  open class func fromStream(_ stream: SAPOData.CharStream, optimized: Swift.Bool = false) throws -> SAPOData.JsonElementStream
  open class func fromString(text: Swift.String, optimized: Swift.Bool = false) throws -> SAPOData.JsonElementStream
  open class func fromTokens(_ tokens: SAPOData.JsonTokenStream, optimized: Swift.Bool = false) throws -> SAPOData.JsonElementStream
  open func isEndArray() throws -> Swift.Bool
  open func isEndObject() throws -> Swift.Bool
  open func lookingAt(type: Swift.Int) throws -> Swift.Bool
  open func readArray() throws -> SAPOData.JsonArray
  open func readElement() throws -> SAPOData.JsonElement?
  open func readObject() throws -> SAPOData.JsonObject
  open func readString() throws -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class JsonError : SAPOData.DataFormatError {
  override public init()
  open class func cannotParse(_ value: Swift.String, type: Swift.String) -> SAPOData.JsonError
  open class func withCause(_ cause: Swift.Error) -> SAPOData.JsonError
  open class func withMessage(_ message: Swift.String) -> SAPOData.JsonError
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonNumber : SAPOData.JsonElement {
  public static let zero: SAPOData.JsonNumber
  open class func of(_ value: Swift.String) -> SAPOData.JsonNumber
  open class func ofInt(_ value: Swift.Int) -> SAPOData.JsonNumber
  open class func ofLong(_ value: Swift.Int) -> SAPOData.JsonNumber
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JsonNumberToken : SAPOData.JsonToken {
  open class func of(_ value: Swift.String) -> SAPOData.JsonNumberToken
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.String {
    get
  }
  @objc deinit
  override public init()
}
open class JsonObject : SAPOData.JsonElement {
  public static let empty: SAPOData.JsonObject
  final public var customOrdering: SAPOData.JsonObject.FieldOrdering?
  final public var optimizedEntries: SAPOData.JsonObject.EntryList
  public init(capacity: Swift.Int = (16 as Int))
  open func array(name: Swift.String) throws -> SAPOData.JsonArray
  open func booleanValue(name: Swift.String) throws -> Swift.Bool
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.JsonObject.EntryList
  open class func fromElement(_ value: SAPOData.JsonElement?) throws -> SAPOData.JsonObject
  open func keys() -> SAPOData.StringList
  open func objectValue(name: Swift.String) throws -> SAPOData.JsonObject
  open func optionalArray(name: Swift.String) throws -> SAPOData.JsonArray?
  open func optionalBoolean(name: Swift.String) throws -> Swift.Bool?
  open func optionalObject(name: Swift.String) throws -> SAPOData.JsonObject?
  open func optionalString(name: Swift.String) throws -> Swift.String?
  open func removeAll()
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredField(_ field: Swift.String) throws -> SAPOData.JsonElement?
  open func requiredValue(forKey key: Swift.String) -> SAPOData.JsonElement?
  open func setArray(name: Swift.String, value: SAPOData.JsonArray)
  open func setBooleanValue(name: Swift.String, value: Swift.Bool)
  open func setNumber(name: Swift.String, value: Swift.String)
  open func setObjectValue(name: Swift.String, value: SAPOData.JsonObject)
  open func setStringValue(name: Swift.String, value: Swift.String)
  open var size: Swift.Int {
    get
  }
  open func sortedEntries() -> SAPOData.JsonObject.EntryList
  open func sortedKeys() -> SAPOData.StringList
  open func sortedValues() -> SAPOData.JsonArray
  open func stringValue(name: Swift.String) throws -> Swift.String
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.JsonElement?)
  open func updateThis(key: Swift.String, value: SAPOData.JsonElement?) -> SAPOData.JsonObject
  open func updateValue(_ value: SAPOData.JsonElement?, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.JsonElement?
  open func values() -> SAPOData.JsonArray
  open func withVersion(_ version: Swift.Int) -> SAPOData.JsonObject
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.JsonElement? {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.JsonObject.Entry {
      get
      set
    }
    public static let empty: SAPOData.JsonObject.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.JsonObject.Entry)
    open func append(contentsOf list: SAPOData.JsonObject.EntryList)
    open func appendThis(_ item: SAPOData.JsonObject.Entry) -> SAPOData.JsonObject.EntryList
    open func copy() -> SAPOData.JsonObject.EntryList
    open func first() -> SAPOData.JsonObject.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.JsonObject.Entry>) -> SAPOData.JsonObject.EntryList
    open func includes(item: SAPOData.JsonObject.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.JsonObject.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.JsonObject.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.JsonObject.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.JsonObject.Entry
    open func last() -> SAPOData.JsonObject.Entry
    open func lastIndexOf(item: SAPOData.JsonObject.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.JsonObject.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.JsonObject.EntryList
    open func single() -> SAPOData.JsonObject.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.JsonObject.EntryList
    open func toArray() -> Swift.Array<SAPOData.JsonObject.Entry>
    open func update(at index: Swift.Int, item: SAPOData.JsonObject.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.JsonObject.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.JsonObject.Entry>>
  }
  @_inheritsConvenienceInitializers open class FieldOrdering : SAPOData.Comparer {
    final public var propertyMap: SAPOData.PropertyMap?
    override public init()
    @objc deinit
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class JsonOutputStream : SAPOData.ObjectBase {
  override public init()
  open func clear() throws
  open var length: Swift.Int {
    get
  }
  open class func withBuffer() throws -> SAPOData.JsonOutputStream
  open func writeChar(c: Foundation.unichar) throws
  open func writeElement(_ element: SAPOData.JsonElement?) throws
  open func writeString(text: Swift.String) throws
  open func writeVerbatim(text: Swift.String) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JsonPretty {
  public static func print(_ value: SAPOData.JsonElement?, indent: Swift.Int = (0 as Int)) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonString : SAPOData.JsonElement {
  public static let empty: SAPOData.JsonString
  open class func of(_ value: Swift.String) -> SAPOData.JsonString
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.String {
    get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers open class JsonStringToken : SAPOData.JsonToken {
  open class func of(_ value: Swift.String) -> SAPOData.JsonStringToken
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open var value: Swift.String {
    get
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class JsonToken : SAPOData.ObjectBase {
  public static let nullValue: Swift.Int
  public static let booleanValue: Swift.Int
  public static let numberValue: Swift.Int
  public static let stringValue: Swift.Int
  public static let colonChar: Swift.Int
  public static let commaChar: Swift.Int
  public static let beginArray: Swift.Int
  public static let endArray: Swift.Int
  public static let beginObject: Swift.Int
  public static let endObject: Swift.Int
  public static let endStream: Swift.Int
  override public init()
  open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonTokenStream : SAPOData.ObjectBase {
  open func endArray() throws -> Swift.Bool
  open func endObject() throws -> Swift.Bool
  open class func fromStream(_ stream: SAPOData.CharStream) throws -> SAPOData.JsonTokenStream
  open class func fromString(text: Swift.String) throws -> SAPOData.JsonTokenStream
  open func nextIs(type: Swift.Int) throws -> Swift.Bool
  open func peek() throws -> SAPOData.JsonToken
  open func read() throws -> SAPOData.JsonToken
  open func undoRead(token: SAPOData.JsonToken) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class JsonValue {
  public static func errorResponse(document: SAPOData.JsonElement, context: SAPOData.DataContext) throws -> SAPOData.ErrorResponse
  public static func formatCall(_ call: SAPOData.DataMethodCall, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func formatDocument(_ value: SAPOData.DataValue, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func formatLink(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func fromArray(_ value: SAPOData.JsonArray) -> SAPOData.JsonElement
  public static func fromBasicList(_ list: SAPOData.DataValueList, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func fromBinary(_ value: Foundation.Data) -> SAPOData.JsonElement
  public static func fromBoolean(_ value: Swift.Bool) -> SAPOData.JsonElement
  public static func fromByte(_ value: Swift.Int) -> SAPOData.JsonElement
  public static func fromChar(_ value: Foundation.unichar) -> SAPOData.JsonElement
  public static func fromComplexList(_ list: SAPOData.ComplexValueList, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func fromComplexValue(_ complex: SAPOData.ComplexValue?, context: SAPOData.DataContext) -> SAPOData.JsonElement?
  public static func fromDataValue(_ value: SAPOData.DataValue?, context: SAPOData.DataContext) -> SAPOData.JsonElement?
  public static func fromDecimal(_ value: SAPOData.BigDecimal) -> SAPOData.JsonElement
  public static func fromDouble(_ value: Swift.Double) -> SAPOData.JsonElement
  public static func fromEntityList(_ list: SAPOData.EntityValueList, context: SAPOData.DataContext) -> SAPOData.JsonElement
  public static func fromEntityValue(_ entity: SAPOData.EntityValue?, context: SAPOData.DataContext) -> SAPOData.JsonElement?
  public static func fromFloat(_ value: Swift.Float) -> SAPOData.JsonElement
  public static func fromInt(_ value: Swift.Int) -> SAPOData.JsonElement
  public static func fromInteger(_ value: SAPOData.BigInteger) -> SAPOData.JsonElement
  public static func fromLong(_ value: Swift.Int64) -> SAPOData.JsonElement
  public static func fromObject(_ value: SAPOData.JsonObject) -> SAPOData.JsonElement
  public static func fromOptionalBinary(_ value: Foundation.Data?) -> SAPOData.JsonElement?
  public static func fromOptionalBoolean(_ value: Swift.Bool?) -> SAPOData.JsonElement?
  public static func fromOptionalByte(_ value: Swift.Int?) -> SAPOData.JsonElement?
  public static func fromOptionalChar(_ value: Foundation.unichar?) -> SAPOData.JsonElement?
  public static func fromOptionalDecimal(_ value: SAPOData.BigDecimal?) -> SAPOData.JsonElement?
  public static func fromOptionalDouble(_ value: Swift.Double?) -> SAPOData.JsonElement?
  public static func fromOptionalFloat(_ value: Swift.Float?) -> SAPOData.JsonElement?
  public static func fromOptionalInt(_ value: Swift.Int?) -> SAPOData.JsonElement?
  public static func fromOptionalInteger(_ value: SAPOData.BigInteger?) -> SAPOData.JsonElement?
  public static func fromOptionalLong(_ value: Swift.Int64?) -> SAPOData.JsonElement?
  public static func fromOptionalShort(_ value: Swift.Int?) -> SAPOData.JsonElement?
  public static func fromOptionalString(_ value: Swift.String?) -> SAPOData.JsonElement?
  public static func fromShort(_ value: Swift.Int) -> SAPOData.JsonElement
  public static func fromString(_ value: Swift.String) -> SAPOData.JsonElement
  public static func optionalBinary(element: SAPOData.JsonElement?) throws -> Foundation.Data?
  public static func optionalBoolean(element: SAPOData.JsonElement?) throws -> Swift.Bool?
  public static func optionalByte(element: SAPOData.JsonElement?) throws -> Swift.Int?
  public static func optionalChar(element: SAPOData.JsonElement?) throws -> Foundation.unichar?
  public static func optionalDecimal(element: SAPOData.JsonElement?) throws -> SAPOData.BigDecimal?
  public static func optionalDouble(element: SAPOData.JsonElement?) throws -> Swift.Double?
  public static func optionalFloat(element: SAPOData.JsonElement?) throws -> Swift.Float?
  public static func optionalInt(element: SAPOData.JsonElement?) throws -> Swift.Int?
  public static func optionalInteger(element: SAPOData.JsonElement?) throws -> SAPOData.BigInteger?
  public static func optionalLong(element: SAPOData.JsonElement?) throws -> Swift.Int64?
  public static func optionalShort(element: SAPOData.JsonElement?) throws -> Swift.Int?
  public static func optionalString(element: SAPOData.JsonElement?) throws -> Swift.String?
  public static func parseDocument(_ document: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValue?
  public static func parseLink(document: SAPOData.JsonElement, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValue
  public static func parseLinks(document: SAPOData.JsonElement, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValueList
  public static func parseReference(uri: Swift.String, entityType: SAPOData.EntityType, entitySet: SAPOData.EntitySet, context: SAPOData.DataContext, binding: Swift.Bool = false) throws -> SAPOData.EntityValue
  public static func toBasicList(element: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValueList
  public static func toBinary(element: SAPOData.JsonElement?) throws -> Foundation.Data
  public static func toBoolean(element: SAPOData.JsonElement?) throws -> Swift.Bool
  public static func toByte(element: SAPOData.JsonElement?) throws -> Swift.Int
  public static func toChar(element: SAPOData.JsonElement?) throws -> Foundation.unichar
  public static func toComplexList(element: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.ComplexValueList
  public static func toComplexValue(element: SAPOData.JsonElement?, type: SAPOData.ComplexType, context: SAPOData.DataContext) throws -> SAPOData.ComplexValue?
  public static func toDataValue(element: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.DataValue?
  public static func toDecimal(element: SAPOData.JsonElement?) throws -> SAPOData.BigDecimal
  public static func toDouble(element: SAPOData.JsonElement?) throws -> Swift.Double
  public static func toEntityList(element: SAPOData.JsonElement?, type: SAPOData.DataType, context: SAPOData.DataContext) throws -> SAPOData.EntityValueList
  public static func toEntityValue(element: SAPOData.JsonElement?, type: SAPOData.EntityType, context: SAPOData.DataContext) throws -> SAPOData.EntityValue?
  public static func toFloat(element: SAPOData.JsonElement?) throws -> Swift.Float
  public static func toInt(element: SAPOData.JsonElement?) throws -> Swift.Int
  public static func toInteger(element: SAPOData.JsonElement?) throws -> SAPOData.BigInteger
  public static func toLong(element: SAPOData.JsonElement?) throws -> Swift.Int64
  public static func toShort(element: SAPOData.JsonElement?) throws -> Swift.Int
  public static func toString(element: SAPOData.JsonElement?) throws -> Swift.String
  @objc deinit
}
public struct Internal {
}
open class DataContext : SAPOData.ObjectBase {
  public static let keyOnly: Swift.Int
  public static let changesOnly: Swift.Int
  public static let keyAndChanges: Swift.Int
  public static let sendToClient: Swift.Int
  public static let valueToString: Swift.Int
  public static let fullMetadata: Swift.Int
  public static let requiresType: Swift.Int
  public static let supportsAlias: Swift.Int
  public static let inRequestPath: Swift.Int
  public static let inQueryString: Swift.Int
  public static let isDeltaResponse: Swift.Int
  public static let sapEntityStateAnnotations: Swift.Int
  public static let sapOldEntityValues: Swift.Int
  public static let requiresId: Swift.Int
  public static let IEEE_754_COMPATIBLE: Swift.Int
  public static let isRequestPayload: Swift.Int
  public static let receiveFromClient: Swift.Int
  public static let ISO_8601_COMPATIBLE: Swift.Int
  public static let zonelessDateTime: Swift.Int
  final public var versionCode: Swift.Int
  final public var bindOptions: Swift.Int
  final public var dataQuery: SAPOData.DataQuery?
  final public var derivedType: SAPOData.StructureType?
  final public var followNext: Swift.Bool
  final public var aliasValues: SAPOData.DataValueMap?
  final public var avoidInPaths: Swift.String?
  public init(csdl: SAPOData.CSDLDocument)
  open func complexType(name: Swift.String) throws -> SAPOData.ComplexType
  open var csdlDocument: SAPOData.CSDLDocument {
    get
    set(value)
  }
  open func dataMethod(name: Swift.String) throws -> SAPOData.DataMethod
  open func entitySet(name: Swift.String) throws -> SAPOData.EntitySet
  open func entityType(name: Swift.String) throws -> SAPOData.EntityType
  open class func findActualComplex(formalType: SAPOData.ComplexType, typeName: Swift.String) -> SAPOData.ComplexType?
  open class func findActualEntity(formalType: SAPOData.EntityType, typeName: Swift.String) -> SAPOData.EntityType?
  open class func forConversionToString() -> SAPOData.DataContext
  open func hasMetadata() -> Swift.Bool
  open func hasStructureType(name: Swift.String) -> Swift.Bool
  open func inRequest() -> SAPOData.DataContext
  open func inResponse() -> SAPOData.DataContext
  open func inferEntitySet(url: Swift.String?) -> Swift.Bool
  open func makeRelative(url: Swift.String?) -> Swift.String?
  open func maybeRelative(url: Swift.String?) -> Swift.String?
  open func optionalDataMethod(name: Swift.String) -> SAPOData.DataMethod?
  open func optionalEntitySet(name: Swift.String) -> SAPOData.EntitySet?
  open func popExpected()
  open func prepareToFormat(_ value: SAPOData.DataValue?)
  open func prepareToPatch(_ value: SAPOData.DataValue?, old: SAPOData.DataValue?)
  open func pushExpected(entitySet: SAPOData.EntitySet, derivedType: SAPOData.StructureType? = nil)
  open func resolveAnyType(name: Swift.String) -> SAPOData.DataType?
  open func serviceRoot() -> Swift.String
  open func topExpected() -> SAPOData.ExpectedItem
  open func withExpected(entitySet: SAPOData.EntitySet, derivedType: SAPOData.StructureType? = nil) -> SAPOData.DataContext
  open func withOptions(_ options: Swift.Int) -> SAPOData.DataContext
  open func withVersion(_ version: Swift.Int) -> SAPOData.DataContext
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class ExpectedItem : SAPOData.ObjectBase {
  final public var derivedType: SAPOData.StructureType?
  override public init()
  open var entitySet: SAPOData.EntitySet {
    get
    set(value)
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class QueryFormatter {
  public static func format(query: SAPOData.DataQuery, context: SAPOData.DataContext) -> Swift.String
  public static func formatCanonicalURL(entity: SAPOData.EntityValue, context: SAPOData.DataContext, absolute: Swift.Bool = false) -> Swift.String
  public static func formatDataValue(_ value: SAPOData.DataValue?, context: SAPOData.DataContext) -> Swift.String
  public static func formatEditLink(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> Swift.String
  public static func formatEntityID(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> Swift.String
  public static func formatEntityKey(_ entityKey: SAPOData.EntityKey, entityType: SAPOData.EntityType, context: SAPOData.DataContext) -> Swift.String
  public static func formatReadLink(entity: SAPOData.EntityValue, context: SAPOData.DataContext) -> Swift.String
  @objc deinit
}
open class QueryParser : SAPOData.ObjectBase {
  public init(context: SAPOData.DataContext)
  open class func inferEntitySet(url: Swift.String, context: SAPOData.DataContext) -> SAPOData.EntitySet?
  open func parse(requestPath: Swift.String?, queryString: Swift.String?) throws -> SAPOData.DataQuery
  open class func parseCanonicalURL(_ url: Swift.String, context: SAPOData.DataContext) throws -> SAPOData.EntityValue?
  open class func parseEntityID(uri: Swift.String, context: SAPOData.DataContext) throws -> SAPOData.EntityValue?
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataFileReader : SAPOData.ByteStream {
  override open func close() throws
  open class func open(file: Swift.String) throws -> SAPOData.DataFileReader
  override open func readByte() throws -> Swift.Int
  open class func readFile(_ file: Swift.String) throws -> Foundation.Data
  open func withBufferSize(_ size: Swift.Int) throws -> SAPOData.DataFileReader
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class DataFileWriter : SAPOData.ByteStream {
  open class func append(file: Swift.String) throws -> SAPOData.DataFileWriter
  override open func close() throws
  override open func flush() throws
  open class func open(file: Swift.String) throws -> SAPOData.DataFileWriter
  open func withBufferSize(_ size: Swift.Int) throws -> SAPOData.DataFileWriter
  override open func writeBinary(data: Foundation.Data) throws
  override open func writeByte(_ value: Swift.Int) throws
  open class func writeFile(_ file: Swift.String, data: Foundation.Data) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class FileError : SAPOData.DataStorageError {
  override public init()
  open class func withCause(_ cause: Swift.Error?) -> SAPOData.FileError
  open class func withCauseAndMessage(cause: Swift.Error?, message: Swift.String) -> SAPOData.FileError
  open class func withMessage(_ message: Swift.String?) -> SAPOData.FileError
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FileManager {
  public static func copyFile(source: Swift.String, target: Swift.String) throws
  public static func createDirectory(file: Swift.String, createParents: Swift.Bool = true) throws
  public static func createParent(file: Swift.String) throws
  public static func deleteDirectory(file: Swift.String, deleteChildren: Swift.Bool = true) throws
  public static func deleteFile(_ file: Swift.String) throws
  public static func fileExists(file: Swift.String) throws -> Swift.Bool
  public static func fileLength(file: Swift.String) throws -> Swift.Int64
  public static func isDirectory(file: Swift.String) throws -> Swift.Bool
  public static func listFiles(path: Swift.String) throws -> SAPOData.StringList
  public static func localDirectory() throws -> Swift.String
  public static func parentDirectory(file: Swift.String) throws -> Swift.String?
  public static func renameFile(oldName: Swift.String, newName: Swift.String) throws
  public static func resolveName(file: Swift.String) throws -> Swift.String
  public static func unqualifiedName(file: Swift.String) throws -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class TextFileReader : SAPOData.CharStream {
  override open func close() throws
  open class func open(file: Swift.String) throws -> SAPOData.TextFileReader
  override open func readChar() throws -> Swift.Int
  open class func readFile(_ file: Swift.String) throws -> Swift.String
  open class func readLines(file: Swift.String) throws -> SAPOData.StringList
  open func withBufferSize(_ size: Swift.Int) throws -> SAPOData.TextFileReader
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class TextFileWriter : SAPOData.CharStream {
  open class func append(file: Swift.String) throws -> SAPOData.TextFileWriter
  override open func close() throws
  override open func flush() throws
  open class func open(file: Swift.String) throws -> SAPOData.TextFileWriter
  open func withBufferSize(_ size: Swift.Int) throws -> SAPOData.TextFileWriter
  override open func writeChar(_ value: Foundation.unichar) throws
  open class func writeFile(_ file: Swift.String, text: Swift.String) throws
  open class func writeLines(file: Swift.String, lines: SAPOData.StringList) throws
  override open func writeString(text: Swift.String) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class BigDecimal : SAPOData.ObjectBase {
  convenience public init(_ value: Swift.Int)
  public func decimalValue() -> Foundation.Decimal
  convenience public init(_ value: Foundation.Decimal)
  convenience public init(_ text: Swift.String)
  public static let roundNone: Swift.Int
  public static let roundDown: Swift.Int
  public static let roundEven: Swift.Int
  public static let roundUp: Swift.Int
  open func abs() -> SAPOData.BigDecimal
  open func add(_ p_y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  open func byteValue() -> Swift.Int
  open func ceiling() -> SAPOData.BigDecimal
  open func compareTo(_ p_y: SAPOData.BigDecimal) -> Swift.Int
  open func divide(_ p_y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  open func doubleValue() -> Swift.Double
  open func equalTo(_ y: SAPOData.BigDecimal) -> Swift.Bool
  open func floatValue() -> Swift.Float
  open func floor() -> SAPOData.BigDecimal
  open class func fromByte(_ value: Swift.Int) -> SAPOData.BigDecimal
  open class func fromDouble(_ value: Swift.Double) -> SAPOData.BigDecimal
  open class func fromFloat(_ value: Swift.Float) -> SAPOData.BigDecimal
  open class func fromInt(_ value: Swift.Int) -> SAPOData.BigDecimal
  open class func fromLong(_ value: Swift.Int64) -> SAPOData.BigDecimal
  open class func fromShort(_ value: Swift.Int) -> SAPOData.BigDecimal
  open func greaterEqual(_ y: SAPOData.BigDecimal) -> Swift.Bool
  open func greaterThan(_ y: SAPOData.BigDecimal) -> Swift.Bool
  open func intValue() -> Swift.Int
  open func lessEqual(_ y: SAPOData.BigDecimal) -> Swift.Bool
  open func lessThan(_ y: SAPOData.BigDecimal) -> Swift.Bool
  open func longValue() -> Swift.Int64
  open func multiply(_ p_y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  open func negate() -> SAPOData.BigDecimal
  open func notEqual(_ y: SAPOData.BigDecimal) -> Swift.Bool
  open class func parse(_ text: Swift.String) -> SAPOData.BigDecimal?
  open func remainder(_ y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  open func round(_ scale: Swift.Int = (0 as Int)) -> SAPOData.BigDecimal
  open func scale() -> Swift.Int
  open func shortValue() -> Swift.Int
  open func sign() -> Swift.Int
  open func subtract(_ p_y: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  override open func toString() -> Swift.String
  open func truncate() -> SAPOData.BigDecimal
  @objc deinit
}
public class ErrorObject : SAPOData.ErrorBase {
  public init(_ error: Swift.Error)
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class ArrayConverter {
  public static func convert<T, U>(_ value: Swift.Array<T>, _ target: Swift.Array<U>) -> Swift.Array<U>
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BasicList_fromArray {
  public static func ofBoolean(_ array: [Swift.Bool]) -> SAPOData.BooleanList
  public static func ofChar(_ array: [Foundation.unichar]) -> SAPOData.CharList
  public static func ofByte(_ array: [Swift.Int]) -> SAPOData.ByteList
  public static func ofUnsignedByte(_ array: [Swift.Int]) -> SAPOData.UnsignedByteList
  public static func ofShort(_ array: [Swift.Int]) -> SAPOData.ShortList
  public static func ofUnsignedShort(_ array: [Swift.Int]) -> SAPOData.UnsignedShortList
  public static func ofInt(_ array: [Swift.Int]) -> SAPOData.IntList
  public static func ofLong(_ array: [Swift.Int64]) -> SAPOData.LongList
  public static func ofInteger(_ array: [SAPOData.BigInteger]) -> SAPOData.IntegerList
  public static func ofDecimal(_ array: [SAPOData.BigDecimal]) -> SAPOData.DecimalList
  public static func ofFloat(_ array: [Swift.Float]) -> SAPOData.FloatList
  public static func ofDouble(_ array: [Swift.Double]) -> SAPOData.DoubleList
  public static func ofString(_ array: [Swift.String]) -> SAPOData.StringList
  public static func ofBinary(_ array: [Foundation.Data]) -> SAPOData.BinaryList
  public static func ofOptionalBoolean(_ array: [Swift.Bool?]) -> SAPOData.BooleanList
  public static func ofOptionalChar(_ array: [Foundation.unichar?]) -> SAPOData.CharList
  public static func ofOptionalByte(_ array: [Swift.Int?]) -> SAPOData.ByteList
  public static func ofOptionalUnsignedByte(_ array: [Swift.Int?]) -> SAPOData.UnsignedByteList
  public static func ofOptionalShort(_ array: [Swift.Int?]) -> SAPOData.ShortList
  public static func ofOptionalUnsignedShort(_ array: [Swift.Int?]) -> SAPOData.UnsignedShortList
  public static func ofOptionalInt(_ array: [Swift.Int?]) -> SAPOData.IntList
  public static func ofOptionalLong(_ array: [Swift.Int64?]) -> SAPOData.LongList
  public static func ofOptionalInteger(_ array: [SAPOData.BigInteger?]) -> SAPOData.IntegerList
  public static func ofOptionalDecimal(_ array: [SAPOData.BigDecimal?]) -> SAPOData.DecimalList
  public static func ofOptionalFloat(_ array: [Swift.Float?]) -> SAPOData.FloatList
  public static func ofOptionalDouble(_ array: [Swift.Double?]) -> SAPOData.DoubleList
  public static func ofOptionalString(_ array: [Swift.String?]) -> SAPOData.StringList
  public static func ofOptionalBinary(_ array: [Foundation.Data?]) -> SAPOData.BinaryList
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BasicList_toArray {
  public static func ofBoolean(_ value: SAPOData.ListBase) -> [Swift.Bool]
  public static func ofChar(_ value: SAPOData.ListBase) -> [Foundation.unichar]
  public static func ofByte(_ value: SAPOData.ListBase) -> [Swift.Int]
  public static func ofUnsignedByte(_ value: SAPOData.ListBase) -> [Swift.Int]
  public static func ofShort(_ value: SAPOData.ListBase) -> [Swift.Int]
  public static func ofUnsignedShort(_ value: SAPOData.ListBase) -> [Swift.Int]
  public static func ofInt(_ value: SAPOData.ListBase) -> [Swift.Int]
  public static func ofLong(_ value: SAPOData.ListBase) -> [Swift.Int64]
  public static func ofInteger(_ value: SAPOData.ListBase) -> [SAPOData.BigInteger]
  public static func ofDecimal(_ value: SAPOData.ListBase) -> [SAPOData.BigDecimal]
  public static func ofFloat(_ value: SAPOData.ListBase) -> [Swift.Float]
  public static func ofDouble(_ value: SAPOData.ListBase) -> [Swift.Double]
  public static func ofString(_ value: SAPOData.ListBase) -> [Swift.String]
  public static func ofBinary(_ value: SAPOData.ListBase) -> [Foundation.Data]
  public static func ofOptionalBoolean(_ value: SAPOData.ListBase) -> [Swift.Bool?]
  public static func ofOptionalChar(_ value: SAPOData.ListBase) -> [Foundation.unichar?]
  public static func ofOptionalByte(_ value: SAPOData.ListBase) -> [Swift.Int?]
  public static func ofOptionalUnsignedByte(_ value: SAPOData.ListBase) -> [Swift.Int?]
  public static func ofOptionalShort(_ value: SAPOData.ListBase) -> [Swift.Int?]
  public static func ofOptionalUnsignedShort(_ value: SAPOData.ListBase) -> [Swift.Int?]
  public static func ofOptionalInt(_ value: SAPOData.ListBase) -> [Swift.Int?]
  public static func ofOptionalLong(_ value: SAPOData.ListBase) -> [Swift.Int64?]
  public static func ofOptionalInteger(_ value: SAPOData.ListBase) -> [SAPOData.BigInteger?]
  public static func ofOptionalDecimal(_ value: SAPOData.ListBase) -> [SAPOData.BigDecimal?]
  public static func ofOptionalFloat(_ value: SAPOData.ListBase) -> [Swift.Float?]
  public static func ofOptionalDouble(_ value: SAPOData.ListBase) -> [Swift.Double?]
  public static func ofOptionalString(_ value: SAPOData.ListBase) -> [Swift.String?]
  public static func ofOptionalBinary(_ value: SAPOData.ListBase) -> [Foundation.Data?]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectList_toArray<T> {
  public static func convert(_ value: SAPOData.ListBase) -> [T]
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectList_toArrayWithNulls<T> {
  public static func convert(_ value: SAPOData.ListBase) -> [T?]
  @objc deinit
}
prefix public func ! (value: SAPOData.QueryFilter) -> SAPOData.QueryFilter
public func && (left: SAPOData.QueryFilter, right: SAPOData.QueryFilter) -> SAPOData.QueryFilter
public func || (left: SAPOData.QueryFilter, right: SAPOData.QueryFilter) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Bool) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func == (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Bool) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func != (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func < (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func <= (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func > (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryFilter
public func >= (left: SAPOData.QueryValue, right: Swift.String) -> SAPOData.QueryFilter
public func + (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func + (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func - (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func * (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func / (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: SAPOData.DataValue) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: Swift.Int) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: Swift.Int64) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: SAPOData.BigInteger) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: SAPOData.BigDecimal) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: Swift.Float) -> SAPOData.QueryValue
public func % (left: SAPOData.QueryValue, right: Swift.Double) -> SAPOData.QueryValue
public enum CastRequired<T> where T : AnyObject {
  public static func from(_ value: Swift.AnyObject?) -> T
}
public enum CastOptional<T> where T : AnyObject {
  public static func from(_ value: Swift.AnyObject?) -> T?
}
@_inheritsConvenienceInitializers open class HTTPCookies : SAPOData.ObjectBase {
  public static let empty: SAPOData.HTTPCookies
  override public init()
  open func addAll(other: SAPOData.HTTPCookies)
  open func concurrent() -> SAPOData.HTTPCookies
  open func cookie(withName name: Swift.String) -> Swift.String?
  open func copy() -> SAPOData.HTTPCookies
  open func entries() -> SAPOData.StringMap.EntryList
  open func hasCookie(withName name: Swift.String) -> Swift.Bool
  open func keys() -> SAPOData.StringList
  open func removeAll()
  open func removeCookie(withName name: Swift.String) -> Swift.Bool
  open func setCookie(withName name: Swift.String, value: Swift.String)
  open var size: Swift.Int {
    get
  }
  open func sortedEntries() -> SAPOData.StringMap.EntryList
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class HTTPHandler : SAPOData.ObjectBase {
  override public init()
  open func close(request: SAPOData.HTTPRequest) throws
  open var hasCookieHandling: Swift.Bool {
    get
  }
  open func send(request: SAPOData.HTTPRequest) throws
  open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class HTTPHeaders : SAPOData.ObjectBase {
  public static let empty: SAPOData.HTTPHeaders
  override public init()
  open func addAll(other: SAPOData.HTTPHeaders)
  open func concurrent() -> SAPOData.HTTPHeaders
  open func copy() -> SAPOData.HTTPHeaders
  open class func emptyIfNull(headers: SAPOData.HTTPHeaders?) -> SAPOData.HTTPHeaders
  open func entries() -> SAPOData.StringMap.EntryList
  open func hasHeader(withName name: Swift.String) -> Swift.Bool
  open func header(withName name: Swift.String) -> Swift.String?
  open func keys() -> SAPOData.StringList
  open func parse(_ text: Swift.String, request: SAPOData.HTTPRequest?)
  open func removeAll()
  open func removeHeader(withName name: Swift.String) -> Swift.Bool
  open func setHeader(withName name: Swift.String, value: Swift.String)
  open var size: Swift.Int {
    get
  }
  open func sortedEntries() -> SAPOData.StringMap.EntryList
  override open func toString() -> Swift.String
  open func withClientCredentials(_ credentials: SAPOData.StructureBase) -> SAPOData.HTTPHeaders
  open func withCreateParameters(_ parameters: SAPOData.StructureBase) -> SAPOData.HTTPHeaders
  open func withData(header: Swift.String, value: Swift.AnyObject?) -> SAPOData.HTTPHeaders
  open func withDeleteParameters(_ parameters: SAPOData.StructureBase) -> SAPOData.HTTPHeaders
  open func withHeader(_ name: Swift.String, value: Swift.String) -> SAPOData.HTTPHeaders
  open func withUpdateParameters(_ parameters: SAPOData.StructureBase) -> SAPOData.HTTPHeaders
  @objc deinit
}
@_inheritsConvenienceInitializers open class HTTPRequest : SAPOData.ObjectBase {
  final public var requestBytes: SAPOData.ByteStream?
  final public var requestChars: SAPOData.CharStream?
  final public var requestText: Swift.String?
  final public var isActive: Swift.Bool
  final public var handler: SAPOData.HTTPHandler?
  final public var version: Swift.Int
  final public var method: Swift.String
  final public var url: Swift.String
  final public var username: Swift.String?
  final public var password: Swift.String?
  final public var compressRequest: Swift.Bool
  final public var compressResponse: Swift.Bool
  final public var streamRequest: Swift.Bool
  final public var streamResponse: Swift.Bool
  final public var unzipResponse: Swift.Bool
  final public var requestOptions: SAPOData.RequestOptions
  final public var requestCookies: SAPOData.HTTPCookies
  final public var requestHeaders: SAPOData.HTTPHeaders
  final public var responseCookies: SAPOData.HTTPCookies
  final public var responseHeaders: SAPOData.HTTPHeaders
  final public var status: Swift.Int
  final public var statusText: Swift.String
  override public init()
  open func close() throws
  open func enableTrace(serviceName: Swift.String?, traceRequest: Swift.Bool, traceHeaders: Swift.Bool, traceContent: Swift.Bool, prettyPrint: Swift.Bool)
  open var hasResponseBytes: Swift.Bool {
    get
  }
  open var hasResponseChars: Swift.Bool {
    get
  }
  open var hasResponseData: Swift.Bool {
    get
  }
  open var hasResponseText: Swift.Bool {
    get
  }
  open func login(username: Swift.String, password: Swift.String)
  open func open(method: Swift.String, url: Swift.String)
  open var prettyPrint: Swift.Bool {
    get
  }
  open func requestCookie(name: Swift.String) -> Swift.String?
  open var requestData: Foundation.Data? {
    get
    set(value)
  }
  open func requestHeader(name: Swift.String) -> Swift.String?
  open var responseBytes: SAPOData.ByteStream {
    get
    set(value)
  }
  open var responseChars: SAPOData.CharStream {
    get
    set(value)
  }
  open func responseCookie(name: Swift.String) -> Swift.String?
  open var responseData: Foundation.Data {
    get
    set(value)
  }
  open var responseDataCount: Swift.Int64 {
    get
  }
  open var responseGzipCount: Swift.Int64 {
    get
  }
  open func responseHeader(name: Swift.String) -> Swift.String?
  open var responseText: Swift.String {
    get
    set(value)
  }
  open func send() throws
  open func setRequestCookie(name: Swift.String, value: Swift.String)
  open func setRequestHeader(name: Swift.String, value: Swift.String)
  open func setResponseCookie(name: Swift.String, value: Swift.String)
  open func setResponseHeader(name: Swift.String, value: Swift.String)
  open var traceContent: Swift.Bool {
    get
  }
  open var traceHeaders: Swift.Bool {
    get
  }
  open var traceRequest: Swift.Bool {
    get
  }
  @objc deinit
}
extension BigDecimal : Swift.Equatable, Swift.Comparable {
}
public func + (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func - (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func * (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func / (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func % (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> SAPOData.BigDecimal
public func += (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func -= (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func *= (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func /= (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func %= (lhs: inout SAPOData.BigDecimal, rhs: SAPOData.BigDecimal)
public func > (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func >= (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func < (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func <= (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func != (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
public func == (lhs: SAPOData.BigDecimal, rhs: SAPOData.BigDecimal) -> Swift.Bool
extension BigInteger : Swift.Equatable, Swift.Comparable {
}
public func + (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func - (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func * (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func / (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func % (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> SAPOData.BigInteger
public func += (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func -= (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func *= (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func /= (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func %= (lhs: inout SAPOData.BigInteger, rhs: SAPOData.BigInteger)
public func > (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func >= (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func < (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func <= (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func != (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
public func == (lhs: SAPOData.BigInteger, rhs: SAPOData.BigInteger) -> Swift.Bool
@_hasMissingDesignatedInitializers public class AnyAsObject {
  public static func castError(_ error: Swift.Error?) -> Swift.AnyObject?
  public static func cast(_ value: Swift.AnyObject?) -> Swift.AnyObject
  @objc deinit
}
@_hasMissingDesignatedInitializers public class AnyIsObject {
  public static func check(_ value: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Assert {
  public static func error(_ message: Swift.String, _ cause: Swift.Error? = nil)
  public static func isFalse(_ condition: Swift.Bool, _ message: Swift.String)
  public static func isTrue(_ condition: Swift.Bool, _ message: Swift.String)
  public static func mustThrow(_ action: @escaping () throws -> Swift.Void, _ check: @escaping (Swift.Error) -> Swift.Bool, _ message: Swift.String)
  @objc deinit
}
@_inheritsConvenienceInitializers open class AssertException : SAPOData.FatalError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.AssertException
  @objc deinit
}
@_inheritsConvenienceInitializers open class AtomicBoolean : SAPOData.ObjectBase {
  override public init()
  open func andSet(newValue: Swift.Bool) -> Swift.Bool
  open func compareAndSet(expect: Swift.Bool, update: Swift.Bool) -> Swift.Bool
  open func get() -> Swift.Bool
  open func set(newValue: Swift.Bool)
  override open func toString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Base16Binary {
  public static func charAsInt(c: Foundation.unichar) -> Swift.Int
  public static func convert(_ text: Swift.String) -> Foundation.Data
  public static func format(_ data: Foundation.Data) -> Swift.String
  public static func intAsChar(i: Swift.Int) -> Foundation.unichar
  public static func parse(_ text: Swift.String) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Base64Binary {
  public static func charAsInt(c: Foundation.unichar) -> Swift.Int
  public static func convert(_ text: Swift.String) -> Foundation.Data
  public static func format(_ data: Foundation.Data) -> Swift.String
  public static func formatPadSafe(data: Foundation.Data, pad: Swift.Bool, safe: Swift.Bool) -> Swift.String
  public static func intAsChar(i: Swift.Int, safe: Swift.Bool) -> Foundation.unichar
  public static func parse(_ text: Swift.String) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BinaryConstant {
  public static let empty: Foundation.Data
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BinaryFunction {
  public static func byteAt(_ value: Foundation.Data, index: Swift.Int) -> Swift.Int
  public static func compareTo(_ value: Foundation.Data, other: Foundation.Data) -> Swift.Int
  public static func hashCode(_ value: Foundation.Data) -> Swift.Int
  public static func indexOf(_ value: Foundation.Data, find: Foundation.Data, start: Swift.Int = (0 as Int)) -> Swift.Int
  public static func slice(_ value: Foundation.Data, start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> Foundation.Data
  public static func toString(_ value: Foundation.Data) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BinaryOperator {
  public static func compare(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Int
  public static func equal(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func greaterEqual(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func greaterThan(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func lessEqual(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func lessThan(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  public static func notEqual(_ left: Foundation.Data, _ right: Foundation.Data) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class BinarySemaphore : SAPOData.ObjectBase {
  override public init()
  open func acquire()
  open func release()
  open func tryAcquire(timeout: Swift.Int) -> Swift.Bool
  @objc deinit
}
final public class BooleanArray : SAPOData.ObjectBase {
  public init(size: Swift.Int)
  final public func item(at index: Swift.Int) -> Swift.Bool
  final public var length: Swift.Int {
    get
  }
  final public func update(at index: Swift.Int, item value: Swift.Bool)
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BooleanFunction {
  public static func toString(_ value: Swift.Bool) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class BooleanOperator {
  public static func compare(_ left: Swift.Bool, _ right: Swift.Bool) -> Swift.Int
  public static func equal(_ left: Swift.Bool, _ right: Swift.Bool) -> Swift.Bool
  public static func notEqual(_ left: Swift.Bool, _ right: Swift.Bool) -> Swift.Bool
  @objc deinit
}
final public class ByteBuffer : SAPOData.ObjectBase {
  @objc deinit
  public init(capacity: Swift.Int = (16 as Int))
  final public func add(_ value: Swift.Int)
  final public func append(_ data: Foundation.Data?)
  final public func clear()
  final public func item(at index: Swift.Int) -> Swift.Int
  final public var length: Swift.Int {
    get
    set(value)
  }
  final public func range(start: Swift.Int, end: Swift.Int) -> Foundation.Data
  final public func reverse()
  final public func setRange(index: Swift.Int, value: Foundation.Data)
  final public func toBinary() -> Foundation.Data
  final public func update(at index: Swift.Int, item value: Swift.Int)
  override public init()
}
@_hasMissingDesignatedInitializers public class ByteConstant {
  public static let minValue: Swift.Int
  public static let maxValue: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ByteFunction {
  public static func toString(_ value: Swift.Int, radix: Swift.Int = (10 as Int)) -> Swift.String
  public static func toUnsigned(_ value: Swift.Int) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ByteOperator {
  public static func add(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func compare(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func divide(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func equal(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func multiply(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func negate(_ value: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func remainder(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func subtract(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers open class CastException : SAPOData.FatalError {
  override public init()
  open class func cannotCast(_ value: Swift.AnyObject?, type: Swift.String) -> SAPOData.CastException
  open class func withMessage(_ message: Swift.String) -> SAPOData.CastException
  @objc deinit
}
final public class CharBuffer : SAPOData.ObjectBase {
  @objc deinit
  public init(capacity: Swift.Int = (16 as Int))
  final public func add(_ value: Foundation.unichar)
  final public func append(_ text: Swift.String?)
  final public func clear()
  final public func item(at index: Swift.Int) -> Foundation.unichar
  final public class func join2(_ text1: Swift.String?, _ text2: Swift.String?) -> Swift.String
  final public class func join3(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?) -> Swift.String
  final public class func join4(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?) -> Swift.String
  final public class func join5(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?) -> Swift.String
  final public class func join6(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?, _ text6: Swift.String?) -> Swift.String
  final public class func join7(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?, _ text6: Swift.String?, _ text7: Swift.String?) -> Swift.String
  final public class func join8(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?, _ text6: Swift.String?, _ text7: Swift.String?, _ text8: Swift.String?) -> Swift.String
  final public class func join9(_ text1: Swift.String?, _ text2: Swift.String?, _ text3: Swift.String?, _ text4: Swift.String?, _ text5: Swift.String?, _ text6: Swift.String?, _ text7: Swift.String?, _ text8: Swift.String?, _ text9: Swift.String?) -> Swift.String
  final public var length: Swift.Int {
    get
    set(value)
  }
  final public func range(start: Swift.Int, end: Swift.Int) -> Swift.String
  final public func reverse()
  final public func setRange(index: Swift.Int, value: Swift.String)
  override final public func toString() -> Swift.String
  final public func update(at index: Swift.Int, item value: Foundation.unichar)
  override public init()
}
@_hasMissingDesignatedInitializers public class CharFunction {
  public static func isDigit(_ value: Foundation.unichar) -> Swift.Bool
  public static func isHexDigit(_ value: Foundation.unichar) -> Swift.Bool
  public static func isLowerCase(_ value: Foundation.unichar) -> Swift.Bool
  public static func isUnreservedInURI(_ value: Foundation.unichar) -> Swift.Bool
  public static func isUpperCase(_ value: Foundation.unichar) -> Swift.Bool
  public static func isWhitespace(_ value: Foundation.unichar) -> Swift.Bool
  public static func toLowerCase(_ value: Foundation.unichar) -> Foundation.unichar
  public static func toString(_ value: Foundation.unichar) -> Swift.String
  public static func toUpperCase(_ value: Foundation.unichar) -> Foundation.unichar
  public static func unicodePlus(_ value: Foundation.unichar) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CharOperator {
  public static func compare(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Int
  public static func equal(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func greaterEqual(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func greaterThan(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func lessEqual(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func lessThan(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  public static func notEqual(_ left: Foundation.unichar, _ right: Foundation.unichar) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class CheckProperty {
  public static func isDefined<T>(_ owner: Swift.AnyClass, _ name: Swift.String, _ value: T?) -> T
  public static func isDefined<T>(_ owner: Swift.AnyObject, _ name: Swift.String, _ value: T?) -> T
  @objc deinit
}
@_inheritsConvenienceInitializers open class Comparer : SAPOData.ObjectBase {
  public static let undefined: SAPOData.Comparer
  override public init()
  open func compare(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Int
  @objc deinit
}
open class ConditionVariable : SAPOData.ObjectBase {
  public init(mutex: SAPOData.ReentrantMutex)
  open func await()
  open func signal()
  override public init()
  @objc deinit
}
open class CountingSemaphore : SAPOData.ObjectBase {
  public init(permits: Swift.Int)
  open func acquire()
  open func release()
  open func tryAcquire(timeout: Swift.Int) -> Swift.Bool
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DebugAddress {
  public static func at(_ value: Swift.AnyObject?) throws -> Swift.String
  public static func of(_ value: Swift.AnyObject?) throws -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DebugConsole {
  public static func append(file: Swift.String)
  public static func captured() -> Swift.String
  public static func close()
  public static func debug(message: Swift.String, cause: Swift.Error? = nil, dump: Swift.Bool = false)
  public static func dumpStack(message: Swift.String = "Stack Dump")
  public static func error(message: Swift.String, cause: Swift.Error? = nil, dump: Swift.Bool = false)
  public static func flush()
  public static func info(message: Swift.String, cause: Swift.Error? = nil, dump: Swift.Bool = false)
  public static func log(message: Swift.String, cause: Swift.Error? = nil, dump: Swift.Bool = false)
  public static func mainException(_ cause: Swift.Error)
  public static func open(file: Swift.String)
  public static func startCapture()
  public static func stopCapture()
  public static func trace(message: Swift.String, cause: Swift.Error? = nil, dump: Swift.Bool = false)
  public static func traceEx(cause: Swift.Error)
  public static func traceIn(_ method: Swift.String)
  public static func traceOut(_ method: Swift.String)
  public static func warn(message: Swift.String, cause: Swift.Error? = nil, dump: Swift.Bool = false)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecimalConstant {
  public static let zero: SAPOData.BigDecimal
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecimalFunction {
  public static func fromByte(_ value: Swift.Int) -> SAPOData.BigDecimal
  public static func fromDouble(_ value: Swift.Double) -> SAPOData.BigDecimal
  public static func fromFloat(_ value: Swift.Float) -> SAPOData.BigDecimal
  public static func fromInt(_ value: Swift.Int) -> SAPOData.BigDecimal
  public static func fromInteger(_ value: SAPOData.BigInteger) -> SAPOData.BigDecimal
  public static func fromLong(_ value: Swift.Int64) -> SAPOData.BigDecimal
  public static func fromShort(_ value: Swift.Int) -> SAPOData.BigDecimal
  public static func toByte(_ value: SAPOData.BigDecimal) -> Swift.Int
  public static func toDouble(_ value: SAPOData.BigDecimal) -> Swift.Double
  public static func toFloat(_ value: SAPOData.BigDecimal) -> Swift.Float
  public static func toInt(_ value: SAPOData.BigDecimal) -> Swift.Int
  public static func toInteger(_ value: SAPOData.BigDecimal) -> SAPOData.BigInteger
  public static func toLong(_ value: SAPOData.BigDecimal) -> Swift.Int64
  public static func toShort(_ value: SAPOData.BigDecimal) -> Swift.Int
  public static func toString(_ value: SAPOData.BigDecimal) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DecimalOperator {
  public static func add(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func compare(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Int
  public static func divide(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func equal(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func greaterEqual(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func greaterThan(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func lessEqual(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func lessThan(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func multiply(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func negate(_ value: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func notEqual(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func remainder(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  public static func subtract(_ left: SAPOData.BigDecimal, _ right: SAPOData.BigDecimal) -> SAPOData.BigDecimal
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleConstant {
  public static func nan() -> Swift.Double
  public static func negativeInfinity() -> Swift.Double
  public static func positiveInfinity() -> Swift.Double
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleFunction {
  public static func byteValue(_ value: Swift.Double) -> Swift.Int
  public static func intValue(_ value: Swift.Double) -> Swift.Int
  public static func isFinite(_ value: Swift.Double) -> Swift.Bool
  public static func isInfinite(_ value: Swift.Double) -> Swift.Bool
  public static func isNaN(_ value: Swift.Double) -> Swift.Bool
  public static func longValue(_ value: Swift.Double) -> Swift.Int64
  public static func shortValue(_ value: Swift.Double) -> Swift.Int
  public static func toExponential(_ value: Swift.Double, fractionDigits: Swift.Int = (16 as Int)) -> Swift.String
  public static func toFixed(_ value: Swift.Double, fractionDigits: Swift.Int) -> Swift.String
  public static func toString(_ value: Swift.Double) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class DoubleOperator {
  public static func add(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  public static func compare(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Int
  public static func divide(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  public static func equal(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func lessThan(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func multiply(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  public static func negate(_ value: Swift.Double) -> Swift.Double
  public static func notEqual(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Bool
  public static func remainder(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  public static func subtract(_ left: Swift.Double, _ right: Swift.Double) -> Swift.Double
  @objc deinit
}
open class EmptyList : SAPOData.UntypedList {
  override public init()
  open func append(item: Swift.AnyObject?)
  open func appendAll(list: SAPOData.UntypedList)
  open func appendRange(list: SAPOData.UntypedList, start: Swift.Int, end: Swift.Int)
  override open func insert(at index: Swift.Int, item: Swift.AnyObject?)
  override open func insert(at index: Swift.Int, contentsOf list: SAPOData.UntypedList)
  override open var isMutable: Swift.Bool {
    get
  }
  override open func pop() -> Swift.AnyObject?
  override open func push(_ item: Swift.AnyObject?) -> Swift.Int
  override open func remove(at index: Swift.Int)
  override open func removeAll()
  override open func removeRange(start: Swift.Int, end: Swift.Int)
  override open func reverse()
  override open func shift() -> Swift.AnyObject?
  override open func sort()
  override open func sortWith(comparer: SAPOData.Comparer)
  override open func update(at index: Swift.Int, item: Swift.AnyObject?)
  override public init(capacity: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class EmptyListException : SAPOData.FatalError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.EmptyListException
  @objc deinit
}
open class EmptyMapFromObject : SAPOData.MapFromObject {
  override public init()
  override open var isMutable: Swift.Bool {
    get
  }
  override open func removeAll()
  override open func removeValue(forKey key: Swift.AnyObject?) -> Swift.Bool
  override open func update(key: Swift.AnyObject?, value: Swift.AnyObject?)
  @objc deinit
  override public init(capacity: Swift.Int)
}
open class EmptyMapFromString : SAPOData.MapFromString {
  override public init()
  override open var isMutable: Swift.Bool {
    get
  }
  override open func removeAll()
  override open func removeValue(forKey key: Swift.String) -> Swift.Bool
  override open func update(key: Swift.String, value: Swift.AnyObject?)
  override public init(capacity: Swift.Int)
  @objc deinit
}
open class EmptySet : SAPOData.UntypedSet {
  override public init()
  override open func insert(_ value: Swift.AnyObject?)
  override open var isMutable: Swift.Bool {
    get
  }
  override open func remove(_ value: Swift.AnyObject?) -> Swift.Bool
  override open func removeAll()
  override public init(capacity: Swift.Int)
  @objc deinit
}
@_inheritsConvenienceInitializers open class Equality : SAPOData.ObjectBase {
  public static let undefined: SAPOData.Equality
  override public init()
  open func equal(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
open class ErrorBase : Swift.Error, Swift.CustomStringConvertible, Swift.CustomDebugStringConvertible, Foundation.LocalizedError {
  public var callStack: [Swift.String]?
  public var description: Swift.String {
    get
  }
  public var debugDescription: Swift.String {
    get
  }
  public var errorDescription: Swift.String? {
    get
  }
  public var failureReason: Swift.String? {
    get
  }
  public func captureStack()
  final public var cause: Swift.Error?
  final public var message: Swift.String?
  public init()
  open func toString() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ErrorFunction {
  public static func equal(_ left: Swift.Error?, _ right: Swift.Error?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Error?, _ right: Swift.Error) -> Swift.Bool
  public static func isNull(_ value: Swift.Error?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Error?, _ right: Swift.Error?) -> Swift.Bool
  public static func notNull(_ value: Swift.Error?) -> Swift.Bool
  public static func nullValue() -> Swift.Error?
  public static func toString(_ value: Swift.Error?) -> Swift.String
  public static func value(_ value: Swift.Error?) -> Swift.Error
  public static func withValue(_ value: Swift.Error) -> Swift.Error?
  @objc deinit
}
@_inheritsConvenienceInitializers open class FatalError : SAPOData.ErrorBase {
  public func throwAny() -> Swift.AnyObject
  public func throwVoid()
  override public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FloatConstant {
  public static func nan() -> Swift.Float
  public static func negativeInfinity() -> Swift.Float
  public static func positiveInfinity() -> Swift.Float
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FloatFunction {
  public static func byteValue(_ value: Swift.Float) -> Swift.Int
  public static func intValue(_ value: Swift.Float) -> Swift.Int
  public static func isFinite(_ value: Swift.Float) -> Swift.Bool
  public static func isInfinite(_ value: Swift.Float) -> Swift.Bool
  public static func isNaN(_ value: Swift.Float) -> Swift.Bool
  public static func longValue(_ value: Swift.Float) -> Swift.Int64
  public static func shortValue(_ value: Swift.Float) -> Swift.Int
  public static func toExponential(_ value: Swift.Float, fractionDigits: Swift.Int = (8 as Int)) -> Swift.String
  public static func toFixed(_ value: Swift.Float, fractionDigits: Swift.Int) -> Swift.String
  public static func toString(_ value: Swift.Float) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FloatOperator {
  public static func add(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  public static func compare(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Int
  public static func divide(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  public static func equal(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func lessThan(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func multiply(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  public static func negate(_ value: Swift.Float) -> Swift.Float
  public static func notEqual(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Bool
  public static func remainder(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  public static func subtract(_ left: Swift.Float, _ right: Swift.Float) -> Swift.Float
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class GUID : SAPOData.ObjectBase {
  open class func fromBinary(data: Foundation.Data) -> SAPOData.GUID?
  open class func fromString(text: Swift.String) -> SAPOData.GUID?
  open class func newRandom() -> SAPOData.GUID
  open func toBinary() -> Foundation.Data
  override open func toString() -> Swift.String
  open func toString32() -> Swift.String
  open func toString36() -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Ignore {
  public static func valueOf_any(_ value: Swift.AnyObject?)
  public static func valueOf_binary(_ value: Foundation.Data)
  public static func valueOf_boolean(_ value: Swift.Bool)
  public static func valueOf_byte(_ value: Swift.Int)
  public static func valueOf_char(_ value: Foundation.unichar)
  public static func valueOf_decimal(_ value: SAPOData.BigDecimal)
  public static func valueOf_double(_ value: Swift.Double)
  public static func valueOf_error(_ value: Swift.Error?)
  public static func valueOf_float(_ value: Swift.Float)
  public static func valueOf_int(_ value: Swift.Int)
  public static func valueOf_integer(_ value: SAPOData.BigInteger)
  public static func valueOf_long(_ value: Swift.Int64)
  public static func valueOf_nullableBinary(_ value: Foundation.Data?)
  public static func valueOf_nullableBoolean(_ value: Swift.Bool?)
  public static func valueOf_nullableByte(_ value: Swift.Int?)
  public static func valueOf_nullableChar(_ value: Foundation.unichar?)
  public static func valueOf_nullableDecimal(_ value: SAPOData.BigDecimal?)
  public static func valueOf_nullableDouble(_ value: Swift.Double?)
  public static func valueOf_nullableFloat(_ value: Swift.Float?)
  public static func valueOf_nullableInt(_ value: Swift.Int?)
  public static func valueOf_nullableInteger(_ value: SAPOData.BigInteger?)
  public static func valueOf_nullableLong(_ value: Swift.Int64?)
  public static func valueOf_nullableShort(_ value: Swift.Int?)
  public static func valueOf_nullableString(_ value: Swift.String?)
  public static func valueOf_short(_ value: Swift.Int)
  public static func valueOf_string(_ value: Swift.String)
  @objc deinit
}
final public class IntArray : SAPOData.ObjectBase {
  public init(size: Swift.Int)
  final public func item(at index: Swift.Int) -> Swift.Int
  final public var length: Swift.Int {
    get
  }
  final public func update(at index: Swift.Int, item value: Swift.Int)
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class IntConstant {
  public static let minValue: Swift.Int
  public static let maxValue: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntFunction {
  public static func fromBytes(_ a: Swift.Int, _ b: Swift.Int, _ c: Swift.Int, _ d: Swift.Int) -> Swift.Int
  public static func toString(_ value: Swift.Int, radix: Swift.Int = (10 as Int)) -> Swift.String
  public static func unicodePlus(_ value: Swift.Int) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntOperator {
  public static func prefixDecrement(_ value: inout Swift.Int) -> Swift.Int
  public static func prefixIncrement(_ value: inout Swift.Int) -> Swift.Int
  public static func postfixDecrement(_ value: inout Swift.Int) -> Swift.Int
  public static func postfixIncrement(_ value: inout Swift.Int) -> Swift.Int
  public static func add(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func compare(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func divide(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func equal(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func multiply(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func negate(_ value: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func remainder(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func subtract(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntegerConstant {
  public static let zero: SAPOData.BigInteger
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntegerFunction {
  public static func fromByte(_ value: Swift.Int) -> SAPOData.BigInteger
  public static func fromDecimal(_ value: SAPOData.BigDecimal) -> SAPOData.BigInteger
  public static func fromDouble(_ value: Swift.Double) -> SAPOData.BigInteger
  public static func fromFloat(_ value: Swift.Float) -> SAPOData.BigInteger
  public static func fromInt(_ value: Swift.Int) -> SAPOData.BigInteger
  public static func fromLong(_ value: Swift.Int64) -> SAPOData.BigInteger
  public static func fromShort(_ value: Swift.Int) -> SAPOData.BigInteger
  public static func toByte(_ value: SAPOData.BigInteger) -> Swift.Int
  public static func toDecimal(_ value: SAPOData.BigInteger) -> SAPOData.BigDecimal
  public static func toDouble(_ value: SAPOData.BigInteger) -> Swift.Double
  public static func toFloat(_ value: SAPOData.BigInteger) -> Swift.Float
  public static func toInt(_ value: SAPOData.BigInteger) -> Swift.Int
  public static func toLong(_ value: SAPOData.BigInteger) -> Swift.Int64
  public static func toShort(_ value: SAPOData.BigInteger) -> Swift.Int
  public static func toString(_ value: SAPOData.BigInteger) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class IntegerOperator {
  public static func add(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func compare(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Int
  public static func divide(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func equal(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func greaterEqual(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func greaterThan(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func lessEqual(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func lessThan(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func multiply(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func negate(_ value: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func notEqual(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func remainder(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  public static func subtract(_ left: SAPOData.BigInteger, _ right: SAPOData.BigInteger) -> SAPOData.BigInteger
  @objc deinit
}
@_inheritsConvenienceInitializers open class ListIndexException : SAPOData.FatalError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.ListIndexException
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongConstant {
  public static let minValue: Swift.Int64
  public static let maxValue: Swift.Int64
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongFunction {
  public static func toString(_ value: Swift.Int64, radix: Swift.Int = (10 as Int)) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class LongOperator {
  public static func add(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func compare(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int
  public static func divide(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func equal(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func lessThan(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func multiply(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func negate(_ value: Swift.Int64) -> Swift.Int64
  public static func notEqual(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Bool
  public static func remainder(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  public static func subtract(_ left: Swift.Int64, _ right: Swift.Int64) -> Swift.Int64
  @objc deinit
}
@_inheritsConvenienceInitializers open class MapFromObject : SAPOData.UntypedMap {
  override public init()
  public init(capacity: Swift.Int)
  override open func containsValue(forKey key: Swift.AnyObject?) -> Swift.Bool
  override open func copyKeysTo(list: SAPOData.UntypedList)
  override open func copyValuesTo(list: SAPOData.UntypedList)
  override open var isEmpty: Swift.Bool {
    get
  }
  override open var isMutable: Swift.Bool {
    get
  }
  open func iteratorFromObject() -> SAPOData.MapIteratorFromObject
  override open func keys() -> SAPOData.UntypedList
  override open func removeAll()
  override open func removeValue(forKey key: Swift.AnyObject?) -> Swift.Bool
  override open func requiredValue(forKey key: Swift.AnyObject?) -> Swift.AnyObject
  override open var size: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  override open func update(key: Swift.AnyObject?, value: Swift.AnyObject?)
  override open func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.AnyObject?)
  override open func value(forKey key: Swift.AnyObject?) -> Swift.AnyObject?
  override open func values() -> SAPOData.UntypedList
  @objc deinit
}
@_inheritsConvenienceInitializers open class MapFromString : SAPOData.UntypedMap {
  override public init()
  public init(capacity: Swift.Int)
  override open func containsValue(forKey key: Swift.AnyObject?) -> Swift.Bool
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  override open func copyKeysTo(list: SAPOData.UntypedList)
  override open func copyValuesTo(list: SAPOData.UntypedList)
  override open var isEmpty: Swift.Bool {
    get
  }
  override open var isMutable: Swift.Bool {
    get
  }
  open func iteratorFromString() -> SAPOData.MapIteratorFromString
  override open func keys() -> SAPOData.UntypedList
  override open func removeAll()
  override open func removeValue(forKey key: Swift.AnyObject?) -> Swift.Bool
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  override open func requiredValue(forKey key: Swift.AnyObject?) -> Swift.AnyObject
  open func requiredValue(forKey key: Swift.String) -> Swift.AnyObject
  override open var size: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  override open func update(key: Swift.AnyObject?, value: Swift.AnyObject?)
  open func update(key: Swift.String, value: Swift.AnyObject?)
  override open func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.AnyObject?)
  open func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.String)
  override open func value(forKey key: Swift.AnyObject?) -> Swift.AnyObject?
  open func value(forKey key: Swift.String) -> Swift.AnyObject?
  override open func values() -> SAPOData.UntypedList
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class MapIteratorFromObject : SAPOData.ObjectBase {
  final public var key: Swift.AnyObject? {
    get
  }
  final public func next() throws -> Swift.Bool
  final public var value: Swift.AnyObject? {
    get
  }
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers final public class MapIteratorFromString : SAPOData.ObjectBase {
  final public var key: Swift.String {
    get
  }
  final public func next() throws -> Swift.Bool
  final public var value: Swift.AnyObject? {
    get
  }
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class MissingEntryException : SAPOData.FatalError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.MissingEntryException
  @objc deinit
}
@_inheritsConvenienceInitializers open class NotUniqueException : SAPOData.FatalError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.NotUniqueException
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectAsAny {
  public static func castError(_ error: Swift.Error?) -> Swift.AnyObject?
  public static func cast(_ value: Swift.AnyObject?) -> Swift.AnyObject?
  @objc deinit
}
open class ObjectBase : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
  public init()
  open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class ObjectFactory : SAPOData.ObjectBase {
  open func createWithDecoder(decoder: Swift.Decoder) throws -> Swift.AnyObject
  public static func with(create: @escaping () -> Swift.AnyObject, createWithDecoder: @escaping (Swift.Decoder) throws -> Swift.AnyObject) -> SAPOData.ObjectFactory
  override public init()
  open func create() -> Swift.AnyObject
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectFunction {
  public static func toJSON(_ value: Swift.AnyObject) -> Swift.String
  public static func toString(_ value: Swift.AnyObject) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectIsAny {
  public static func check(_ value: Swift.AnyObject?) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ObjectOperator {
  public static func equal(_ left: Swift.AnyObject, _ right: Swift.AnyObject) -> Swift.Bool
  public static func notEqual(_ left: Swift.AnyObject, _ right: Swift.AnyObject) -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalBinary {
  public static func equal(_ left: Foundation.Data?, _ right: Foundation.Data?) -> Swift.Bool
  public static func hasValue(_ left: Foundation.Data?, _ right: Foundation.Data) -> Swift.Bool
  public static func isNull(_ value: Foundation.Data?) -> Swift.Bool
  public static func lengthWithDefault(_ value: Foundation.Data?, defaultLength: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Foundation.Data?, _ right: Foundation.Data?) -> Swift.Bool
  public static func notNull(_ value: Foundation.Data?) -> Swift.Bool
  public static func nullValue() -> Foundation.Data?
  public static func toString(_ value: Foundation.Data?) -> Swift.String
  public static func value(_ value: Foundation.Data?) -> Foundation.Data
  public static func withValue(_ value: Foundation.Data) -> Foundation.Data?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalBoolean {
  public static func equal(_ left: Swift.Bool?, _ right: Swift.Bool?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Bool?, _ right: Swift.Bool) -> Swift.Bool
  public static func isNull(_ value: Swift.Bool?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Bool?, _ right: Swift.Bool?) -> Swift.Bool
  public static func notNull(_ value: Swift.Bool?) -> Swift.Bool
  public static func nullValue() -> Swift.Bool?
  public static func toString(_ value: Swift.Bool?) -> Swift.String
  public static func value(_ value: Swift.Bool?) -> Swift.Bool
  public static func withValue(_ value: Swift.Bool) -> Swift.Bool?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalByte {
  public static func equal(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Int?, _ right: Swift.Int) -> Swift.Bool
  public static func isNull(_ value: Swift.Int?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func notNull(_ value: Swift.Int?) -> Swift.Bool
  public static func nullValue() -> Swift.Int?
  public static func toString(_ value: Swift.Int?) -> Swift.String
  public static func value(_ value: Swift.Int?) -> Swift.Int
  public static func withValue(_ value: Swift.Int) -> Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalChar {
  public static func equal(_ left: Foundation.unichar?, _ right: Foundation.unichar?) -> Swift.Bool
  public static func hasValue(_ left: Foundation.unichar?, _ right: Foundation.unichar) -> Swift.Bool
  public static func isNull(_ value: Foundation.unichar?) -> Swift.Bool
  public static func notEqual(_ left: Foundation.unichar?, _ right: Foundation.unichar?) -> Swift.Bool
  public static func notNull(_ value: Foundation.unichar?) -> Swift.Bool
  public static func nullValue() -> Foundation.unichar?
  public static func toString(_ value: Foundation.unichar?) -> Swift.String
  public static func value(_ value: Foundation.unichar?) -> Foundation.unichar
  public static func withValue(_ value: Foundation.unichar) -> Foundation.unichar?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalDecimal {
  public static func equal(_ left: SAPOData.BigDecimal?, _ right: SAPOData.BigDecimal?) -> Swift.Bool
  public static func hasValue(_ left: SAPOData.BigDecimal?, _ right: SAPOData.BigDecimal) -> Swift.Bool
  public static func isNull(_ value: SAPOData.BigDecimal?) -> Swift.Bool
  public static func notEqual(_ left: SAPOData.BigDecimal?, _ right: SAPOData.BigDecimal?) -> Swift.Bool
  public static func notNull(_ value: SAPOData.BigDecimal?) -> Swift.Bool
  public static func nullValue() -> SAPOData.BigDecimal?
  public static func toString(_ value: SAPOData.BigDecimal?) -> Swift.String
  public static func value(_ value: SAPOData.BigDecimal?) -> SAPOData.BigDecimal
  public static func withValue(_ value: SAPOData.BigDecimal) -> SAPOData.BigDecimal?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalDouble {
  public static func equal(_ left: Swift.Double?, _ right: Swift.Double?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Double?, _ right: Swift.Double) -> Swift.Bool
  public static func isNull(_ value: Swift.Double?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Double?, _ right: Swift.Double?) -> Swift.Bool
  public static func notNull(_ value: Swift.Double?) -> Swift.Bool
  public static func nullValue() -> Swift.Double?
  public static func toString(_ value: Swift.Double?) -> Swift.String
  public static func value(_ value: Swift.Double?) -> Swift.Double
  public static func withValue(_ value: Swift.Double) -> Swift.Double?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalFloat {
  public static func equal(_ left: Swift.Float?, _ right: Swift.Float?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Float?, _ right: Swift.Float) -> Swift.Bool
  public static func isNull(_ value: Swift.Float?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Float?, _ right: Swift.Float?) -> Swift.Bool
  public static func notNull(_ value: Swift.Float?) -> Swift.Bool
  public static func nullValue() -> Swift.Float?
  public static func toString(_ value: Swift.Float?) -> Swift.String
  public static func value(_ value: Swift.Float?) -> Swift.Float
  public static func withValue(_ value: Swift.Float) -> Swift.Float?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalInt {
  public static func equal(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Int?, _ right: Swift.Int) -> Swift.Bool
  public static func isNull(_ value: Swift.Int?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func notNull(_ value: Swift.Int?) -> Swift.Bool
  public static func nullValue() -> Swift.Int?
  public static func toString(_ value: Swift.Int?) -> Swift.String
  public static func value(_ value: Swift.Int?) -> Swift.Int
  public static func withValue(_ value: Swift.Int) -> Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalInteger {
  public static func equal(_ left: SAPOData.BigInteger?, _ right: SAPOData.BigInteger?) -> Swift.Bool
  public static func hasValue(_ left: SAPOData.BigInteger?, _ right: SAPOData.BigInteger) -> Swift.Bool
  public static func isNull(_ value: SAPOData.BigInteger?) -> Swift.Bool
  public static func notEqual(_ left: SAPOData.BigInteger?, _ right: SAPOData.BigInteger?) -> Swift.Bool
  public static func notNull(_ value: SAPOData.BigInteger?) -> Swift.Bool
  public static func nullValue() -> SAPOData.BigInteger?
  public static func toString(_ value: SAPOData.BigInteger?) -> Swift.String
  public static func value(_ value: SAPOData.BigInteger?) -> SAPOData.BigInteger
  public static func withValue(_ value: SAPOData.BigInteger) -> SAPOData.BigInteger?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalLong {
  public static func equal(_ left: Swift.Int64?, _ right: Swift.Int64?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Int64?, _ right: Swift.Int64) -> Swift.Bool
  public static func isNull(_ value: Swift.Int64?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Int64?, _ right: Swift.Int64?) -> Swift.Bool
  public static func notNull(_ value: Swift.Int64?) -> Swift.Bool
  public static func nullValue() -> Swift.Int64?
  public static func toString(_ value: Swift.Int64?) -> Swift.String
  public static func value(_ value: Swift.Int64?) -> Swift.Int64
  public static func withValue(_ value: Swift.Int64) -> Swift.Int64?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalObject {
  public static func equal(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  public static func hasValue(_ left: Swift.AnyObject?, _ right: Swift.AnyObject) -> Swift.Bool
  public static func isNull(_ value: Swift.AnyObject?) -> Swift.Bool
  public static func notEqual(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Bool
  public static func notNull(_ value: Swift.AnyObject?) -> Swift.Bool
  public static func nullValue() -> Swift.AnyObject?
  public static func toJSON(_ value: Swift.AnyObject?) -> Swift.String
  public static func toString(_ value: Swift.AnyObject?) -> Swift.String
  public static func value(_ value: Swift.AnyObject?) -> Swift.AnyObject
  public static func withValue(_ value: Swift.AnyObject) -> Swift.AnyObject?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalShort {
  public static func equal(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func hasValue(_ left: Swift.Int?, _ right: Swift.Int) -> Swift.Bool
  public static func isNull(_ value: Swift.Int?) -> Swift.Bool
  public static func notEqual(_ left: Swift.Int?, _ right: Swift.Int?) -> Swift.Bool
  public static func notNull(_ value: Swift.Int?) -> Swift.Bool
  public static func nullValue() -> Swift.Int?
  public static func toString(_ value: Swift.Int?) -> Swift.String
  public static func value(_ value: Swift.Int?) -> Swift.Int
  public static func withValue(_ value: Swift.Int) -> Swift.Int?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class OptionalString {
  public static func equal(_ left: Swift.String?, _ right: Swift.String?) -> Swift.Bool
  public static func hasValue(_ left: Swift.String?, _ right: Swift.String) -> Swift.Bool
  public static func isNull(_ value: Swift.String?) -> Swift.Bool
  public static func lengthWithDefault(_ value: Swift.String?, defaultLength: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Swift.String?, _ right: Swift.String?) -> Swift.Bool
  public static func notNull(_ value: Swift.String?) -> Swift.Bool
  public static func nullValue() -> Swift.String?
  public static func toString(_ value: Swift.String?) -> Swift.String
  public static func value(_ value: Swift.String?) -> Swift.String
  public static func withValue(_ value: Swift.String) -> Swift.String?
  @objc deinit
}
@_inheritsConvenienceInitializers open class ReadWriteMutex : SAPOData.ObjectBase {
  override public init()
  open func beginRead()
  open func beginWrite()
  open func endRead()
  open func endWrite()
  open func readLock(action: @escaping () throws -> Swift.Void) throws
  open func writeLock(action: @escaping () throws -> Swift.Void) throws
  @objc deinit
}
@_inheritsConvenienceInitializers open class ReentrantMutex : SAPOData.ObjectBase {
  override public init()
  open func lock()
  open func tryLock() -> Swift.Bool
  open func unlock()
  open func withLock(action: @escaping () throws -> Swift.Void) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ShortConstant {
  public static let minValue: Swift.Int
  public static let maxValue: Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ShortFunction {
  public static func fromBytes(_ a: Swift.Int, _ b: Swift.Int) -> Swift.Int
  public static func toString(_ value: Swift.Int, radix: Swift.Int = (10 as Int)) -> Swift.String
  public static func toUnsigned(_ value: Swift.Int) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ShortOperator {
  public static func add(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func compare(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func divide(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func equal(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func greaterThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func lessThan(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func multiply(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func negate(_ value: Swift.Int) -> Swift.Int
  public static func notEqual(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Bool
  public static func remainder(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  public static func subtract(_ left: Swift.Int, _ right: Swift.Int) -> Swift.Int
  @objc deinit
}
@_inheritsConvenienceInitializers open class StringComparer : SAPOData.Comparer {
  public static let caseSensitive: SAPOData.Comparer
  public static let caseInsensitive: SAPOData.Comparer
  override public init()
  override open func compare(_ left: Swift.AnyObject?, _ right: Swift.AnyObject?) -> Swift.Int
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringConstant {
  public static let empty: Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringEquality {
  public static let ignoreCase: SAPOData.Equality
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringFunction {
  public static func join(_ strings: Swift.String?...) -> Swift.String
  public static func `repeat`(_ value: Swift.String, count: Swift.Int) -> Swift.String
  public static func afterFirst(_ value: Swift.String, text: Swift.String) -> Swift.String
  public static func afterLast(_ value: Swift.String, text: Swift.String) -> Swift.String
  public static func beforeFirst(_ value: Swift.String, text: Swift.String) -> Swift.String
  public static func beforeLast(_ value: Swift.String, text: Swift.String) -> Swift.String
  public static func compareTo(_ value: Swift.String, other: Swift.String) -> Swift.Int
  public static func endsWith(_ value: Swift.String, suffix: Swift.String, end: Swift.Int = (2147483647 as Int)) -> Swift.Bool
  public static func equalsIgnoreCase(_ value: Swift.String, other: Swift.String) -> Swift.Bool
  public static func hashCode(_ value: Swift.String) -> Swift.Int
  public static func htmlEscape(_ value: Swift.String) -> Swift.String
  public static func includes(_ value: Swift.String, text: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Bool
  public static func includesAny(_ value: Swift.String, chars: Swift.String) -> Swift.Bool
  public static func includesChar(_ value: Swift.String, text: Foundation.unichar, start: Swift.Int = (0 as Int)) -> Swift.Bool
  public static func indexOf(_ value: Swift.String, find: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Int
  public static func indexOfAny(_ value: Swift.String, chars: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Int
  public static func indexOfChar(_ value: Swift.String, find: Foundation.unichar, start: Swift.Int = (0 as Int)) -> Swift.Int
  public static func insert(_ value: Swift.String, insert: Swift.String, index: Swift.Int) -> Swift.String
  public static func isEmpty(_ value: Swift.String) -> Swift.Bool
  public static func lastIndexOf(_ value: Swift.String, find: Swift.String, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  public static func lastIndexOfAny(_ value: Swift.String, chars: Swift.String, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  public static func lastIndexOfChar(_ value: Swift.String, find: Foundation.unichar, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  public static func lowerFirst(_ value: Swift.String) -> Swift.String
  public static func padLeft(_ value: Swift.String, maxLength: Swift.Int, fillStr: Swift.String = " ") -> Swift.String
  public static func padRight(_ value: Swift.String, maxLength: Swift.Int, fillStr: Swift.String = " ") -> Swift.String
  public static func percentDecode(_ value: Swift.String) -> Swift.String
  public static func percentEncode(_ value: Swift.String) -> Swift.String
  public static func percentNormal(_ value: Swift.String) -> Swift.String
  public static func prettyName(_ value: Swift.String, upperFirst: Swift.Bool) -> Swift.String
  public static func removePrefix(_ value: Swift.String, prefix: Swift.String) -> Swift.String
  public static func removeSuffix(_ value: Swift.String, suffix: Swift.String) -> Swift.String
  public static func replaceAll(_ value: Swift.String, text: Swift.String, newText: Swift.String) -> Swift.String
  public static func replaceFirst(_ value: Swift.String, text: Swift.String, newText: Swift.String) -> Swift.String
  public static func replaceLast(_ value: Swift.String, text: Swift.String, newText: Swift.String) -> Swift.String
  public static func slice(_ value: Swift.String, start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> Swift.String
  public static func startsWith(_ value: Swift.String, prefix: Swift.String, start: Swift.Int = (0 as Int)) -> Swift.Bool
  public static func substr(_ value: Swift.String, start: Swift.Int, length: Swift.Int = (2147483647 as Int)) -> Swift.String
  public static func substring(_ value: Swift.String, start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> Swift.String
  public static func toAny(_ value: Swift.String) -> Swift.AnyObject?
  public static func toBinary(_ value: Swift.String) -> Foundation.Data
  public static func toChar(_ value: Swift.String) -> Foundation.unichar
  public static func toJSON(_ value: Swift.String) -> Swift.String
  public static func toLowerCase(_ value: Swift.String) -> Swift.String
  public static func toString(_ value: Swift.String) -> Swift.String
  public static func toUpperCase(_ value: Swift.String) -> Swift.String
  public static func trim(_ value: Swift.String) -> Swift.String
  public static func trimLeft(_ value: Swift.String) -> Swift.String
  public static func trimRight(_ value: Swift.String) -> Swift.String
  public static func upperFirst(_ value: Swift.String) -> Swift.String
  public static func withPrefix(_ value: Swift.String, prefix: Swift.String) -> Swift.String
  public static func withSuffix(_ value: Swift.String, suffix: Swift.String) -> Swift.String
  public static func xmlEscape(_ value: Swift.String) -> Swift.String
  @objc deinit
}
@_hasMissingDesignatedInitializers public class StringOperator {
  public static func compare(_ left: Swift.String, _ right: Swift.String) -> Swift.Int
  public static func compareIgnoreCase(_ left: Swift.String, _ right: Swift.String) -> Swift.Int
  public static func equal(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func equalIgnoreCase(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func greaterEqual(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func greaterThan(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func lessEqual(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func lessThan(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  public static func notEqual(_ left: Swift.String, _ right: Swift.String) -> Swift.Bool
  @objc deinit
}
@_inheritsConvenienceInitializers open class ThreadLocal : SAPOData.ObjectBase {
  override public init()
  open func get() -> Swift.AnyObject?
  open func set(_ value: Swift.AnyObject?)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ThreadSleep {
  public static func forMicroseconds(time: Swift.Int64)
  public static func forMilliseconds(time: Swift.Int64)
  public static func forNanoseconds(time: Swift.Int64)
  public static func forSeconds(time: Swift.Int64)
  public static func forever()
  @objc deinit
}
@_inheritsConvenienceInitializers open class ThreadStart : SAPOData.ObjectBase {
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class UndefinedException : SAPOData.FatalError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.UndefinedException
  @objc deinit
}
@_inheritsConvenienceInitializers open class UntypedList : SAPOData.ObjectBase {
  public func toArray() -> [Swift.AnyObject?]
  override public init()
  public init(capacity: Swift.Int)
  open func append(_ item: Swift.AnyObject?)
  open func append(contentsOf list: SAPOData.UntypedList)
  open func append(contentsOf list: SAPOData.UntypedList, start: Swift.Int, end: Swift.Int)
  open func appendNulls(count: Swift.Int)
  open func endRange(end: Swift.Int) -> Swift.Int
  open func first() -> Swift.AnyObject?
  open func indexOf(item: Swift.AnyObject?, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: Swift.AnyObject?)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.UntypedList)
  open var isEmpty: Swift.Bool {
    get
  }
  open var isMutable: Swift.Bool {
    get
  }
  open func item(at index: Swift.Int) -> Swift.AnyObject?
  open func last() -> Swift.AnyObject?
  open func lastIndexOf(item: Swift.AnyObject?, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open var length: Swift.Int {
    get
  }
  open func pop() -> Swift.AnyObject?
  open func push(_ item: Swift.AnyObject?) -> Swift.Int
  open func remove(at index: Swift.Int)
  open func removeAll()
  open func removeFirst()
  open func removeLast()
  open func removeRange(start: Swift.Int, end: Swift.Int)
  open func reserve(capacity: Swift.Int)
  open func reverse()
  open func shift() -> Swift.AnyObject?
  open func single() -> Swift.AnyObject?
  open func slice(start: Swift.Int, end: Swift.Int) -> SAPOData.UntypedList
  open func sort()
  open func sortWith(comparer: SAPOData.Comparer)
  open func startRange(start: Swift.Int) -> Swift.Int
  override open func toString() -> Swift.String
  open func update(at index: Swift.Int, item: Swift.AnyObject?)
  open func use(comparer: SAPOData.Comparer, equality: SAPOData.Equality)
  @objc deinit
}
@_inheritsConvenienceInitializers open class UntypedMap : SAPOData.ObjectBase {
  override public init()
  open func containsValue(forKey key: Swift.AnyObject?) -> Swift.Bool
  open func copyKeysTo(list: SAPOData.UntypedList)
  open func copyValuesTo(list: SAPOData.UntypedList)
  open var isEmpty: Swift.Bool {
    get
  }
  open var isMutable: Swift.Bool {
    get
  }
  open func keys() -> SAPOData.UntypedList
  open func removeAll()
  open func removeValue(forKey key: Swift.AnyObject?) -> Swift.Bool
  open func requiredValue(forKey key: Swift.AnyObject?) -> Swift.AnyObject
  open var size: Swift.Int {
    get
  }
  open func update(key: Swift.AnyObject?, value: Swift.AnyObject?)
  open func updateValue(_ value: Swift.AnyObject?, forKey key: Swift.AnyObject?)
  open func value(forKey key: Swift.AnyObject?) -> Swift.AnyObject?
  open func values() -> SAPOData.UntypedList
  @objc deinit
}
@_inheritsConvenienceInitializers open class UntypedSet : SAPOData.ObjectBase {
  override public init()
  public init(capacity: Swift.Int)
  open func contains(_ value: Swift.AnyObject?) -> Swift.Bool
  open func copyValuesTo(list: SAPOData.UntypedList)
  open func insert(_ value: Swift.AnyObject?)
  open var isEmpty: Swift.Bool {
    get
  }
  open var isMutable: Swift.Bool {
    get
  }
  open func remove(_ value: Swift.AnyObject?) -> Swift.Bool
  open func removeAll()
  open var size: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  open func values() -> SAPOData.UntypedList
  @objc deinit
}
public struct XSUTF16V {
  public var utf16View: Swift.String.UTF16View
  public init(_ string: Swift.String)
  public mutating func length() -> Swift.Int
  public mutating func charAt(_ index: Swift.Int) -> Foundation.unichar
}
@_inheritsConvenienceInitializers open class XmlAttribute : SAPOData.ObjectBase {
  final public var name: Swift.String
  final public var prefix: Swift.String?
  final public var localName: Swift.String
  final public var namespaceURI: Swift.String?
  final public var value: Swift.String
  override public init()
  open func andValue(_ value: Swift.String) -> SAPOData.XmlAttribute
  open var hasPrefix: Swift.Bool {
    get
  }
  override open func toString() -> Swift.String
  open class func withName(_ name: Swift.String) -> SAPOData.XmlAttribute
  open class func withQName(_ name: SAPOData.XmlName) -> SAPOData.XmlAttribute
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlAttributeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlAttribute {
    get
    set
  }
  public static let empty: SAPOData.XmlAttributeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.XmlAttribute)
  open func append(contentsOf list: SAPOData.XmlAttributeList)
  open func appendThis(_ item: SAPOData.XmlAttribute) -> SAPOData.XmlAttributeList
  open func copy() -> SAPOData.XmlAttributeList
  open func first() -> SAPOData.XmlAttribute
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlAttribute>) -> SAPOData.XmlAttributeList
  open func includes(item: SAPOData.XmlAttribute) -> Swift.Bool
  open func indexOf(item: SAPOData.XmlAttribute, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.XmlAttribute)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlAttributeList)
  open func item(at index: Swift.Int) -> SAPOData.XmlAttribute
  open func last() -> SAPOData.XmlAttribute
  open func lastIndexOf(item: SAPOData.XmlAttribute, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlAttribute>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlAttributeList
  open func single() -> SAPOData.XmlAttribute
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlAttributeList
  open func toArray() -> Swift.Array<SAPOData.XmlAttribute>
  open func update(at index: Swift.Int, item: SAPOData.XmlAttribute)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlAttribute>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlAttribute>>
}
@_inheritsConvenienceInitializers open class XmlComment : SAPOData.XmlNode {
  final public var text: Swift.String
  override public init()
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open class func withText(_ text: Swift.String) -> SAPOData.XmlComment
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlCommentList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlComment {
    get
    set
  }
  public static let empty: SAPOData.XmlCommentList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.XmlComment)
  open func append(contentsOf list: SAPOData.XmlCommentList)
  open func appendThis(_ item: SAPOData.XmlComment) -> SAPOData.XmlCommentList
  open func copy() -> SAPOData.XmlCommentList
  open func first() -> SAPOData.XmlComment
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlComment>) -> SAPOData.XmlCommentList
  open func includes(item: SAPOData.XmlComment) -> Swift.Bool
  open func indexOf(item: SAPOData.XmlComment, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.XmlComment)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlCommentList)
  open func item(at index: Swift.Int) -> SAPOData.XmlComment
  open func last() -> SAPOData.XmlComment
  open func lastIndexOf(item: SAPOData.XmlComment, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlComment>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlCommentList
  open func single() -> SAPOData.XmlComment
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlCommentList
  open func toArray() -> Swift.Array<SAPOData.XmlComment>
  open func update(at index: Swift.Int, item: SAPOData.XmlComment)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlComment>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlComment>>
}
@_inheritsConvenienceInitializers open class XmlCompression : SAPOData.ObjectBase {
  override public init()
  open class func compress(document: SAPOData.XmlDocument, options: SAPOData.XmlCompression.Options = XmlCompression.Options()) throws
  @_inheritsConvenienceInitializers open class Options : SAPOData.ObjectBase {
    final public var dropComments: Swift.Bool
    final public var dropMixed: Swift.Bool
    override public init()
    @objc deinit
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlDocument : SAPOData.ObjectBase {
  final public var declaration: Swift.String?
  final public var wasDecompressed: Swift.Bool
  final public var processingInstructions: SAPOData.XmlProcessingInstructionList
  override public init()
  open func appendTo(buffer: SAPOData.CharBuffer, indent: Swift.Int = (-1 as Int))
  open class func parse(xml: Swift.String) throws -> SAPOData.XmlDocument
  open class func parseMixed(xml: Swift.String, mixed: Swift.Bool) throws -> SAPOData.XmlDocument
  open func resolveNamespaces() throws
  open var rootElement: SAPOData.XmlElement {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlDuration : SAPOData.ObjectBase {
  override public init()
  open var dayTime: SAPOData.DayTimeDuration {
    get
  }
  open var days: Swift.Int {
    get
  }
  open class func equal(_ left: SAPOData.XmlDuration?, _ right: SAPOData.XmlDuration?) -> Swift.Bool
  open var hours: Swift.Int {
    get
  }
  open var minutes: Swift.Int {
    get
  }
  open var months: Swift.Int {
    get
  }
  open var nanos: Swift.Int {
    get
  }
  open class func notEqual(_ left: SAPOData.XmlDuration?, _ right: SAPOData.XmlDuration?) -> Swift.Bool
  open class func of(sign: Swift.Int, years: Swift.Int, months: Swift.Int, days: Swift.Int, hours: Swift.Int, minutes: Swift.Int, seconds: Swift.Int, nanos: Swift.Int) -> SAPOData.XmlDuration
  open class func parse(_ text: Swift.String) -> SAPOData.XmlDuration?
  open var seconds: Swift.Int {
    get
  }
  open var sign: Swift.Int {
    get
  }
  override open func toString() -> Swift.String
  open func toTime() -> SAPOData.LocalTime?
  open var yearMonth: SAPOData.YearMonthDuration {
    get
  }
  open var years: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlElement : SAPOData.XmlNode {
  final public var name: Swift.String
  final public var prefix: Swift.String?
  final public var localName: Swift.String
  final public var namespaceURI: Swift.String?
  final public var sourceFile: Swift.String?
  final public var lineNumber: Swift.Int
  override public init()
  open func addAttribute(name: Swift.String, value: Swift.String) -> SAPOData.XmlElement
  open func addAttributeWithQName(_ name: SAPOData.XmlName, value: Swift.String) -> SAPOData.XmlElement
  open func addChild(_ child: SAPOData.XmlNode) -> SAPOData.XmlElement
  open func addComment(text: Swift.String) -> SAPOData.XmlElement
  open func addElement(child: SAPOData.XmlElement) -> SAPOData.XmlElement
  open func addElements(_ elements: SAPOData.XmlElementList) -> SAPOData.XmlElement
  open func addText(_ text: Swift.String) -> SAPOData.XmlElement
  open func appendTo(buffer: SAPOData.CharBuffer, indent: Swift.Int = (-1 as Int))
  open func attribute(name: Swift.String) -> Swift.String?
  open var attributes: SAPOData.XmlAttributeList {
    get
    set(value)
  }
  open var childNodes: SAPOData.XmlNodeList {
    get
    set(value)
  }
  open var comments: SAPOData.XmlCommentList {
    get
  }
  open func element(name: Swift.String) -> SAPOData.XmlElement?
  open var elements: SAPOData.XmlElementList {
    get
  }
  open func elementsNamed(name: Swift.String) -> SAPOData.XmlElementList
  open var hasPrefix: Swift.Bool {
    get
  }
  open class func parse(xml: Swift.String) throws -> SAPOData.XmlElement
  open class func parseMixed(xml: Swift.String, mixed: Swift.Bool = true) throws -> SAPOData.XmlElement
  open func removeAttribute(name: Swift.String)
  open func requiredAttribute(name: Swift.String) throws -> Swift.String
  open func requiredElement(name: Swift.String) throws -> SAPOData.XmlElement
  open func resolveNamespaces() throws
  open func setAttribute(name: Swift.String, value: Swift.String) -> SAPOData.XmlElement
  open func setAttributeWithQName(_ name: SAPOData.XmlName, value: Swift.String) -> SAPOData.XmlElement
  open var text: Swift.String {
    get
  }
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open class func withName(_ name: Swift.String) -> SAPOData.XmlElement
  open class func withQName(_ name: SAPOData.XmlName) -> SAPOData.XmlElement
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlElementList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlElement {
    get
    set
  }
  public static let empty: SAPOData.XmlElementList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.XmlElement)
  open func append(contentsOf list: SAPOData.XmlElementList)
  open func appendThis(_ item: SAPOData.XmlElement) -> SAPOData.XmlElementList
  open func copy() -> SAPOData.XmlElementList
  open func first() -> SAPOData.XmlElement
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlElement>) -> SAPOData.XmlElementList
  open func includes(item: SAPOData.XmlElement) -> Swift.Bool
  open func indexOf(item: SAPOData.XmlElement, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.XmlElement)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlElementList)
  open func item(at index: Swift.Int) -> SAPOData.XmlElement
  open func last() -> SAPOData.XmlElement
  open func lastIndexOf(item: SAPOData.XmlElement, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlElement>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlElementList
  open func single() -> SAPOData.XmlElement
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlElementList
  open func toArray() -> Swift.Array<SAPOData.XmlElement>
  open func update(at index: Swift.Int, item: SAPOData.XmlElement)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlElement>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlElement>>
}
open class XmlElementMap : SAPOData.MapBase {
  public static let empty: SAPOData.XmlElementMap
  public init(capacity: Swift.Int = (16 as Int))
  open func containsValue(forKey key: Swift.String) -> Swift.Bool
  open func entries() -> SAPOData.XmlElementMap.EntryList
  open func keys() -> SAPOData.StringList
  open func removeValue(forKey key: Swift.String) -> Swift.Bool
  open func requiredValue(forKey key: Swift.String) -> SAPOData.XmlElement
  override open var untypedMap: SAPOData.UntypedMap {
    get
  }
  open func update(key: Swift.String, value: SAPOData.XmlElement)
  open func updateThis(key: Swift.String, value: SAPOData.XmlElement) -> SAPOData.XmlElementMap
  open func updateValue(_ value: SAPOData.XmlElement, forKey key: Swift.String)
  open func value(forKey key: Swift.String) -> SAPOData.XmlElement?
  open func values() -> SAPOData.XmlElementList
  @_inheritsConvenienceInitializers open class Entry : SAPOData.ObjectBase {
    override public init()
    open var key: Swift.String {
      get
      set(value)
    }
    open var value: SAPOData.XmlElement {
      get
      set(value)
    }
    @objc deinit
  }
  @_inheritsConvenienceInitializers open class EntryList : SAPOData.ListBase, Swift.Sequence {
    public subscript(index: Swift.Int) -> SAPOData.XmlElementMap.Entry {
      get
      set
    }
    public static let empty: SAPOData.XmlElementMap.EntryList
    override public init(capacity: Swift.Int = (4 as Int))
    open func append(_ item: SAPOData.XmlElementMap.Entry)
    open func append(contentsOf list: SAPOData.XmlElementMap.EntryList)
    open func appendThis(_ item: SAPOData.XmlElementMap.Entry) -> SAPOData.XmlElementMap.EntryList
    open func copy() -> SAPOData.XmlElementMap.EntryList
    open func first() -> SAPOData.XmlElementMap.Entry
    open class func fromArray(_ array: Swift.Array<SAPOData.XmlElementMap.Entry>) -> SAPOData.XmlElementMap.EntryList
    open func includes(item: SAPOData.XmlElementMap.Entry) -> Swift.Bool
    open func indexOf(item: SAPOData.XmlElementMap.Entry, start: Swift.Int = (0 as Int)) -> Swift.Int
    open func insert(at index: Swift.Int, item: SAPOData.XmlElementMap.Entry)
    open func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlElementMap.EntryList)
    open func item(at index: Swift.Int) -> SAPOData.XmlElementMap.Entry
    open func last() -> SAPOData.XmlElementMap.Entry
    open func lastIndexOf(item: SAPOData.XmlElementMap.Entry, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
    open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlElementMap.Entry>>
    open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlElementMap.EntryList
    open func single() -> SAPOData.XmlElementMap.Entry
    open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlElementMap.EntryList
    open func toArray() -> Swift.Array<SAPOData.XmlElementMap.Entry>
    open func update(at index: Swift.Int, item: SAPOData.XmlElementMap.Entry)
    @objc deinit
    public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlElementMap.Entry>>.Element
    public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlElementMap.Entry>>
  }
  override public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlError : SAPOData.DataFormatError {
  override public init()
  open class func withMessage(_ message: Swift.String) -> SAPOData.XmlError
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlName : SAPOData.ObjectBase {
  override public init()
  open var fullName: Swift.String {
    get
    set(value)
  }
  open var localName: Swift.String {
    get
    set(value)
  }
  open class func parse(name: Swift.String) throws -> SAPOData.XmlName
  open var prefix: Swift.String? {
    get
    set(value)
  }
  override open func toString() -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlNameList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlName {
    get
    set
  }
  public static let empty: SAPOData.XmlNameList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.XmlName)
  open func append(contentsOf list: SAPOData.XmlNameList)
  open func appendThis(_ item: SAPOData.XmlName) -> SAPOData.XmlNameList
  open func copy() -> SAPOData.XmlNameList
  open func first() -> SAPOData.XmlName
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlName>) -> SAPOData.XmlNameList
  open func includes(item: SAPOData.XmlName) -> Swift.Bool
  open func indexOf(item: SAPOData.XmlName, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.XmlName)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlNameList)
  open func item(at index: Swift.Int) -> SAPOData.XmlName
  open func last() -> SAPOData.XmlName
  open func lastIndexOf(item: SAPOData.XmlName, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlName>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlNameList
  open func single() -> SAPOData.XmlName
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlNameList
  open func toArray() -> Swift.Array<SAPOData.XmlName>
  open func update(at index: Swift.Int, item: SAPOData.XmlName)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlName>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlName>>
}
@_inheritsConvenienceInitializers open class XmlNode : SAPOData.ObjectBase {
  public static let typeComment: Swift.Int
  public static let typeElement: Swift.Int
  public static let typeText: Swift.Int
  public static let typeProcessingInstruction: Swift.Int
  override public init()
  open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlNodeList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlNode {
    get
    set
  }
  public static let empty: SAPOData.XmlNodeList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.XmlNode)
  open func append(contentsOf list: SAPOData.XmlNodeList)
  open func appendThis(_ item: SAPOData.XmlNode) -> SAPOData.XmlNodeList
  open func copy() -> SAPOData.XmlNodeList
  open func first() -> SAPOData.XmlNode
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlNode>) -> SAPOData.XmlNodeList
  open func includes(item: SAPOData.XmlNode) -> Swift.Bool
  open func indexOf(item: SAPOData.XmlNode, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.XmlNode)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlNodeList)
  open func item(at index: Swift.Int) -> SAPOData.XmlNode
  open func last() -> SAPOData.XmlNode
  open func lastIndexOf(item: SAPOData.XmlNode, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlNode>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlNodeList
  open func single() -> SAPOData.XmlNode
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlNodeList
  open func toArray() -> Swift.Array<SAPOData.XmlNode>
  open func update(at index: Swift.Int, item: SAPOData.XmlNode)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlNode>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlNode>>
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class XmlParser : SAPOData.ObjectBase {
  final public var declaration: Swift.String?
  open func nextChild(element: SAPOData.XmlElement, parseNested: Swift.Bool) throws -> SAPOData.XmlNode?
  open func nextChildElement(_ element: SAPOData.XmlElement, parseNested: Swift.Bool) throws -> SAPOData.XmlElement?
  open func nextElement() throws -> SAPOData.XmlElement
  open class func parseDocument(stream: SAPOData.CharStream, mixed: Swift.Bool = false, options: SAPOData.XmlParser.Options = XmlParser.Options()) throws -> SAPOData.XmlDocument
  open class func parseElement(stream: SAPOData.CharStream, mixed: Swift.Bool = false, options: SAPOData.XmlParser.Options = XmlParser.Options()) throws -> SAPOData.XmlElement
  open func parseElement() throws -> SAPOData.XmlElement
  open func readChildren(element: SAPOData.XmlElement) throws
  open var rootElement: SAPOData.XmlElement {
    get
    set(value)
  }
  open class func startDocument(stream: SAPOData.CharStream, mixed: Swift.Bool = false, options: SAPOData.XmlParser.Options = XmlParser.Options()) throws -> SAPOData.XmlParser
  open class func startElement(stream: SAPOData.CharStream, mixed: Swift.Bool = false, options: SAPOData.XmlParser.Options = XmlParser.Options()) throws -> SAPOData.XmlParser
  @_inheritsConvenienceInitializers open class Options : SAPOData.ObjectBase {
    final public var decompress: Swift.Bool
    final public var noDuplicateCheck: Swift.Bool
    final public var noNameValidation: Swift.Bool
    override public init()
    @objc deinit
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class XmlPretty {
  public static func printDocument(_ document: SAPOData.XmlDocument, indent: Swift.Int = (0 as Int)) -> Swift.String
  public static func printElement(_ element: SAPOData.XmlElement, indent: Swift.Int = (0 as Int)) -> Swift.String
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlProcessingInstruction : SAPOData.XmlNode {
  final public var target: Swift.String
  final public var content: Swift.String
  override public init()
  open func appendTo(buffer: SAPOData.CharBuffer, indent: Swift.Int = (-1 as Int))
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class XmlProcessingInstructionList : SAPOData.ListBase, Swift.Sequence {
  public subscript(index: Swift.Int) -> SAPOData.XmlProcessingInstruction {
    get
    set
  }
  public static let empty: SAPOData.XmlProcessingInstructionList
  override public init(capacity: Swift.Int = (4 as Int))
  open func append(_ item: SAPOData.XmlProcessingInstruction)
  open func append(contentsOf list: SAPOData.XmlProcessingInstructionList)
  open func appendThis(_ item: SAPOData.XmlProcessingInstruction) -> SAPOData.XmlProcessingInstructionList
  open func copy() -> SAPOData.XmlProcessingInstructionList
  open func first() -> SAPOData.XmlProcessingInstruction
  open class func fromArray(_ array: Swift.Array<SAPOData.XmlProcessingInstruction>) -> SAPOData.XmlProcessingInstructionList
  open func includes(item: SAPOData.XmlProcessingInstruction) -> Swift.Bool
  open func indexOf(item: SAPOData.XmlProcessingInstruction, start: Swift.Int = (0 as Int)) -> Swift.Int
  open func insert(at index: Swift.Int, item: SAPOData.XmlProcessingInstruction)
  open func insert(at index: Swift.Int, contentsOf list: SAPOData.XmlProcessingInstructionList)
  open func item(at index: Swift.Int) -> SAPOData.XmlProcessingInstruction
  open func last() -> SAPOData.XmlProcessingInstruction
  open func lastIndexOf(item: SAPOData.XmlProcessingInstruction, start: Swift.Int = (2147483647 as Int)) -> Swift.Int
  open func makeIterator() -> Swift.IndexingIterator<Swift.Array<SAPOData.XmlProcessingInstruction>>
  open class func share(_ list: SAPOData.ListBase) -> SAPOData.XmlProcessingInstructionList
  open func single() -> SAPOData.XmlProcessingInstruction
  open func slice(start: Swift.Int, end: Swift.Int = (2147483647 as Int)) -> SAPOData.XmlProcessingInstructionList
  open func toArray() -> Swift.Array<SAPOData.XmlProcessingInstruction>
  open func update(at index: Swift.Int, item: SAPOData.XmlProcessingInstruction)
  @objc deinit
  public typealias Element = Swift.IndexingIterator<Swift.Array<SAPOData.XmlProcessingInstruction>>.Element
  public typealias Iterator = Swift.IndexingIterator<Swift.Array<SAPOData.XmlProcessingInstruction>>
}
@_inheritsConvenienceInitializers open class XmlText : SAPOData.XmlNode {
  final public var text: Swift.String
  override public init()
  override open func toString() -> Swift.String
  override open var type: Swift.Int {
    get
  }
  open class func withText(_ text: Swift.String) -> SAPOData.XmlText
  @objc deinit
}
open class AnyDataService : SAPOData.ObjectBase {
  @available(swift, deprecated: 4.2, message: "it is renamed to backgroundQueueForFunction, where the number of queued operations are maximized in 10 by default. If serial execution is sufficient then use the backgroundQueueForAction instead.")
  public var backgroundQueue: Foundation.OperationQueue {
    get
    set
  }
  public var backgroundQueueForAction: Foundation.OperationQueue {
    get
    set
  }
  public var backgroundQueueForFunction: Foundation.OperationQueue {
    get
    set
  }
  public var completionQueue: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 4.2, message: "it is renamed to addBackgroundOperationForFunction(operation:), which supports parallel execution of operations (on 10 threads by default). If serial execution is sufficient then use the addBackgroundOperationForAction(operation:) instead.")
  public func addBackgroundOperation(_ operation: @escaping () -> Swift.Void)
  public func addBackgroundOperationForAction(_ operation: @escaping () -> Swift.Void)
  public func addBackgroundOperationForFunction(_ operation: @escaping () -> Swift.Void)
  open func pingServer(completionHandler: @escaping (Swift.Error?) -> Swift.Void, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func fetchMetadata(completionHandler: @escaping (SAPOData.CSDLDocument?, Swift.Error?) -> Swift.Void, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func loadMetadata(completionHandler: @escaping (Swift.Error?) -> Swift.Void, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func unloadMetadata(completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (SAPOData.DataValue?, Swift.Error?) -> Swift.Void)
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (SAPOData.QueryResult?, Swift.Error?) -> Swift.Void)
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  public init(provider: SAPOData.DataServiceProvider)
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func dataMethod(withName name: Swift.String) -> SAPOData.DataMethod
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.ByteStream
  open func entitySet(withName name: Swift.String) -> SAPOData.EntitySet
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.QueryResult
  open func fetchMetadata(headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadMetadata(headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open var metadata: SAPOData.CSDLDocument {
    get
  }
  open var metadataLock: SAPOData.MetadataLock {
    get
  }
  open var name: Swift.String {
    get
  }
  open func pingServer(headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open var provider: SAPOData.DataServiceProvider {
    get
  }
  open func refreshMetadata() throws
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func unloadMetadata() throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class ChangeSet : SAPOData.ObjectBase {
  final public var status: Swift.Int
  final public var error: SAPOData.DataServiceError?
  override public init()
  open func action(at index: Swift.Int) -> SAPOData.DataQuery
  open func actionResult(for actionQuery: SAPOData.DataQuery) -> SAPOData.QueryResult
  open func addActionResult(query: SAPOData.DataQuery, result: SAPOData.QueryResult)
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func entity(at index: Swift.Int) -> SAPOData.EntityValue
  open func headers(at index: Swift.Int) -> SAPOData.HTTPHeaders
  open func invokeAction(method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) -> SAPOData.DataQuery
  open func isAction(at index: Swift.Int) -> Swift.Bool
  open func isEntity(at index: Swift.Int) -> Swift.Bool
  open func isLink(at index: Swift.Int) -> Swift.Bool
  open func link(at index: Swift.Int) -> SAPOData.ChangedLink
  open func options(at index: Swift.Int) -> SAPOData.RequestOptions
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open var size: Swift.Int {
    get
  }
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  @objc deinit
}
public protocol DataServiceProvider : AnyObject {
  func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  var hasMetadata: Swift.Bool { get }
  func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  var metadata: SAPOData.CSDLDocument { get set }
  func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  var serviceName: Swift.String { get }
  func unloadMetadata() throws
  func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
}
@_inheritsConvenienceInitializers open class FromJSON : SAPOData.DataQuery {
  final public var text: Swift.String
  override public init()
  open class func entity(_ text: Swift.String) -> SAPOData.DataQuery
  open class func entityKey(_ text: Swift.String) -> SAPOData.DataQuery
  open class func entityList(_ text: Swift.String) -> SAPOData.DataQuery
  @available(swift, deprecated: 4.0, renamed: "entityList")
  open class func entitySet(_ text: Swift.String) -> SAPOData.DataQuery
  @objc deinit
}
open class DataService<Provider> where Provider : SAPOData.DataServiceProvider {
  @available(swift, deprecated: 4.2, message: "it is renamed to backgroundQueueForFunction, where the number of queued operations are maximized in 10 by default. If serial execution is sufficient then use the backgroundQueueForAction instead.")
  public var backgroundQueue: Foundation.OperationQueue {
    get
    set
  }
  public var backgroundQueueForAction: Foundation.OperationQueue {
    get
    set
  }
  public var backgroundQueueForFunction: Foundation.OperationQueue {
    get
    set
  }
  public var completionQueue: Foundation.OperationQueue {
    get
    set
  }
  @available(swift, deprecated: 4.2, message: "it is renamed to addBackgroundOperationForFunction(operation:), which supports parallel execution of operations (on 10 threads by default). If serial execution is sufficient then use the addBackgroundOperationForAction(operation:) instead.")
  public func addBackgroundOperation(_ operation: @escaping () -> Swift.Void)
  public func addBackgroundOperationForAction(_ operation: @escaping () -> Swift.Void)
  public func addBackgroundOperationForFunction(_ operation: @escaping () -> Swift.Void)
  open func pingServer(completionHandler: @escaping (Swift.Error?) -> Swift.Void, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func fetchMetadata(completionHandler: @escaping (SAPOData.CSDLDocument?, Swift.Error?) -> Swift.Void, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func loadMetadata(completionHandler: @escaping (Swift.Error?) -> Swift.Void, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func unloadMetadata(completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (SAPOData.DataValue?, Swift.Error?) -> Swift.Void)
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (SAPOData.QueryResult?, Swift.Error?) -> Swift.Void)
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Foundation.Data?, Swift.Error?) -> Swift.Void)
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none, completionHandler: @escaping (Swift.Error?) -> Swift.Void)
  public init(provider: Provider)
  public var provider: Provider {
    get
  }
  open func applyChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createRelatedEntity(_ entity: SAPOData.EntityValue, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func createRelatedMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, in parent: SAPOData.EntityValue, property: SAPOData.Property, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func dataMethod(withName name: Swift.String) -> SAPOData.DataMethod
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue = EntityValue.ofType(EntityType.undefined), headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.ByteStream
  open func entitySet(withName name: Swift.String) -> SAPOData.EntitySet
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.QueryResult
  open func fetchMetadata(headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open func loadEntity(_ entity: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadMetadata(headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func loadProperty(_ property: SAPOData.Property, into: SAPOData.EntityValue, query: SAPOData.DataQuery? = nil, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open var metadata: SAPOData.CSDLDocument {
    get
  }
  open var metadataLock: SAPOData.MetadataLock {
    get
  }
  open var name: Swift.String {
    get
  }
  open func pingServer(headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func refreshMetadata() throws
  open func saveEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func unloadMetadata() throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) throws
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class JsonEntityProvider : SAPOData.ObjectBase, SAPOData.DataServiceProvider {
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  open func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var metadata: SAPOData.CSDLDocument {
    get
    set(value)
  }
  open func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var serviceName: Swift.String {
    get
  }
  open func unloadMetadata() throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open class func withMetadata(_ metadata: SAPOData.CSDLDocument) throws -> SAPOData.JsonEntityProvider
  open class func withProvider(_ provider: SAPOData.DataServiceProvider) throws -> SAPOData.JsonEntityProvider
  @objc deinit
}
open class MetadataOnlyProvider : SAPOData.ObjectBase, SAPOData.DataServiceProvider {
  public init(name: Swift.String)
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  open func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var metadata: SAPOData.CSDLDocument {
    get
    set(value)
  }
  open class func newIfNull(provider: SAPOData.DataServiceProvider?, name: Swift.String) throws -> SAPOData.DataServiceProvider
  open func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var serviceName: Swift.String {
    get
  }
  open func unloadMetadata() throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @objc deinit
  override public init()
}
@_inheritsConvenienceInitializers open class NetworkOptions : SAPOData.ObjectBase {
  final public var httpHandler: SAPOData.HTTPHandler?
  final public var compressRequests: Swift.Bool
  final public var compressResponses: Swift.Bool
  final public var streamDownloads: Swift.Bool
  final public var streamUploads: Swift.Bool
  final public var allowTunneling: Swift.Bool
  final public var tunneledMethods: SAPOData.StringList
  final public var tunnelingHeader: Swift.String
  override public init()
  @objc deinit
}
open class OnlineDataService : SAPOData.AnyDataService {
  public init(provider: SAPOData.OnlineODataProvider)
  open var onlineProvider: SAPOData.OnlineODataProvider {
    get
  }
  open var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  open var traceRequests: Swift.Bool {
    get
    set(value)
  }
  open var traceWithData: Swift.Bool {
    get
    set(value)
  }
  @objc deinit
  override public init(provider: SAPOData.DataServiceProvider)
}
extension DataService where Provider : SAPOData.OnlineODataProvider {
  public var httpCookies: SAPOData.HTTPCookies {
    get
  }
  public var httpHeaders: SAPOData.HTTPHeaders {
    get
  }
  public var sessionCookies: SAPOData.HTTPCookies {
    get
  }
  public var sessionHeaders: SAPOData.HTTPHeaders {
    get
  }
  public var sharedCookies: SAPOData.HTTPCookies {
    get
  }
  public var sharedHeaders: SAPOData.HTTPHeaders {
    get
  }
  public var networkOptions: SAPOData.NetworkOptions {
    get
  }
  public var prettyTracing: Swift.Bool {
    get
    set
  }
  public var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  public var traceRequests: Swift.Bool {
    get
    set
  }
  public var traceWithData: Swift.Bool {
    get
    set
  }
  public func acquireToken() throws
}
open class OnlineODataProvider : SAPOData.ObjectBase, SAPOData.DataServiceProvider {
  convenience public init(serviceRoot: Foundation.URL, sapURLSession: SAPFoundation.SAPURLSession = SAPURLSession())
  convenience public init(serviceName: Swift.String, serviceRoot: Foundation.URL, sapURLSession: SAPFoundation.SAPURLSession = SAPURLSession())
  public var sapURLSession: SAPFoundation.SAPURLSession? {
    get
    set
  }
  public init(serviceName: Swift.String, serviceRoot: Swift.String, httpHandler: SAPOData.HTTPHandler? = nil)
  open func acquireToken() throws
  open func createEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func createMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteByQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deleteRepeatableRequest(requestID: SAPOData.GuidValue) throws
  open func deleteRepeatableRequests(clientID: SAPOData.GuidValue) throws
  open func deleteStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func deltaStream(query: SAPOData.DataQuery) throws -> SAPOData.DeltaStream
  open func downloadMedia(entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func downloadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.ByteStream
  open func entityContext(entitySet: SAPOData.EntitySet, derivedType: SAPOData.StructureType? = nil, format: Swift.Int = (0 as Int), version: Swift.Int = (0 as Int)) -> SAPOData.DataContext
  open func entityStream(query: SAPOData.DataQuery) throws -> SAPOData.EntityStream
  open func executeMethod(_ method: SAPOData.DataMethod, parameters: SAPOData.ParameterList, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.DataValue?
  open func executeQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.QueryResult
  open func fetchMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws -> SAPOData.CSDLDocument
  open var hasMetadata: Swift.Bool {
    get
  }
  open var httpCookies: SAPOData.HTTPCookies {
    get
  }
  open var httpHeaders: SAPOData.HTTPHeaders {
    get
  }
  open func loadMetadata(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func login(username: Swift.String, password: Swift.String)
  open var metadata: SAPOData.CSDLDocument {
    get
    set(value)
  }
  open var networkOptions: SAPOData.NetworkOptions {
    get
  }
  open func pingServer(headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open var prettyTracing: Swift.Bool {
    get
    set(value)
  }
  open func processBatch(_ batch: SAPOData.RequestBatch, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func queryContext(version: Swift.Int = (0 as Int)) -> SAPOData.DataContext
  open var serviceName: Swift.String {
    get
  }
  open var serviceOptions: SAPOData.ServiceOptions {
    get
  }
  open var serviceRoot: Swift.String {
    get
    set(value)
  }
  open var sessionCookies: SAPOData.HTTPCookies {
    get
  }
  open var sessionHeaders: SAPOData.HTTPHeaders {
    get
  }
  open var sharedCookies: SAPOData.HTTPCookies {
    get
  }
  open var sharedHeaders: SAPOData.HTTPHeaders {
    get
  }
  open var traceRequests: Swift.Bool {
    get
    set(value)
  }
  open var traceWithData: Swift.Bool {
    get
    set(value)
  }
  open func unloadMetadata() throws
  open func updateEntity(_ entity: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func updateLink(from: SAPOData.EntityValue, property: SAPOData.Property, to: SAPOData.EntityValue, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadMedia(entity: SAPOData.EntityValue, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  open func uploadStream(entity: SAPOData.EntityValue, link: SAPOData.StreamLink, content: SAPOData.StreamBase, headers: SAPOData.HTTPHeaders, options: SAPOData.RequestOptions) throws
  @objc deinit
  override public init()
}
@_hasMissingDesignatedInitializers public class PathResolver {
  public static func resolveChildPaths(metadata: SAPOData.CSDLDocument, parent: SAPOData.StructureBase, dataContext: SAPOData.DataContext, parentPath: Swift.String?)
  public static func resolvePaths(metadata: SAPOData.CSDLDocument, dataContext: SAPOData.DataContext, value: SAPOData.DataValue?, path: Swift.String? = nil)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProviderInternal {
  public static func providerDebugJsonParseTime(provider: SAPOData.OnlineODataProvider) throws -> Swift.Int64
  public static func providerDebugJsonValueTime(provider: SAPOData.OnlineODataProvider) throws -> Swift.Int64
  public static func resetProviderDebugJsonParseTime(provider: SAPOData.OnlineODataProvider) throws
  public static func resetProviderDebugJsonValueTime(provider: SAPOData.OnlineODataProvider) throws
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ProxyInternal {
  public static func refreshMetadata<Provider>(service: SAPOData.DataService<Provider>, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?) throws where Provider : SAPOData.DataServiceProvider
  public static func refreshMetadataWithLock<Provider>(service: SAPOData.DataService<Provider>, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?, mergeAction: @escaping () -> Swift.Void) throws where Provider : SAPOData.DataServiceProvider
  public static func checkVersion(metadata: SAPOData.CSDLDocument) throws
  public static func noRefreshMetadata() throws
  public static func refreshMetadata(service: SAPOData.AnyDataService, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?) throws
  public static func refreshMetadataWithLock(service: SAPOData.AnyDataService, fetcher: SAPOData.CSDLFetcher?, options: Swift.Int?, mergeAction: @escaping () -> Swift.Void) throws
  public static func switchMetadata(provider: SAPOData.DataServiceProvider, oldMetadata: SAPOData.CSDLDocument, newMetadata: SAPOData.CSDLDocument, mergeAction: @escaping () -> Swift.Void)
  @objc deinit
}
@_inheritsConvenienceInitializers open class RequestBatch : SAPOData.ObjectBase {
  final public var continueOnError: Swift.Bool
  final public var status: Swift.Int
  final public var error: SAPOData.DataServiceError?
  override public init()
  open func addChanges(_ changes: SAPOData.ChangeSet, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func addQuery(_ query: SAPOData.DataQuery, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none)
  open func addQueryResult(query: SAPOData.DataQuery, result: SAPOData.QueryResult)
  open func changeSet(at index: Swift.Int) -> SAPOData.ChangeSet
  open func dataQuery(at index: Swift.Int) -> SAPOData.DataQuery
  open func function(at index: Swift.Int) -> SAPOData.DataQuery
  open func headers(at index: Swift.Int) -> SAPOData.HTTPHeaders
  open func invokeFunction(method: SAPOData.DataMethod, parameters: SAPOData.ParameterList = ParameterList.empty, headers: SAPOData.HTTPHeaders = HTTPHeaders.empty, options: SAPOData.RequestOptions = RequestOptions.none) -> SAPOData.DataQuery
  open func isChangeSet(at index: Swift.Int) -> Swift.Bool
  open func isDataQuery(at index: Swift.Int) -> Swift.Bool
  open func isFunction(at index: Swift.Int) -> Swift.Bool
  open func options(at index: Swift.Int) -> SAPOData.RequestOptions
  open func queryResult(for query: SAPOData.DataQuery) -> SAPOData.QueryResult
  open var size: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class ServiceOptions : SAPOData.ObjectBase {
  final public var updateWithEntityTag: Swift.Bool
  final public var deleteWithEntityTag: Swift.Bool
  final public var loadIfCreateStatus: Swift.Int
  final public var loadIfUpdateStatus: Swift.Int
  final public var repeatabilityClientID: SAPOData.GuidValue?
  override public init()
  open var avoidInPaths: Swift.String? {
    get
    set(value)
  }
  open var batchDownloads: Swift.Bool {
    get
    set(value)
  }
  open var batchUploads: Swift.Bool {
    get
    set(value)
  }
  open var cacheMetadata: Swift.Bool {
    get
    set(value)
  }
  open var checkQueries: Swift.Bool {
    get
    set(value)
  }
  open var checkResults: Swift.Bool {
    get
    set(value)
  }
  open var checkVersion: Swift.Bool {
    get
    set(value)
  }
  open var clientInstanceID: Swift.String? {
    get
    set(value)
  }
  open var createReturnsContent: Swift.Bool {
    get
    set(value)
  }
  open var csdlFetcher: SAPOData.CSDLFetcher? {
    get
    set(value)
  }
  open var csdlOptions: Swift.Int {
    get
    set(value)
  }
  open var dataFormat: Swift.Int {
    get
    set(value)
  }
  open var dataVersion: Swift.Int {
    get
    set(value)
  }
  open var databaseOnly: Swift.Bool {
    get
    set(value)
  }
  open var fixMissingEmptyLists: Swift.Bool {
    get
    set(value)
  }
  open var fixMissingNullValues: Swift.Bool {
    get
    set(value)
  }
  open var includeElements: SAPOData.XmlElementList {
    get
    set(value)
  }
  open var includeSchemas: SAPOData.DataSchemaList {
    get
    set(value)
  }
  open var logErrors: Swift.Bool {
    get
    set(value)
  }
  open var logWarnings: Swift.Bool {
    get
    set(value)
  }
  open var metadataFile: Swift.String? {
    get
    set(value)
  }
  open var metadataText: Swift.String? {
    get
    set(value)
  }
  open var metadataURL: Swift.String? {
    get
    set(value)
  }
  open var pingAccept: Swift.String {
    get
    set(value)
  }
  open var pingMethod: Swift.String {
    get
    set(value)
  }
  open var pingResource: Swift.String {
    get
    set(value)
  }
  open var requiresToken: Swift.String? {
    get
    set(value)
  }
  open var requiresType: Swift.Bool {
    get
    set(value)
  }
  open var supportsAlias: Swift.Bool {
    get
    set(value)
  }
  open var supportsBatch: Swift.Bool {
    get
    set(value)
  }
  open var supportsBind: Swift.Bool {
    get
    set(value)
  }
  open var supportsDelta: Swift.Bool {
    get
    set(value)
  }
  open var supportsNext: Swift.Bool {
    get
    set(value)
  }
  open var supportsPatch: Swift.Bool {
    get
    set(value)
  }
  open var supportsUnbind: Swift.Bool {
    get
    set(value)
  }
  open var updateReturnsContent: Swift.Bool {
    get
    set(value)
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ToJSON {
  public static func complexList<C>(value: Swift.Array<C>) -> Swift.String where C : SAPOData.ComplexValue
  public static func complexList<C>(value: Swift.Array<C>, options: Swift.Int = (0 as Int)) -> Swift.String where C : SAPOData.ComplexValue
  public static func entityList<E>(value: Swift.Array<E>) -> Swift.String where E : SAPOData.EntityValue
  public static func entityList<E>(value: Swift.Array<E>, options: Swift.Int = (0 as Int)) -> Swift.String where E : SAPOData.EntityValue
  public static func complex(_ value: SAPOData.ComplexValue, options: Swift.Int = (0 as Int)) -> Swift.String
  public static func complexList(_ value: SAPOData.ComplexValueList, options: Swift.Int = (0 as Int)) -> Swift.String
  public static func dataURI(_ value: Swift.AnyObject?) -> Swift.String
  public static func entity(_ value: SAPOData.EntityValue, options: Swift.Int = (0 as Int)) -> Swift.String
  public static func entityKey(_ value: SAPOData.EntityValue, options: Swift.Int = (0 as Int)) -> Swift.String
  public static func entityList(_ value: SAPOData.EntityValueList, options: Swift.Int = (0 as Int)) -> Swift.String
  @objc deinit
}
extension SAPOData.SortOrder : Swift.Equatable {}
extension SAPOData.SortOrder : Swift.Hashable {}
extension SAPOData.SortOrder : Swift.RawRepresentable {}
extension SAPOData.UpdateMode : Swift.Equatable {}
extension SAPOData.UpdateMode : Swift.Hashable {}
extension SAPOData.UpdateMode : Swift.RawRepresentable {}
