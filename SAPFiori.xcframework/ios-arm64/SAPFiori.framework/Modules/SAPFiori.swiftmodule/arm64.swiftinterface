// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2 (swiftlang-1103.0.32.1 clang-1103.0.32.29)
// swift-module-flags: -target arm64-apple-ios13.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name SAPFiori
import AVFoundation
import AudioToolbox
import AuthenticationServices
import Contacts
import CoreGraphics
import CoreText
import Foundation
import LocalAuthentication
import MapKit
import MobileCoreServices
import Photos
import QuartzCore
import QuickLook
import SAPFiori.RoambiChartKit
import SAPCommon
@_exported import SAPFiori
import Swift
import UIKit.UIGestureRecognizerSubclass
import UIKit
import WebKit
import os.activity
import os
@_inheritsConvenienceInitializers open class FUIChartRangeSummaryItemView : SAPFiori.FUIChartSummaryItemBaseView<SAPFiori.FUIChartRangeSummaryItem> {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public var lowerBoundTitle: SAPFiori.FUIText
  public var lowerBoundTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var upperBoundTitle: SAPFiori.FUIText
  public var upperBoundTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var valueText: SAPFiori.FUIText
  public var valueAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  override public var trendSemanticColor: UIKit.UIColor? {
    get
    set
  }
  public var categoryRange: Swift.ClosedRange<Swift.Int>
  override open func refreshAttributedStrings()
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
public protocol FUIAttachmentAction {
  var title: Swift.String { get }
  func action(onController controller: SAPFiori.FUIAttachmentsViewController)
  func isAvailable(_ alertAction: UIKit.UIAlertAction) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class FUIAttachmentsViewController : UIKit.UIViewController, QuickLook.QLPreviewControllerDataSource, QuickLook.QLPreviewControllerDelegate {
  weak open var delegate: SAPFiori.FUIAttachmentsViewControllerDelegate?
  weak open var dataSource: SAPFiori.FUIAttachmentsViewControllerDataSource?
  public var isEditable: Swift.Bool {
    get
    set
  }
  open var maxItems: Swift.Int {
    get
    set
  }
  public var customAttachmentsTitleFormat: Swift.String?
  public var customCancelString: Swift.String?
  @available(*, deprecated, message: "This property is kept for backwards-compatibility, but has no effect on the view")
  public var customPopupTitleString: Swift.String?
  @objc override dynamic open func viewDidLoad()
  @objc deinit
  open class func instantiateViewController() -> SAPFiori.FUIAttachmentsViewController
  open func numberOfAttachmentActions() -> Swift.Int
  public func addAttachmentAction(_ action: SAPFiori.FUIAttachmentAction)
  public func removeAttachmentAction(at index: Swift.Int)
  public func removeAllAttachmentActions()
  public func reloadData()
  public var previewController: QuickLook.QLPreviewController {
    get
    set
  }
  @objc public func numberOfPreviewItems(in controller: QuickLook.QLPreviewController) -> Swift.Int
  @objc public func previewController(_ controller: QuickLook.QLPreviewController, previewItemAt index: Swift.Int) -> QuickLook.QLPreviewItem
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc public func previewControllerDidDismiss(_ controller: QuickLook.QLPreviewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUISwitchComponent {
  public var value: Swift.Bool {
    get
    set
  }
  public var onChangeHandler: ((Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public var tagsStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUITimelineMarkerCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet public var titleLabel: SAPFiori.FUILabel! {
    get
  }
  @available(*, unavailable, renamed: "timestampLabel")
  public var eventLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var timestampLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var secondaryTimestampLabel: SAPFiori.FUILabel! {
    get
  }
  @available(*, unavailable, renamed: "secondaryTimestampImageView")
  public var eventImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet public var secondaryTimestampImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet public var nodeImageView: SAPFiori.FUIImageView! {
    get
  }
  public var nodeColor: UIKit.UIColor? {
    get
    set
  }
  public var nodeType: SAPFiori.FUITimelineMarkerCell.NodeType {
    get
    set
  }
  public var cardBackground: UIKit.UIView {
    get
  }
  @objc @IBOutlet weak public var timelineBackground: UIKit.UIView! {
    get
  }
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc @IBInspectable public var titleText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "timestampText")
  public var eventText: Swift.String?
  @objc @IBInspectable public var timestampText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var secondaryTimestampText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "secondaryTimestampImage")
  public var eventImage: UIKit.UIImage?
  @objc @IBInspectable public var secondaryTimestampImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var nodeImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var timelineWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var showLeadingTimeline: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var showTrailingTimeline: Swift.Bool {
    @objc get
    @objc set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc override dynamic open func updateConstraints()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
extension FUITimelineMarkerCell {
  public enum NodeType : Swift.Int {
    case beforeStart
    case start
    case beforeEnd
    case end
    case `default`
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
public protocol FUITitleComponent : SAPFiori.FUITitleBaseComponent where Self.Text : SAPFiori.FUIText {
  var title: SAPFiori.FUIText { get }
}
public protocol FUITitleMultiLineComponent : SAPFiori.FUITitleBaseComponent where Self.Text : SAPFiori.FUIMultiLineText {
  var title: SAPFiori.FUIMultiLineText { get }
}
public protocol FUITitleBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype Text : SAPFiori.FUITextProtocol
  var title: Self.Text { get }
  var titleAttributedText: Foundation.NSAttributedString! { get set }
  var titleStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUITitleBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUITitleBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@available(*, unavailable, message: "Obsoleted, not released in 1.1")
public protocol FUITableViewSectionDataSource : AnyObject {
}
@objc public enum FUIBarcodeScanMode : Swift.Int {
  case qr
  case ean_upc
  case one_d
  case all
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
open class FUIGridRowTextItem : SAPFiori.FUIGridRowItem {
  public var text: Swift.String! {
    get
    set
  }
  public var number: Foundation.NSNumber? {
    get
    set
  }
  public var attributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var font: UIKit.UIFont? {
    get
    set
  }
  public var textColor: UIKit.UIColor? {
    get
    set
  }
  public var binding: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text?
  public var textAlignment: UIKit.NSTextAlignment {
    get
    set
  }
  public var numberOfLines: Swift.Int {
    get
    set
  }
  public var lineBreakMode: UIKit.NSLineBreakMode {
    get
    set
  }
  public var numberFormatter: Foundation.NumberFormatter? {
    get
    set
  }
  public var type: SAPFiori.FUIGridRowItemType {
    get
  }
  public init(text: Swift.String)
  public init(number: Foundation.NSNumber, formatter: Foundation.NumberFormatter? = nil)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUIKPIHeader : SAPFiori.FUIDrawingView {
  public var isItemOrderForced: Swift.Bool {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  public init(items: [SAPFiori.FUIKPIContainer])
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
  open var bannerView: SAPFiori.FUIBannerMessageView? {
    get
    set
  }
  public var items: [SAPFiori.FUIKPIContainer] {
    get
    set
  }
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  public var interItemSpacing: CoreGraphics.CGFloat? {
    get
    set
  }
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func prepareForReuse()
  @objc override dynamic open func prepareForInterfaceBuilder()
}
@_inheritsConvenienceInitializers open class FUIBaseItemCollectionViewCell<InnerView> : SAPFiori.FUIBaseDrawingCollectionViewCell<InnerView> where InnerView : SAPFiori.FUIImageCollectionItemView {
  public var itemSize: SAPFiori.FUICollectionCellSize {
    get
    set
  }
  public var detailImageViewSize: CoreGraphics.CGSize {
    get
    set
  }
  public var documentImage: UIKit.UIImage? {
    get
    set
  }
  public var placeholderBackgroundColor: UIKit.UIColor {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIObjectTableViewCell : SAPFiori.FUIObjectBaseTableViewCell<SAPFiori.FUIObjectView> {
  @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  public var detailImageViewSize: CoreGraphics.CGSize {
    get
    set
  }
  @objc override dynamic open func willTransition(to state: SAPFiori.UITableViewCellStateMask)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers open class FUIKPIUnitItem : SAPFiori.FUIKPIViewItem {
  convenience public init(string: Swift.String)
  convenience public init(attributedString: Foundation.NSAttributedString)
  public var attributedString: Foundation.NSAttributedString {
    get
  }
  required public init?(coder aDecoder: Foundation.NSCoder)
  open var style: SAPFiori.FUIKPIViewItemStyle {
    get
  }
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUITitleFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIFormCell, UIKit.UITextFieldDelegate {
  open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = Swift.String
  @objc @IBInspectable public var value: Swift.String {
    @objc get
    @objc set
  }
  public var onChangeHandler: ((Swift.String) -> Swift.Void)?
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBOutlet weak public var valueTextField: SAPFiori.FUITextField! {
    get
  }
  @objc @available(*, unavailable, renamed: "valueTextField")
  @IBOutlet weak public var titleTextField: SAPFiori.FUITextField! {
    get
  }
  public var maxTitleTextLength: Swift.Int
  public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  public var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable public var placeholderText: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
public protocol FUIMapFloorplanComponent {
  var detailPanel: SAPFiori.FUIMapDetailPanel! { get }
  var toolbar: SAPFiori.FUIMapToolbar! { get }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIMapFloorplanComponent {
  public var detailPanel: SAPFiori.FUIMapDetailPanel {
    get
  }
  public var toolbar: SAPFiori.FUIMapToolbar {
    get
  }
}
public protocol Defaultable {
  static var `default`: Self { get }
}
public protocol Enableable {
  static var defaultEnabled: Self { get }
}
extension FUIControlState : SAPFiori.Defaultable, SAPFiori.Enableable {
  public static let `default`: SAPFiori.FUIControlState
  public static let defaultEnabled: SAPFiori.FUIControlState
}
public protocol FUIStyleByTintAttributes : AnyObject {
  associatedtype TintState : SAPFiori.Defaultable, Swift.Hashable
  var tintAttributes: [SAPFiori.FUIPropertyRef : [Self.TintState : [SAPFiori.NSAttributedStringKey : Any]]] { get set }
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  func setTintColor(_ color: UIKit.UIColor, for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  func addAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  func setAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  var tintState: Self.TintState { get set }
}
extension FUIStyleByTintAttributes {
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  public func setTintColor(_ color: UIKit.UIColor, for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  public func addAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
  public func setAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.TintState)
}
public struct FUIDateRange {
  public let startDate: Foundation.Date?
  public let endDate: Foundation.Date?
  public init(startDate: Foundation.Date = Date(), endDate: Foundation.Date = Date())
  public init(startDate: Foundation.Date = Date(), duration: Swift.Int = 1)
}
public protocol FUIReactingToAccessory {
  var isStatusForcedToCenterYAlignment: Swift.Bool { get set }
  func centerYOffsetForAccessory() -> CoreGraphics.CGFloat
}
@_hasMissingDesignatedInitializers open class FUIKPIIconItem : SAPFiori.FUIKPIViewItem {
  convenience public init(_ icon: UIKit.UIImage, _ iconSize: CoreGraphics.CGSize = CGSize(width: 32, height: 32))
  convenience public init(icon: UIKit.UIImage)
  convenience public init(attributedString: Foundation.NSAttributedString)
  open var style: SAPFiori.FUIKPIViewItemStyle {
    get
  }
  public var attributedString: Foundation.NSAttributedString {
    get
  }
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  @objc deinit
}
@objc public class FUIMapLegendFillItem : UIKit.UIView {
  public var fillColor: UIKit.UIColor! {
    get
    set
  }
  public var borderColor: UIKit.UIColor! {
    get
    set
  }
  @objc dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public protocol FUIFootnoteComponent : SAPFiori.FUIFootnoteBaseComponent where Self.Text : SAPFiori.FUIText {
  var footnote: SAPFiori.FUIText { get }
}
public protocol FUIFootnoteMultiLineComponent : SAPFiori.FUIFootnoteBaseComponent where Self.Text : SAPFiori.FUIMultiLineText {
  var footnote: SAPFiori.FUIMultiLineText { get }
}
public protocol FUIFootnoteBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype Text : SAPFiori.FUITextProtocol
  var footnote: Self.Text { get }
  var footnoteAttributedText: Foundation.NSAttributedString! { get set }
  var footnoteStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIFootnoteBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var footnoteStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUIFootnoteBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var footnoteAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
public enum FUIPropertyRef : Swift.String {
  case title
  case subtitle
  case trend
  case trendImage
  case status
  case substatus
  case footnote
  case body
  case icons
  case actionTitle
  case seriesTitles
  case values
  case valuesAxisTitle
  case categoryAxisTitle
  case emptyText
  case kpiText
  case placeholder
  case tags
  case rating
  case lowerBoundTitle
  case upperBoundTitle
  case valueText
  case kpiUnitItem
  case kpiMetricItem
  case kpiIconItem
  case kpiFractionItem
  case detailImage
  case headlineText
  case subheadlineText
  case footnoteText
  case descriptionText
  case statusText
  case substatusText
  case statusImage
  case substatusImage
  case weekNumberText
  case weekDayText
  case monthHeaderText
  case eventView
  case selectionRange
  case selectionSingle
  case headlineLabel
  case subheadlineLabel
  case bodyLabel
  case footnoteLabel
  case descriptionLabel
  case statusLabel
  case statusImageView
  case substatusLabel
  case substatusImageView
  case detailImageView
  case attributeLabel
  case subAttributeLabel
  case timestampLabel
  case secondaryTimestampLabel
  case secondaryTimestampImageView
  case nodeImageView
  case titleLabel
  case `switch`
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIDetailImageViewComponent {
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class FUIActivationScreen : SAPFiori.FUIWelcomeController, UIKit.UITextFieldDelegate {
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIActivationScreen
  @objc @IBOutlet public var headlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet public var detailLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet public var primaryActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @objc @IBOutlet public var subheadlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet public var secondaryActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  public var emailTextField: SAPFiori.FUIAutoResizingTextField {
    get
  }
  weak public var delegate: SAPFiori.FUIWelcomeControllerDelegate?
  @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func didReceiveMemoryWarning()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public class FUIBarcodeScanViewController : UIKit.UIViewController {
  @objc @IBOutlet weak public var closeButton: UIKit.UIBarButtonItem! {
    get
  }
  public var barcodeScanner: SAPFiori.FUIBarcodeScanner! {
    get
    set
  }
  weak public var delegate: SAPFiori.FUIBarcodeScanViewControllerDelegate?
  public var effectiveNavigationController: UIKit.UINavigationController? {
    get
    set
  }
  public var onCloseBarcodeScanView: (() -> Swift.Void)?
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIBarcodeScanViewController
  @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  public func restartScan()
  @objc override dynamic public func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  public func didReceiveScanResult(scanResult: SAPFiori.FUIBarcodeScanResult?)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public protocol FUIBarcodeScanViewControllerDelegate : AnyObject {
  func barcodeScanViewController(_ barcodeScanViewController: SAPFiori.FUIBarcodeScanViewController, didReceiveScanResult scanResult: SAPFiori.FUIBarcodeScanResult?)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FUICollectionViewTableViewCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  @objc @IBOutlet public var collectionView: UIKit.UICollectionView! {
    get
  }
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc deinit
}
public protocol FUITrendComponent : SAPFiori.FUIAttributesConsumer {
  var trend: SAPFiori.FUIText { get }
  var trendImage: UIKit.UIImage? { get set }
  var trendAttributedText: Foundation.NSAttributedString! { get set }
  var trendSemanticColor: UIKit.UIColor? { get set }
  var trendStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var trendImageStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUITrendComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var trendStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var trendImageStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUITrendComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var trendAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@_inheritsConvenienceInitializers open class FUIChartCardCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIChartCardView>, SAPFiori.FUIAttributesConsumer {
  public var chartView: SAPFiori.FUIChartView {
    get
  }
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_hasMissingDesignatedInitializers public class FUIToastMessage {
  public class func show(message: Swift.String, icon: UIKit.UIImage? = FUIIconLibrary.system.success.withRenderingMode(.alwaysTemplate), inWindow window: UIKit.UIWindow? = nil, withDuration duration: Swift.Float = 1.0, maxNumberOfLines lines: Swift.Int = 1)
  public class func show(message: Swift.String, icon: UIKit.UIImage = FUIIconLibrary.system.success.withRenderingMode(.alwaysTemplate), inView view: UIKit.UIView, withDuration duration: Swift.Float = 1.0, maxNumberOfLines lines: Swift.Int = 1)
  @objc deinit
}
public typealias Drawing = SAPFiori.FUIBaseFixedMarginsView & SAPFiori.FUIBackgroundSchemeSupporting & SAPFiori.FUICalculateLayout & SAPFiori.FUIStyleByStringAttributes
@objc @_inheritsConvenienceInitializers open class FUIBaseDrawingView : SAPFiori.Drawing, SAPFiori.FUIAttributesConsumer, SAPFiori.FUIAttributedStringDrawing {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
  weak public var container: SAPFiori.InnerViewContainerProtocols?
  public func setNeedsCalculateLayout()
  public var needsCalculateLayout: Swift.Bool {
    get
    set
  }
  open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  open func prepareForReuse()
  open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public func styleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  weak public var attributesProvider: SAPFiori.FUIAttributesProvider?
  public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]]
  public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  public func setNeedsRefreshAttributedStrings()
  open func refreshAttributedStrings()
  public var needsRefreshAttributedStrings: Swift.Bool {
    get
    set
  }
  public var backingPropertyValueMap: [SAPFiori.FUIPropertyRef : Foundation.NSAttributedString?]
  open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  open var isCompact: Swift.Bool {
    get
  }
  @objc override dynamic open func layoutMarginsDidChange()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open func layoutSubviews()
}
public struct FUIPasscodePolicy {
  public static let passcodePolicyDefaultMinLength: Swift.Int
  public static let passcodePolicyDefaultHasDigit: Swift.Bool
  public static let passcodePolicyDefaultHasUpper: Swift.Bool
  public static let passcodePolicyDefaultHasLower: Swift.Bool
  public static let passcodePolicyDefaultHasSpecial: Swift.Bool
  public static let passcodePolicyDefaultMinUniqueChars: Swift.Int
  public static let passcodePolicyDefaultRetryLimit: Swift.Int
  public static let passcodePolicyDefaultAllowsTouchID: Swift.Bool
  public static let passcodePolicyDefaultIsDigitsOnly: Swift.Bool
  @available(*, unavailable, message: "`passcodePolicyMinCharGroups` property has been removed.")
  public static let passcodePolicyMinCharGroups: Swift.Int
  public static let passcodePolicyNoLimit: Swift.Int
  public var minLength: Swift.Int
  public var hasDigit: Swift.Bool
  public var hasUpper: Swift.Bool
  public var hasLower: Swift.Bool
  public var hasSpecial: Swift.Bool
  public var minUniqueChars: Swift.Int
  public var retryLimit: Swift.Int
  public var allowsTouchID: Swift.Bool
  public var isDigitsOnly: Swift.Bool
  public var isLocalizingDigitsToLatin: Swift.Bool
  @available(*, unavailable, message: "`minCharGroups` property has been removed.")
  public var minCharGroups: Swift.Int
  public init()
  public mutating func addPasscodeRule(passcodeRule: SAPFiori.FUIPasscodeRule)
  public func validate(passcode: Swift.String) -> Swift.Bool
  public func numberOfRequiredGroups() -> Swift.Int
}
extension FUIPasscodePolicy {
  public init?(hcpmsConfiguration param: Swift.Dictionary<Swift.String, Any>)
  public init?(hcpmsPasscodePolicyDictionary dict: Swift.Dictionary<Swift.String, Any>)
}
public struct FUIPasscodeRule {
  public init(displayName: Swift.String, isDisplayed: Swift.Bool, rule: @escaping (Swift.String) -> Swift.Bool)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FUISingleActionAccessoryView : UIKit.UIView {
  public var progressView: SAPFiori.FUISingleActionProgressIndicator {
    get
  }
  public var button: SAPFiori.FUISingleActionButton {
    get
  }
  public var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIChartSummaryTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartSummaryView> {
  public var summaryView: SAPFiori.FUIChartSummaryView {
    get
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
extension FUIMapDetailPanel {
  @objc @_inheritsConvenienceInitializers open class ButtonTableViewCell : UIKit.UITableViewCell {
    @objc final public let button: SAPFiori.FUIButton
    public var buttonHeadlineText: Swift.String? {
      get
      set
    }
    public var buttonSubheadlineText: Swift.String? {
      get
      set
    }
    @objc final public let descriptionLabel: SAPFiori.FUILabel
    open class var reuseIdentifier: Swift.String {
      get
    }
    @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @objc deinit
    @objc override dynamic open func layoutSubviews()
    @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
    @objc override dynamic open func prepareForReuse()
  }
}
@available(*, unavailable, renamed: "FUIMapDetailPanel.ButtonTableViewCell")
public typealias FUIMapDetailButtonTableViewCell = SAPFiori.FUIMapDetailPanel.ButtonTableViewCell
public protocol FUIFormattedStringEditing : AnyObject {
  func attributedString(for string: Swift.String, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]?, cursorPosition: Swift.Int) -> (formattedAttributedString: Foundation.NSAttributedString?, adjustedCursorPosition: Swift.Int)?
  func string(for string: Swift.String, cursorPosition: Swift.Int) -> (formattedString: Swift.String?, adjustedCursorPosition: Swift.Int)?
  func editingString(for obj: Any) -> Swift.String?
  func isPartialStringValid(_ partialString: Swift.String, newEditingString newString: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
}
public struct FUISegmentedControlButtonAttributes {
  public var titleAttributes: [Foundation.NSAttributedString.Key : Any]?
  public var borderColor: UIKit.UIColor?
  public init()
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIPlaceholderDetailImageViewComponent {
  public var detailImageView: SAPFiori.FUIPlaceholderImageView {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUIFeedbackScreen : UIKit.UIViewController {
  open class func createInstanceFromStoryboard() -> SAPFiori.FUIFeedbackScreen
  @objc @IBOutlet public var messageNameLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var messageDetailLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var messageEmphasisLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var messageFootnoteLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var messageActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  public var didTapActionButton: (() -> Swift.Void)?
  @objc deinit
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func updateViewConstraints()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FUIUserConsentForm {
  var isRequired: Swift.Bool { get set }
  var isUserAccepted: Swift.Bool { get }
  var pages: [SAPFiori.FUIUserConsentPage] { get }
}
@_inheritsConvenienceInitializers open class FUIHierarchyItemView : SAPFiori.FUIObjectViewBase, SAPFiori.FUIHierarchyItemComponent {
  final public let title: SAPFiori.FUIMultiLineText
  final public let subtitle: SAPFiori.FUIMultiLineText
  final public let footnote: SAPFiori.FUIMultiLineText
  final public let status: SAPFiori.FUIText
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  open var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  override open func refreshAttributedStrings()
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIMultiLineText
}
@_hasMissingDesignatedInitializers open class FUIKPIMetricItem : SAPFiori.FUIKPIViewItem {
  convenience public init(string: Swift.String)
  convenience public init(attributedString: Foundation.NSAttributedString)
  public var attributedString: Foundation.NSAttributedString {
    get
  }
  open var style: SAPFiori.FUIKPIViewItemStyle {
    get
  }
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  @objc deinit
}
extension UITextField : SAPFiori.Initializable {
}
@_inheritsConvenienceInitializers open class FUITextFieldContentView : SAPFiori.FUIFormCellContentView<SAPFiori.FUITextField, SAPFiori.FUIControlState>, SAPFiori.FUIValueComponent, SAPFiori.FUIPlaceholderComponent, SAPFiori.FUIPropertyFormCell, UIKit.UITextFieldDelegate {
  public var validationMessage: Swift.String?
  public var validationView: SAPFiori.FUIInlineValidationView!
  open var keyName: Swift.String? {
    get
    set
  }
  @available(*, unavailable, message: "This property is no longer available.  Please set the `title.text` property.")
  public var keyLabel: UIKit.UILabel
  public typealias ValueType = Swift.String
  open var value: Swift.String {
    get
    set
  }
  public var valueTextField: UIKit.UITextField {
    get
  }
  public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  final public let placeholder: SAPFiori.FUIText
  open var isEditable: Swift.Bool {
    get
    set
  }
  open var onChangeHandler: ((Swift.String) -> Swift.Void)?
  open var isTrackingLiveChanges: Swift.Bool
  @objc @available(*, deprecated, message: "This property is deprecated.  Please use `placeholder.text`.")
  @IBInspectable public var placeholderText: Swift.String? {
    @objc get
    @objc set
  }
  open var formatter: SAPFiori.FUIFormattedStringEditing? {
    get
    set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  final public let alternativeInputButton: SAPFiori.FUIButton
  open var isAlternativeInputEnabled: Swift.Bool {
    get
    set
  }
  open var valueTextAlignment: UIKit.NSTextAlignment?
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc open func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
  @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  open var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  override open func prepareForReuse()
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public protocol FUIAttributedStringDrawing : SAPFiori.FUIBackingPropertyValueMap {
  func setNeedsRefreshAttributedStrings()
  func refreshAttributedStrings()
}
extension UITextField {
}
@_inheritsConvenienceInitializers open class FUIMKMapFloorplanViewController : SAPFiori.FUIMapFloorplanViewController<SAPFiori.FUIMKMapFloorplanContentView, SAPFiori.MKEditingGeometryWrapper, SAPFiori.MKEditingTypes>, SAPFiori.EditingGeometryProducing {
  open var editingGeometry: MapKit.MKShape? {
    get
  }
  public typealias GeometryType = MapKit.MKShape
  public var mapView: SAPFiori.FUIMKMapView {
    get
  }
  weak open var dataSource: SAPFiori.FUIMKMapViewDataSource? {
    get
    set
  }
  weak open var delegate: SAPFiori.FUIMKMapViewDelegate? {
    get
    set
  }
  open var isClusteringEnabled: Swift.Bool {
    get
    set
  }
  @objc deinit
  @objc override dynamic open func viewDidLoad()
  override open func reloadData()
  open func setLayerHidden(_ layer: SAPFiori.FUIGeometryLayer, isHidden: Swift.Bool = true)
  public var editingPanel: SAPFiori.FUIEditingPanel<MapKit.MKShape>
  @objc override dynamic open func setEditing(_ editing: Swift.Bool, animated: Swift.Bool)
  public func setState(_ state: SAPFiori.FUIMapFloorplan.State, for geometryIndexesInLayer: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
}
@_inheritsConvenienceInitializers open class FUIKPIProgressCardCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIKPIProgressCardView> {
  public var progress: Swift.Float {
    get
    set
  }
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public protocol FUIActionTitleComponent : SAPFiori.FUIAttributesConsumer {
  var actionTitle: SAPFiori.FUIText { get }
  var actionTitleAttributedText: Foundation.NSAttributedString! { get set }
  var actionTitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIActionTitleComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var actionTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUIActionTitleComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var actionTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
public protocol FUIDocumentPickerAttachmentActionDelegate : AnyObject {
  var documentPicker: UIKit.UIDocumentPickerViewController { get }
  func documentPickerAttachmentAction(_ action: SAPFiori.FUIDocumentPickerAttachmentAction, didPickFileAt url: Foundation.URL)
}
@objc @_inheritsConvenienceInitializers public class FUIDocumentPickerAttachmentAction : ObjectiveC.NSObject, SAPFiori.FUIAttachmentAction {
  weak public var delegate: SAPFiori.FUIDocumentPickerAttachmentActionDelegate?
  final public let title: Swift.String
  @objc convenience override dynamic public init()
  public init(withTitle title: Swift.String? = nil)
  public func action(onController controller: SAPFiori.FUIAttachmentsViewController)
  public func isAvailable(_ alertAction: UIKit.UIAlertAction) -> Swift.Bool
  @objc deinit
}
extension FUIDocumentPickerAttachmentAction : UIKit.UIDocumentPickerDelegate {
  @objc dynamic public func documentPicker(_ controller: UIKit.UIDocumentPickerViewController, didPickDocumentsAt urls: [Foundation.URL])
  @objc dynamic public func documentPickerWasCancelled(_ controller: UIKit.UIDocumentPickerViewController)
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectComponent {
  public var detailImage: UIKit.UIImage? {
    get
    set
  }
  public var headlineText: Swift.String? {
    get
    set
  }
  public var subheadlineText: Swift.String? {
    get
    set
  }
  public var footnoteText: Swift.String? {
    get
    set
  }
  public var descriptionText: Swift.String? {
    get
    set
  }
  public var statusText: Swift.String? {
    get
    set
  }
  public var substatusText: Swift.String? {
    get
    set
  }
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  public var substatusImage: UIKit.UIImage? {
    get
    set
  }
}
extension FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers open class UserLocationButton : SAPFiori.FUIMapToolbarButton, UIKit.UIGestureRecognizerDelegate {
    weak public var mapView: MapKit.MKMapView? {
      get
      set
    }
    @objc override dynamic public init(frame: CoreGraphics.CGRect)
    @objc required dynamic public init()
    override public init(type: SAPFiori.FUIMapToolbarButtonType)
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    convenience public init(mapView: MapKit.MKMapView, region: MapKit.MKCoordinateRegion? = nil)
    @available(*, unavailable, message: "Use the new initializer with MKMapView type")
    convenience public init(mapView: UIKit.UIView, region: MapKit.MKCoordinateRegion? = nil)
    @objc public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapToolbar.UserLocationButton")
public typealias FUIMapToolbarUserLocationButton = SAPFiori.FUIMapToolbar.UserLocationButton
@objc @_inheritsConvenienceInitializers open class FUIGridTableViewSummaryFooter : SAPFiori.FUIGridTableViewHeaderFooterView {
  @objc deinit
  @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public enum FUIBackgroundColorScheme : Swift.String, Swift.CaseIterable {
  case device
  case deviceInverse
  case lightConstant
  case darkConstant
  @available(*, deprecated, renamed: "lightConstant")
  public static let light: SAPFiori.FUIBackgroundColorScheme
  @available(*, deprecated, renamed: "darkConstant")
  public static let dark: SAPFiori.FUIBackgroundColorScheme
  @available(*, unavailable, renamed: "dark")
  public static let darkBackground: SAPFiori.FUIBackgroundColorScheme?
  @available(*, unavailable, renamed: "light")
  public static let lightBackground: SAPFiori.FUIBackgroundColorScheme?
  public func inverse() -> SAPFiori.FUIBackgroundColorScheme
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [SAPFiori.FUIBackgroundColorScheme]
  public static var allCases: [SAPFiori.FUIBackgroundColorScheme] {
    get
  }
}
extension FUIBackgroundColorScheme : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
open class FUIProfileMarkerAnnotationView : MapKit.MKMarkerAnnotationView {
  @objc override dynamic open var glyphText: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open var glyphImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc override dynamic open var selectedGlyphImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIBaseCollectionViewCell : UIKit.UICollectionViewCell {
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public var isMomentarySelection: Swift.Bool
  @objc @IBInspectable open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  public var borders: UIKit.UIRectEdge {
    get
    set
  }
  public var borderColor: UIKit.UIColor {
    get
    set
  }
  public var borderWeights: UIKit.UIEdgeInsets {
    get
    set
  }
  public var topBorderWeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var leftBorderWeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var bottomBorderWeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var rightBorderWeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var topBorder: UIKit.UIView {
    get
  }
  public var leftBorder: UIKit.UIView {
    get
  }
  public var bottomBorder: UIKit.UIView {
    get
  }
  public var rightBorder: UIKit.UIView {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIHierarchyItemTableViewCell : SAPFiori.FUIObjectBaseTableViewCell<SAPFiori.FUIHierarchyItemView> {
  @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  final public let hierarchyIndicator: SAPFiori.FUIHierarchyIndicator
  @objc override dynamic open var directionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    @objc get
    @objc set
  }
  @objc override dynamic open func willTransition(to state: SAPFiori.UITableViewCellStateMask)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
extension UIImage {
}
@_inheritsConvenienceInitializers open class FUIRatingControlFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUIRatingControlContentView> {
  public var keyName: Swift.String? {
    get
    set
  }
  public var subtitle: SAPFiori.FUIText {
    get
  }
  public var ratingControl: SAPFiori.FUIRatingControl {
    get
  }
  public var isEditable: Swift.Bool {
    get
    set
  }
  public var value: Swift.Int {
    get
    set
  }
  public var onChangeHandler: ((Swift.Int) -> Swift.Void)? {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
extension JTAppleCalendarView {
  @objc @IBOutlet dynamic public var ibCalendarDelegate: Swift.AnyObject? {
    @objc get
    @objc set
  }
  @objc @IBOutlet dynamic public var ibCalendarDataSource: Swift.AnyObject? {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @objc override dynamic open var delegate: UIKit.UICollectionViewDelegate? {
    @objc get
    @objc set
  }
  @available(*, unavailable)
  @objc override dynamic open var dataSource: UIKit.UICollectionViewDataSource? {
    @objc get
    @objc set
  }
  open var selectedDates: [Foundation.Date] {
    get
  }
}
public protocol FUIChartSummaryDataSource : AnyObject {
  func chartView(_ chartView: SAPFiori.FUIChartView, summaryItemForCategory categoryIndex: Swift.Int) -> SAPFiori.FUIChartSummaryItem?
  func chartView(_ chartView: SAPFiori.FUIChartView, summaryItemForCategoryRange categoryRange: Swift.ClosedRange<Swift.Int>) -> SAPFiori.FUIChartRangeSummaryItem?
}
extension FUIChartSummaryDataSource {
  public func chartView(_ chartView: SAPFiori.FUIChartView, summaryItemForCategoryRange categoryRange: Swift.ClosedRange<Swift.Int>) -> SAPFiori.FUIChartRangeSummaryItem?
}
public protocol FUIChartSummaryDelegate : AnyObject {
  func chartView(_ chartView: SAPFiori.FUIChartView, didSelectCategorySummaryItem summaryItem: SAPFiori.FUIChartSummaryItem)
}
@objc @_inheritsConvenienceInitializers open class FUIChartSummaryView : SAPFiori.FUIDrawingView {
  weak public var chartView: SAPFiori.FUIChartView? {
    get
    set
  }
  weak public var dataSource: SAPFiori.FUIChartSummaryDataSource? {
    get
    set
  }
  weak public var delegate: SAPFiori.FUIChartSummaryDelegate?
  public var seriesTitleText: [SAPFiori.FUIText]
  public func reloadData()
  override open func refreshAttributedStrings()
  override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  public var items: [SAPFiori.FUIChartSummaryItemType] {
    get
    set
  }
  @available(*, unavailable, message: "API is renamed to: `addItem(at categoryIndex: Int)`, and behavior modified.  Item category indexes set here will ONLY be used, if `chartView == nil`.\n\nThe `FUIChartSummaryDataSource` implementation has been updated, to invoke `chartView(: summaryItemForCategory:)` for `categoryIndex = -1`.  As a result, you can use the `dataSource` to supply the implementation of all `FUIChartSummaryItem` instances.\n\nThis API should only be used, if using view stand-alone, without an associated `chartView`.")
  public func addItem(_ item: SAPFiori.FUIChartSummaryItemType)
  @available(*, unavailable, renamed: "removeItem(at:)")
  public func removeItem(atCategoryIndex categoryIndex: Swift.Int)
  @available(*, unavailable, renamed: "removeDataCategoryItems()")
  public func removeVariableItems()
  public func addItem(at categoryIndex: Swift.Int)
  public func removeItem(at categoryIndex: Swift.Int)
  public func removeDataCategoryItems()
  public func removeAll()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  override open func prepareForReuse()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public protocol FUITextProtocol : SAPFiori.FUIAccessibilityElement {
  var text: Swift.String? { get set }
  var textColor: UIKit.UIColor? { get set }
  var font: UIKit.UIFont? { get set }
  func attributes() -> [Foundation.NSAttributedString.Key : Any]
}
@_inheritsConvenienceInitializers public class FUIMultiLineText : SAPFiori.FUIText {
  public var numberOfLines: Swift.Int {
    get
    set
  }
  override public func attributes() -> [SAPFiori.NSAttributedStringKey : Any]
  required public init(stringLiteral value: Swift.String)
  override public init(_ value: Swift.String)
  override public init()
  @objc deinit
}
public class FUIText : SAPFiori.FUITextProtocol, Swift.ExpressibleByStringLiteral {
  public typealias StringLiteralType = Swift.String
  required public init(stringLiteral value: Swift.String)
  public init(_ value: Swift.String)
  public init()
  public var text: Swift.String? {
    get
    set
  }
  public var textColor: UIKit.UIColor? {
    get
    set
  }
  public var font: UIKit.UIFont? {
    get
    set
  }
  public var isDirtyHandler: (() -> Swift.Void)?
  public func attributes() -> [SAPFiori.NSAttributedStringKey : Any]
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  public typealias ExtendedGraphemeClusterLiteralType = SAPFiori.FUIText.StringLiteralType
  public typealias UnicodeScalarLiteralType = SAPFiori.FUIText.StringLiteralType
  @objc deinit
}
public protocol FUIAccessibilityElement {
  var accessibilityLabel: Swift.String? { get set }
  var accessibilityValue: Swift.String? { get set }
  var accessibilityHint: Swift.String? { get set }
  var accessibilityTraits: UIKit.UIAccessibilityTraits { get set }
  var accessibilityPath: UIKit.UIBezierPath? { get set }
  var accessibilityLanguage: Swift.String? { get set }
}
public protocol FUIBarcodeScanner {
  var scanMode: SAPFiori.FUIBarcodeScanMode? { get set }
  var promptMessage: Swift.String { get set }
  var indicatorBorderColor: CoreGraphics.CGColor { get set }
  var indicatorBorderWidth: CoreGraphics.CGFloat { get set }
  var scanResultTransformer: ((Swift.String) -> Swift.String)? { get set }
}
@_inheritsConvenienceInitializers public class FUIBaseDrawingCalendarItemCollectionViewCell<InnerView> : SAPFiori.JTAppleCell, SAPFiori.FUIStyleByStringAttributes, SAPFiori.InnerViewContainer where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  open class var reuseIdentifier: Swift.String {
    get
  }
  public var _innerView: InnerView! {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func layoutMarginsDidChange()
  @objc override dynamic open func prepareForReuse()
  public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable public class FUIDurationPickerFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell {
  @objc @IBOutlet weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @available(*, unavailable, message: "use valueLabel")
  weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBOutlet weak public var valueLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var durationPicker: UIKit.UIDatePicker! {
    get
  }
  open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = Foundation.TimeInterval
  public var value: Foundation.TimeInterval {
    get
    set
  }
  public var onChangeHandler: ((Swift.Double) -> Swift.Void)?
  public var minuteInterval: Swift.Int {
    get
    set
  }
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  public var isTrackingLiveChanges: Swift.Bool
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBInspectable public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  public var durationTextFormat: Swift.String! {
    get
    set
  }
  @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public func prepareForReuse()
  override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @objc override dynamic public var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic public func accessibilityElementCount() -> Swift.Int
  @objc override dynamic public func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic public func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
extension FUIDurationPickerFormCell {
  @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
}
public protocol FUITintAttributesProvider : SAPFiori.FUIStyleByTintAttributes {
  func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: Self.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: Self.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
}
public protocol FUIInitCoordinate {
  init(_ coordinate: CoreLocation.CLLocationCoordinate2D)
}
public protocol FUIInitCoordinates {
  init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
  init(_ coordinates: [CoreLocation.CLLocationCoordinate2D], selectedIndex: Swift.Int)
}
extension UITableView : SAPFiori.InnerViewContainerDimensions {
  public var maxDimensions: CoreGraphics.CGSize? {
    get
  }
  public var minDimensions: CoreGraphics.CGSize? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FUIPlaceholderView : SAPFiori.FUIDrawingView, SAPFiori.FUIPlaceholderComponent {
  public var placeholder: SAPFiori.FUIText
  @objc override dynamic public var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public protocol FUIKPIComponent : SAPFiori.FUIKPIAttributesConsumer {
  var kpiItems: [SAPFiori.FUIKPIViewItem] { get set }
  var kpiAttributedText: Foundation.NSAttributedString! { get set }
  var kpiUnitItemStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var kpiMetricItemStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var kpiIconItemStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var kpiFractionItemStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIKPIComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var kpiUnitItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiMetricItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiIconItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiFractionItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUIKPIComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var kpiAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@_inheritsConvenienceInitializers open class FUIKPITitleBaseView : SAPFiori.FUITitleBaseView, SAPFiori.FUIKPIComponent, SAPFiori.FUIKPIAttributesProvider {
  public var kpiItems: [SAPFiori.FUIKPIViewItem] {
    get
    set
  }
  weak public var kpiAttributesProvider: SAPFiori.FUIKPIAttributesProvider?
  public func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  public func kpiParagraphStyle() -> UIKit.NSParagraphStyle
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public protocol FUIPolygon : SAPFiori.FUIGeometry {
}
extension MKPolygon : SAPFiori.FUIPolygon {
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FUIAutoResizingTextField : SAPFiori.FUITextField {
  public var defaultMinimumWidth: CoreGraphics.CGFloat
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIStyleByTintAttributes, Self.InnerView.TintState == SAPFiori.FUICalendarItemState {
  public var tintState: SAPFiori.FUICalendarItemState {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIStyleByTintAttributes, Self.InnerView.TintState == SAPFiori.FUIControlState {
  public var tintState: SAPFiori.FUIControlState {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIStyleByTintAttributes, Self.InnerView.TintState == SAPFiori.FUISwitchControlState {
  public var tintState: SAPFiori.FUISwitchControlState {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIStyleByTintAttributes {
  public func addTintAttributes(_ attributes: [SAPFiori.NSAttributedStringKey : Any], for property: SAPFiori.FUIPropertyRef, state: Self.InnerView.TintState)
  public func setTintAttributes(_ attributes: [Foundation.NSAttributedString.Key : Any], for property: SAPFiori.FUIPropertyRef, state: Self.InnerView.TintState)
}
public class FUIFilterItem : Swift.Equatable {
  public var title: Swift.String
  public var isFavorite: Swift.Bool
  public var isActive: Swift.Bool
  public var key: Swift.String?
  public init(_ title: Swift.String)
  convenience public init(_ title: Swift.String, isFavorite: Swift.Bool, isActive: Swift.Bool)
  public static func == (lhs: SAPFiori.FUIFilterItem, rhs: SAPFiori.FUIFilterItem) -> Swift.Bool
  @objc deinit
}
public protocol FUIFilterResultsUpdating : AnyObject {
  func updateFilterResults(for filterFeedbackControl: SAPFiori.FUIFilterFeedbackControl)
}
open class FUIFilterGroup {
  public init()
  public var items: [SAPFiori.FUIFilterItem]
  public var isMutuallyExclusive: Swift.Bool
  public var allowsEmptySelection: Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIFilterFeedbackControl : UIKit.UIView {
  public var filterGroups: [SAPFiori.FUIFilterGroup] {
    get
    set
  }
  weak public var filterResultsUpdater: SAPFiori.FUIFilterResultsUpdating?
  public var collectionView: UIKit.UICollectionView {
    get
  }
  public var borders: UIKit.UIRectEdge
  public var filterItems: [SAPFiori.FUIFilterItem] {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  public func setContentOffset(_ contentOffset: CoreGraphics.CGPoint, animated: Swift.Bool)
  public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIItemCollectionViewCell : SAPFiori.FUIBaseItemCollectionViewCell<SAPFiori.FUICollectionItemView> {
  public var isPreservingImageSpacing: Swift.Bool {
    get
    set
  }
  @objc @available(*, deprecated, renamed: "detailImageView")
  @IBInspectable public var contentImageView: SAPFiori.FUIImageView {
    @objc get
  }
  @available(*, deprecated, renamed: "title")
  public var titleLabel: SAPFiori.FUIText {
    get
  }
  @objc @available(*, deprecated, renamed: "detailImageView")
  @IBInspectable public var contentImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @available(*, deprecated, renamed: "title")
  @IBInspectable public var titleText: Swift.String? {
    @objc get
    @objc set
  }
  public var primaryAction: SAPFiori.FUIButton {
    get
  }
  public var secondaryAction: SAPFiori.FUIButton {
    get
  }
  public var actionLayout: SAPFiori.FUIControlLayout {
    get
    set
  }
  @available(*, unavailable, message: "No longer supported")
  open var accessoryType: SAPFiori.UITableViewCellAccessoryType
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@available(*, deprecated, renamed: "FUIItemCollectionViewCell")
public typealias FUISimpleCollectionViewCell = SAPFiori.FUIItemCollectionViewCell
@objc @_inheritsConvenienceInitializers final public class FUILabelProxy : SAPFiori.FUILabel {
  @objc override final public var attributedText: Foundation.NSAttributedString? {
    @objc get
    @objc set
  }
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
@_inheritsConvenienceInitializers open class FUIObjectCard : SAPFiori.FUIBaseAccessoryDrawingCollectionViewCell<SAPFiori.FUIObjectCardContentView> {
  public var iconsColumnWidth: CoreGraphics.CGFloat {
    get
    set
  }
  public var trailingProperties: [SAPFiori.FUIObjectCardContentView.OrderedPropertyRef] {
    get
    set
  }
  public var rating: Swift.Int? {
    get
    set
  }
  open var actionAccessoryView: SAPFiori.FUISingleActionAccessoryView? {
    get
  }
  open var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
public protocol FUIInlineValidation {
  var validationMessage: Swift.String? { get set }
  var validationView: SAPFiori.FUIInlineValidationView! { get }
}
@objc @_inheritsConvenienceInitializers open class FUIInlineValidationView : SAPFiori.NibDesignable {
  @objc @IBOutlet weak public var backgroundView: UIKit.UIView! {
    get
  }
  @objc @IBOutlet weak public var separator: UIKit.UIView! {
    get
  }
  @objc @IBOutlet weak public var titleLabel: SAPFiori.FUILabel! {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUITitleMultiLineComponent {
  public var title: SAPFiori.FUIMultiLineText {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUITitleComponent {
  public var title: SAPFiori.FUIText {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUITitleBaseComponent {
  public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIMapView {
}
public struct FUIMapFloorplan {
  public enum State {
    case `default`, selected, unselected, disabled
    public static func == (a: SAPFiori.FUIMapFloorplan.State, b: SAPFiori.FUIMapFloorplan.State) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
}
extension MKMapView : SAPFiori.FUIMapView {
}
public protocol FUIInfoViewControllerDelegate : AnyObject {
  func primaryButtonTouched(on viewController: SAPFiori.FUIInfoViewController)
  func secondaryButtonTouched(on viewController: SAPFiori.FUIInfoViewController)
}
@objc @_inheritsConvenienceInitializers open class FUIInfoViewController : UIKit.UIViewController, AuthenticationServices.ASWebAuthenticationPresentationContextProviding {
  weak open var delegate: SAPFiori.FUIInfoViewControllerDelegate!
  @objc @IBOutlet weak public var loadingIndicatorView: SAPFiori.FUILoadingIndicatorView!
  public var showsLoadingIndicatorText: Swift.Bool
  @objc @IBOutlet weak public var informationTextView: UIKit.UITextView!
  @objc @IBOutlet weak public var titleTextView: UIKit.UITextView!
  @objc @IBOutlet weak public var primaryButton: SAPFiori.FUIOnboardingButton!
  @objc @IBOutlet weak public var secondaryButton: SAPFiori.FUIOnboardingButton!
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIInfoViewController
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillLayoutSubviews()
  @available(iOS 13.0, *)
  @objc open func presentationAnchor(for session: AuthenticationServices.ASWebAuthenticationSession) -> AuthenticationServices.ASPresentationAnchor
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public enum FUIStyleType {
  case text([SAPFiori.FioriStyle])
  case image([SAPFiori.FioriStyle])
  case `switch`([SAPFiori.FioriStyle])
}
public enum FUIStyleClassSource : Swift.Int {
  case sdk
  case developer
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct FioriStyle : Swift.Hashable {
  public init(styleClass: Swift.String)
  public var styleClass: Swift.String
  public var hashValue: Swift.Int {
    get
  }
}
extension FioriStyle : Swift.RawRepresentable {
  public typealias RawValue = Swift.String
  public init?(rawValue: SAPFiori.FioriStyle.RawValue)
  public var rawValue: SAPFiori.FioriStyle.RawValue {
    get
  }
}
public enum FDLFontStyle {
  public static let headline: SAPFiori.FioriStyle
  public static let subheadline: SAPFiori.FioriStyle
  public static let footnote: SAPFiori.FioriStyle
  public static let body: SAPFiori.FioriStyle
  public static let callout: SAPFiori.FioriStyle
  public static let caption1: SAPFiori.FioriStyle
  public static let caption2: SAPFiori.FioriStyle
  public static let title1: SAPFiori.FioriStyle
  public static let title2: SAPFiori.FioriStyle
  public static let title3: SAPFiori.FioriStyle
  public static let kpiNumber: SAPFiori.FioriStyle
  public static let kpiNumber2: SAPFiori.FioriStyle
}
public enum FDLStyle {
  public static let barButtonItem: SAPFiori.FioriStyle
}
@_inheritsConvenienceInitializers open class FUIKeyValueFormCell : SAPFiori.FUINoteFormCell {
  public var keyText: SAPFiori.FUIText {
    get
  }
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
extension FUIKeyValueFormCell : SAPFiori.FUIPropertyFormCell {
  open var keyName: Swift.String? {
    get
    set
  }
}
@objc open class FUIMapToolbar : UIKit.UIView, SAPFiori.FUIBackgroundSchemeSupporting {
  public var items: [SAPFiori.FUIMapToolbarButton] {
    get
    set
  }
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public init(mapView pinnedView: UIKit.UIView)
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIHierarchyViewController : UIKit.UIViewController, SAPFiori.FUIHierarchyViewDataSource, SAPFiori.FUIHierarchyViewDelegate {
  final public let hierarchyView: SAPFiori.FUIHierarchyView
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  open func rootUUID(in hierarchyView: SAPFiori.FUIHierarchyView) -> Swift.String?
  open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, numberOfChildrenForItemWith uuid: Swift.String) -> Swift.Int
  open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, uuidForChildItemAt index: Swift.Int, with parentUUID: Swift.String) -> Swift.String
  open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, cellForItemWith uuid: Swift.String) -> SAPFiori.FUIHierarchyCollectionItem
  open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, prefetchDataForItemsWith uuids: [Swift.String])
  open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, parentForItemWith uuid: Swift.String) -> Swift.String?
  open func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, titleForItemWith uuid: Swift.String) -> Swift.String?
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIPlaceholderComponent {
  public var placeholder: SAPFiori.FUIText {
    get
  }
  public var placeholderAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var placeholderStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var placeholderNuiClass: Swift.String? {
    get
    set
  }
}
public struct FUIBarcodeScanResult {
  public let scanResultString: Swift.String
}
@_hasMissingDesignatedInitializers open class FUIControlStateTintAttributesProvider : SAPFiori.FUITintAttributesProvider {
  public typealias TintState = SAPFiori.FUIControlState
  open var tintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIControlState : [SAPFiori.NSAttributedStringKey : Any]]]
  open var tintState: SAPFiori.FUIControlState
  public func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlStateTintAttributesProvider.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlStateTintAttributesProvider.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
public typealias NSAttributedStringKey = Foundation.NSAttributedString.Key
public typealias UICollectionViewScrollDirection = UIKit.UICollectionView.ScrollDirection
public typealias UICollectionViewScrollPosition = UIKit.UICollectionView.ScrollPosition
public typealias UIControlContentHorizontalAlignment = UIKit.UIControl.ContentHorizontalAlignment
public typealias UIControlContentVerticalAlignment = UIKit.UIControl.ContentVerticalAlignment
public typealias UIControlEvents = UIKit.UIControl.Event
public typealias UIControlState = UIKit.UIControl.State
public typealias UIFontTextStyle = UIKit.UIFont.TextStyle
public typealias UIGestureRecognizerState = UIKit.UIGestureRecognizer.State
public typealias UITableViewCellAccessoryType = UIKit.UITableViewCell.AccessoryType
public typealias UITableViewCellSelectionStyle = UIKit.UITableViewCell.SelectionStyle
public typealias UITableViewCellSeparatorStyle = UIKit.UITableViewCell.SeparatorStyle
public typealias UITableViewCellStateMask = UIKit.UITableViewCell.StateMask
public typealias UITableViewCellStyle = UIKit.UITableViewCell.CellStyle
public typealias UITableViewStyle = UIKit.UITableView.Style
public typealias UITextBorderStyle = UIKit.UITextField.BorderStyle
public typealias UIViewContentMode = UIKit.UIView.ContentMode
public typealias UIViewTintAdjustmentMode = UIKit.UIView.TintAdjustmentMode
@objc @_inheritsConvenienceInitializers open class FUIUserConsentPageView : SAPFiori.FUIDrawingView, SAPFiori.FUIUserConsentPageComponent {
  public var title: SAPFiori.FUIText {
    get
  }
  public var body: SAPFiori.FUIText {
    get
  }
  public var actionTitle: SAPFiori.FUIText {
    get
  }
  public var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)?
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc open func actionButtonClicked()
  override open func refreshAttributedStrings()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIText
}
public protocol FUIMKMapViewDataSource : AnyObject {
  func numberOfLayers(in mapView: MapKit.MKMapView) -> Swift.Int
  func mapView(_ mapView: MapKit.MKMapView, layerAtIndex index: Swift.Int) -> SAPFiori.FUIGeometryLayer
  func mapView(_ mapView: MapKit.MKMapView, geometriesForLayer layer: SAPFiori.FUIGeometryLayer) -> [SAPFiori.FUIAnnotation]
}
public protocol FUIActivityControlDelegate : AnyObject {
  func activityControl(_ activityControl: SAPFiori.FUIActivityControl, didSelectActivity activityItem: SAPFiori.FUIActivityItem)
}
public struct FUIActivityItem : Swift.Equatable, Swift.Hashable {
  public static var phone: SAPFiori.FUIActivityItem {
    get
  }
  public static var email: SAPFiori.FUIActivityItem {
    get
  }
  public static var message: SAPFiori.FUIActivityItem {
    get
  }
  public static var videoCall: SAPFiori.FUIActivityItem {
    get
  }
  public static var detail: SAPFiori.FUIActivityItem {
    get
  }
  public let icon: UIKit.UIImage!
  public let identifier: Swift.String!
  public init(icon: UIKit.UIImage?, identifier: Swift.String)
  public static func == (lhs: SAPFiori.FUIActivityItem, rhs: SAPFiori.FUIActivityItem) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class FUIActivityControl : SAPFiori.NibDesignable, SAPFiori.FUIBackgroundSchemeSupporting {
  public var activityItems: [SAPFiori.FUIActivityItem : SAPFiori.FUIButton]
  weak public var delegate: SAPFiori.FUIActivityControlDelegate?
  public var maxVisibleItems: Swift.Int {
    get
    set
  }
  public var itemSize: CoreGraphics.CGSize? {
    get
    set
  }
  public var spacing: CoreGraphics.CGFloat {
    get
    set
  }
  public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  public func addActivity(_ activity: SAPFiori.FUIActivityItem)
  public func addActivities(_ activities: [SAPFiori.FUIActivityItem])
  @objc deinit
}
public typealias FUIObjectCardComponent = SAPFiori.FUICompressedTagsComponent & SAPFiori.FUIDetailImageViewComponent & SAPFiori.FUIFootnoteMultiLineComponent & SAPFiori.FUIIconsComponent & SAPFiori.FUIStatusImageComponent & SAPFiori.FUISubtitleMultiLineComponent & SAPFiori.FUITitleMultiLineComponent
@objc @_inheritsConvenienceInitializers open class FUICheckoutIndicatorView : SAPFiori.NibDesignable {
  public enum DisplayState : Swift.Equatable {
    case inProgress
    case completed
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
    public static func == (a: SAPFiori.FUICheckoutIndicatorView.DisplayState, b: SAPFiori.FUICheckoutIndicatorView.DisplayState) -> Swift.Bool
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  public var displayState: SAPFiori.FUICheckoutIndicatorView.DisplayState {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  public func changeDisplayState(to newState: SAPFiori.FUICheckoutIndicatorView.DisplayState, completion: (() -> Swift.Void)? = nil)
  @objc deinit
}
public enum FUIChartType {
  case line
  case column
  case combo
  case bar
  case stackedColumn
  case waterfall
  case area
  case scatter
  case bubble
  public static func == (a: SAPFiori.FUIChartType, b: SAPFiori.FUIChartType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum FUIChartSelectionMode {
  case single
  case all
  public static func == (a: SAPFiori.FUIChartSelectionMode, b: SAPFiori.FUIChartSelectionMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum ChartDefaultCategorySelectionMode {
  case index
  case first
  case last
  public static func == (a: SAPFiori.ChartDefaultCategorySelectionMode, b: SAPFiori.ChartDefaultCategorySelectionMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol FUIChartPlotItem {
  var seriesIndex: Swift.Int { get }
  var categoryIndex: Swift.Int { get }
  func value(dimension: Swift.Int) -> Swift.Double?
}
extension FUIChartPlotItem {
  public func value(dimension: Swift.Int = 0) -> Swift.Double?
}
public protocol FUIValueComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype ValueType
  var value: Self.ValueType { get set }
  var valueAttributedText: Foundation.NSAttributedString { get set }
  var valueStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIValueComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var valueStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIMKRoutingMapViewDelegate : SAPFiori.FUIMKMapViewDelegate {
  func mapView(_ mapView: MapKit.MKMapView, didSelectRouteAt index: Swift.Int)
  func mapView(_ mapView: MapKit.MKMapView, didSelectVertexAt vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int)
  func mapView(_ mapView: MapKit.MKMapView, didDeselectRouteAt index: Swift.Int)
  func mapView(_ mapView: MapKit.MKMapView, didDeselectVertexAt vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int)
  func mapView(_ mapView: MapKit.MKMapView, willRender overlayRenderer: MapKit.MKOverlayRenderer, forRouteAt index: Swift.Int, in state: SAPFiori.FUIMapFloorplan.State)
  func mapView(_ mapView: MapKit.MKMapView, willRender annotationView: MapKit.MKAnnotationView, forVertexAtIndex vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int, in state: SAPFiori.FUIMapFloorplan.State)
}
extension FUIMKRoutingMapViewDelegate {
  public func mapView(_ mapView: MapKit.MKMapView, didSelectRouteAt index: Swift.Int)
  public func mapView(_ mapView: MapKit.MKMapView, didSelectVertexAt vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselectRouteAt index: Swift.Int)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselectVertexAt vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int)
  public func mapView(_ mapView: MapKit.MKMapView, willRender overlayRenderer: MapKit.MKOverlayRenderer, forRouteAt index: Swift.Int, in state: SAPFiori.FUIMapFloorplan.State)
  public func mapView(_ mapView: MapKit.MKMapView, willRender annotationView: MapKit.MKAnnotationView, forVertexAtIndex vertexIndex: Swift.Int, inRouteAt routeIndex: Swift.Int, in state: SAPFiori.FUIMapFloorplan.State)
}
public struct CellState {
  public let isSelected: Swift.Bool
  public let text: Swift.String
  public let dateBelongsTo: SAPFiori.DateOwner
  public let date: Foundation.Date
  public let day: SAPFiori.DaysOfWeek
  public let row: () -> Swift.Int
  public let column: () -> Swift.Int
  public let dateSection: () -> (range: (start: Foundation.Date, end: Foundation.Date), month: Swift.Int, rowCount: Swift.Int)
  public let selectedPosition: () -> SAPFiori.SelectionRangePosition
  public var cell: () -> SAPFiori.JTAppleCell?
  public var selectionType: SAPFiori.SelectionType?
}
public struct ConfigurationParameters {
  public init(startDate: Foundation.Date, endDate: Foundation.Date, numberOfRows: Swift.Int = 6, calendar: Foundation.Calendar = Calendar.current, generateInDates: SAPFiori.InDateCellGeneration = .forAllMonths, generateOutDates: SAPFiori.OutDateCellGeneration = .tillEndOfGrid, firstDayOfWeek: SAPFiori.DaysOfWeek = .sunday, hasStrictBoundaries: Swift.Bool? = nil)
}
public struct MonthSize {
  public init(defaultSize: CoreGraphics.CGFloat, months: [CoreGraphics.CGFloat : [SAPFiori.MonthsOfYear]]? = nil, dates: [CoreGraphics.CGFloat : [Foundation.Date]]? = nil)
}
public struct Month {
  public let inDates: Swift.Int
  public let outDates: Swift.Int
  public let rows: Swift.Int
  public let name: SAPFiori.MonthsOfYear
  public let numberOfDaysInMonth: Swift.Int
}
public struct DateSegmentInfo {
  public let indates: [(date: Foundation.Date, indexPath: Foundation.IndexPath)]
  public let monthDates: [(date: Foundation.Date, indexPath: Foundation.IndexPath)]
  public let outdates: [(date: Foundation.Date, indexPath: Foundation.IndexPath)]
  public var minDate: Foundation.Date? {
    get
  }
  public var maxDate: Foundation.Date? {
    get
  }
}
open class FUIUserConsentPage : SAPFiori.FUIUserConsentPageComponent {
  public var titleStyleClassPath: [SAPFiori.FioriStyle]
  public var bodyStyleClassPath: [SAPFiori.FioriStyle]
  public var actionTitleStyleClassPath: [SAPFiori.FioriStyle]
  public var attributesProvider: SAPFiori.FUIAttributesProvider?
  public var title: SAPFiori.FUIText
  public var titleAttributedText: Foundation.NSAttributedString!
  public var body: SAPFiori.FUIText
  public var bodyAttributedText: Foundation.NSAttributedString!
  public var actionTitle: SAPFiori.FUIText
  public var actionTitleAttributedText: Foundation.NSAttributedString!
  public var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)?
  public init()
  @objc deinit
  public typealias Text = SAPFiori.FUIText
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIChartTitleTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartTitleView> {
  @objc override dynamic public var nuiClass: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class FUIProgressIndicatorControl : SAPFiori.NibDesignableControl {
  public enum DisplayState {
    case inProgress
    case loadingPausable
    case loadingStoppable
    case paused
    public static func == (a: SAPFiori.FUIProgressIndicatorControl.DisplayState, b: SAPFiori.FUIProgressIndicatorControl.DisplayState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var progress: Swift.Float {
    get
  }
  public var displayState: SAPFiori.FUIProgressIndicatorControl.DisplayState {
    get
  }
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc override dynamic open func tintColorDidChange()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  open func update(progress: Swift.Float, animated: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  public func changeDisplayState(to newState: SAPFiori.FUIProgressIndicatorControl.DisplayState)
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIBodyMultiLineComponent {
  public var body: SAPFiori.FUIMultiLineText {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIBodyComponent {
  public var body: SAPFiori.FUIText {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIBodyBaseComponent {
  public var bodyAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var bodyStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_inheritsConvenienceInitializers open class FUITitleBaseView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleComponent {
  public var title: SAPFiori.FUIText {
    get
  }
  override open func prepareForReuse()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
  public typealias Text = SAPFiori.FUIText
}
public protocol FUIGeometryTypeWrapper {
  associatedtype PointType : SAPFiori.FUIInitCoordinate
  associatedtype PolylineType : SAPFiori.FUIInitCoordinates
  associatedtype PolygonType : SAPFiori.FUIInitCoordinates
}
@_hasMissingDesignatedInitializers public class FUIGeometryBaseTypeWrapper<PointType, PolylineType, PolygonType> : SAPFiori.FUIGeometryTypeWrapper where PointType : SAPFiori.FUIInitCoordinate, PolylineType : SAPFiori.FUIInitCoordinates, PolygonType : SAPFiori.FUIInitCoordinates {
  @objc deinit
}
public typealias MKEditingTypes = SAPFiori.FUIGeometryBaseTypeWrapper<SAPFiori.MKEditGeometry.Point, SAPFiori.MKEditGeometry.Polyline, SAPFiori.MKEditGeometry.Polygon>
public enum SegmentDestination {
  case next
  case previous
  case start
  case end
  public static func == (a: SAPFiori.SegmentDestination, b: SAPFiori.SegmentDestination) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum OutDateCellGeneration {
  case tillEndOfRow, tillEndOfGrid, off
  public static func == (a: SAPFiori.OutDateCellGeneration, b: SAPFiori.OutDateCellGeneration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum InDateCellGeneration {
  case forFirstMonthOnly, forAllMonths, off
  public static func == (a: SAPFiori.InDateCellGeneration, b: SAPFiori.InDateCellGeneration) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum ReadingOrientation {
  case rightToLeft
  case leftToRight
  public static func == (a: SAPFiori.ReadingOrientation, b: SAPFiori.ReadingOrientation) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum ScrollingMode : Swift.Equatable {
  case stopAtEachCalendarFrame
  case stopAtEachSection
  case stopAtEach(customInterval: CoreGraphics.CGFloat)
  case nonStopToSection(withResistance: CoreGraphics.CGFloat)
  case nonStopToCell(withResistance: CoreGraphics.CGFloat)
  case nonStopTo(customInterval: CoreGraphics.CGFloat, withResistance: CoreGraphics.CGFloat)
  case none
  public static func == (lhs: SAPFiori.ScrollingMode, rhs: SAPFiori.ScrollingMode) -> Swift.Bool
}
public enum DateOwner : Swift.Int {
  case thisMonth, previousMonthWithinBoundary, previousMonthOutsideBoundary, followingMonthWithinBoundary, followingMonthOutsideBoundary
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum MonthsOfYear : Swift.Int {
  case jan, feb, mar, apr, may, jun, jul, aug, sep, oct, nov, dec
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum SelectionRangePosition : Swift.Int {
  case left, middle, right, full, none
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum SelectionType : Swift.String {
  case programatic, userInitiated
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum DaysOfWeek : Swift.Int {
  case sunday, monday, tuesday, wednesday, thursday, friday, saturday
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectHeaderViewBaseComponent {
  public var headlineLabel: SAPFiori.FUILabel {
    get
  }
  public var subheadlineLabel: SAPFiori.FUILabel {
    get
  }
  public var footnoteLabel: SAPFiori.FUILabel {
    get
  }
  public var descriptionLabel: SAPFiori.FUILabel {
    get
  }
  public var statusLabel: SAPFiori.FUILabel {
    get
  }
  public var substatusLabel: SAPFiori.FUILabel {
    get
  }
  public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  public var splitPercent: CoreGraphics.CGFloat {
    get
    set
  }
  public var isApplyingSplitPercent: Swift.Bool {
    get
    set
  }
}
extension FUIObjectComponent where Self : SAPFiori.FUIObjectHeaderViewBaseComponent {
  public var detailImage: UIKit.UIImage? {
    get
    set
  }
  public var headlineText: Swift.String? {
    get
    set
  }
  public var subheadlineText: Swift.String? {
    get
    set
  }
  public var footnoteText: Swift.String? {
    get
    set
  }
  public var descriptionText: Swift.String? {
    get
    set
  }
  public var statusText: Swift.String? {
    get
    set
  }
  public var substatusText: Swift.String? {
    get
    set
  }
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  public var substatusImage: UIKit.UIImage? {
    get
    set
  }
}
@_inheritsConvenienceInitializers open class FUIObjectCollectionViewCell : SAPFiori.FUITableViewAccessoryDrawingCollectionViewCell<SAPFiori.FUIObjectView> {
  public var detailImageViewSize: CoreGraphics.CGSize {
    get
    set
  }
  public var iconsColumnWidth: CoreGraphics.CGFloat {
    get
    set
  }
  open var actionAccessoryView: SAPFiori.FUISingleActionAccessoryView? {
    get
  }
  open var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_inheritsConvenienceInitializers open class FUIMKRoutingFloorplanViewController : SAPFiori.FUIMKMapFloorplanViewController {
  open var routeAnnotations: [SAPFiori.FUIAnnotation] {
    get
  }
  open var routeOverlays: [SAPFiori.FUIOverlay] {
    get
  }
  open var calloutAnnotations: [SAPFiori.FUICalloutAnnotation] {
    get
  }
  @objc override dynamic open func viewDidLoad()
  override open func reloadData()
  open func selectRoute(at index: Swift.Int)
  open func selectStop(at indexPath: Foundation.IndexPath)
  open func deselectRoute()
  open func deselectStop()
  @objc deinit
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
}
public protocol FUIMapRenderer {
}
extension MKOverlayRenderer : SAPFiori.FUIMapRenderer {
}
@objc @_inheritsConvenienceInitializers public class FUIMapDetailPanelViewController : UIKit.UIViewController {
  public var tableView: UIKit.UITableView {
    get
  }
  @objc override dynamic open var preferredContentSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class FUIMapDetailPanelContentViewController : SAPFiori.FUIMapDetailPanelViewController {
  final public var headlineText: Swift.String! {
    get
    set
  }
  final public var subheadlineText: Swift.String! {
    get
    set
  }
  final public var didSelectTitleHandler: (() -> Swift.Void)? {
    get
    set
  }
  final public var closeButton: SAPFiori.FUIButton {
    get
  }
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override final public func viewDidLayoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIHierarchyView : UIKit.UIView {
  final public let header: SAPFiori.FUIHierarchyViewHeader
  weak public var dataSource: SAPFiori.FUIHierarchyViewDataSource?
  weak public var delegate: SAPFiori.FUIHierarchyViewDelegate?
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
  open func register(_ cellClass: Swift.AnyClass?, forCellWithReuseIdentifier identifier: Swift.String)
  public func dequeueReusableCell(withReuseIdentifier identifier: Swift.String, with uuid: Swift.String) -> SAPFiori.FUIHierarchyCollectionItem
  public func cellForItem(with uuid: Swift.String) -> SAPFiori.FUIHierarchyCollectionItem?
  open func reloadData()
  open func insertChildren(of parent: Swift.String, at indexes: Foundation.IndexSet)
  open func removeChildren(of parent: Swift.String, at indexes: Foundation.IndexSet)
  open func invalidateParent(of child: Swift.String)
  open func invalidateChildren(of parent: Swift.String)
  open func invalidateItems(with uuids: [Swift.String])
  @objc override dynamic open func didMoveToSuperview()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
}
public protocol FUIStyleByStringAttributes : AnyObject {
  var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] { get set }
  var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] { get set }
}
public struct FUIMapLegendIcon {
  public init(glyphImage: SAPFiori.FUIGlyphImage)
}
public protocol FUIBodyComponent : SAPFiori.FUIBodyBaseComponent where Self.Text : SAPFiori.FUIText {
  var body: SAPFiori.FUIText { get }
}
public protocol FUIBodyMultiLineComponent : SAPFiori.FUIBodyBaseComponent where Self.Text : SAPFiori.FUIMultiLineText {
  var body: SAPFiori.FUIMultiLineText { get }
}
public protocol FUIBodyBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype Text : SAPFiori.FUITextProtocol
  var body: Self.Text { get }
  var bodyAttributedText: Foundation.NSAttributedString! { get set }
  var bodyStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIBodyBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var bodyStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUIBodyBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var bodyAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
public protocol FUIObjectViewComponent : SAPFiori.FUIObjectViewBaseComponent {
  var preserveIconStackSpacing: Swift.Bool { get set }
  var preserveDetailImageSpacing: Swift.Bool { get set }
  var isLimitingHeightToMainContent: Swift.Bool { get set }
}
public protocol FUIObjectViewBaseComponent : AnyObject {
  var headlineLabel: SAPFiori.FUILabel { get }
  var subheadlineLabel: SAPFiori.FUILabel { get }
  var footnoteLabel: SAPFiori.FUILabel { get }
  var descriptionLabel: SAPFiori.FUILabel { get }
  var statusLabel: SAPFiori.FUILabel { get }
  var substatusLabel: SAPFiori.FUILabel { get }
  var statusImageView: SAPFiori.FUIImageView { get }
  var substatusImageView: SAPFiori.FUIImageView { get }
  var detailImageView: SAPFiori.FUIImageView { get }
  var splitPercent: CoreGraphics.CGFloat { get set }
  var isApplyingSplitPercent: Swift.Bool { get set }
}
@objc @_inheritsConvenienceInitializers open class FUIPageViewController : UIKit.UIPageViewController {
  public enum Style {
    case textBased
    case iconBased
    public static func == (a: SAPFiori.FUIPageViewController.Style, b: SAPFiori.FUIPageViewController.Style) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  open var style: SAPFiori.FUIPageViewController.Style {
    get
    set
  }
  open var titleText: SAPFiori.FUIText {
    get
  }
  open var subtitle: SAPFiori.FUIText {
    get
  }
  final public let nextButtonItem: SAPFiori.FUIBarButtonItem
  final public let previousButtonItem: SAPFiori.FUIBarButtonItem
  public var pageIndexFormat: Swift.String?
  @objc override dynamic open var dataSource: UIKit.UIPageViewControllerDataSource? {
    @objc get
    @objc set
  }
  @objc override dynamic open var delegate: UIKit.UIPageViewControllerDelegate? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(transitionStyle style: UIKit.UIPageViewController.TransitionStyle, navigationOrientation: UIKit.UIPageViewController.NavigationOrientation, options: [UIKit.UIPageViewController.OptionsKey : Any]? = nil)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
extension FUIPageViewController : UIKit.UIPageViewControllerDelegate {
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, willTransitionTo pendingViewControllers: [UIKit.UIViewController])
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, didFinishAnimating finished: Swift.Bool, previousViewControllers: [UIKit.UIViewController], transitionCompleted completed: Swift.Bool)
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, spineLocationFor orientation: UIKit.UIInterfaceOrientation) -> UIKit.UIPageViewController.SpineLocation
  @objc dynamic public func pageViewControllerSupportedInterfaceOrientations(_ pageViewController: UIKit.UIPageViewController) -> UIKit.UIInterfaceOrientationMask
  @objc dynamic public func pageViewControllerPreferredInterfaceOrientationForPresentation(_ pageViewController: UIKit.UIPageViewController) -> UIKit.UIInterfaceOrientation
}
extension FUIPageViewController : UIKit.UIPageViewControllerDataSource {
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerBefore viewController: UIKit.UIViewController) -> UIKit.UIViewController?
  @objc dynamic public func pageViewController(_ pageViewController: UIKit.UIPageViewController, viewControllerAfter viewController: UIKit.UIViewController) -> UIKit.UIViewController?
}
@objc public protocol FUIPageViewControllerDataSource : UIKit.UIPageViewControllerDataSource {
  @objc optional func presentationTitle(for pageViewController: SAPFiori.FUIPageViewController) -> Swift.String?
}
@_inheritsConvenienceInitializers open class FUISwitchFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUISwitchFormView> {
  override public var containerIsEnabled: Swift.Bool? {
    get
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc override dynamic open func prepareForReuse()
  public typealias ValueType = Swift.Bool
  public var value: Swift.Bool {
    get
    set
  }
  public var onChangeHandler: ((Swift.Bool) -> Swift.Void)? {
    get
    set
  }
  public var isUpdatingTableView: Swift.Bool {
    get
    set
  }
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "This property has been removed.  Use the `title` property.")
  public var keyLabel: UIKit.UILabel {
    get
  }
  public var switchView: UIKit.UISwitch {
    get
  }
  @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityActivate() -> Swift.Bool
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FUIEmailInputView : SAPFiori.NibDesignable, UIKit.UITextFieldDelegate {
  @objc @IBOutlet @IBInspectable public var emailTextField: SAPFiori.FUIAutoResizingTextField! {
    get
  }
  @objc @IBOutlet public var bottomPaddingViewHeightConstraint: UIKit.NSLayoutConstraint! {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic public func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  public var onTextFieldChangeHandler: ((Swift.String) -> Swift.Void)?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FUIOfflineBannerMessageView : SAPFiori.FUIBannerMessageView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  override open func show(message: Swift.String, withDuration duration: Foundation.TimeInterval = 4, animated: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUISectionLayoutManager : ObjectiveC.NSObject {
  open var section: Swift.Int
  open var offset: CoreGraphics.CGPoint {
    get
    set
  }
  open var inset: UIKit.UIEdgeInsets
  open var sectionWidth: CoreGraphics.CGFloat
  open var numberOfItems: Swift.Int
  open var interItemSpacing: CoreGraphics.CGFloat
  open var lineSpacing: CoreGraphics.CGFloat
  open var itemSizes: [CoreGraphics.CGSize]
  open var headerHeight: CoreGraphics.CGFloat
  open var footerHeight: CoreGraphics.CGFloat
  open var itemFrames: [CoreGraphics.CGRect]
  open var headerFrame: CoreGraphics.CGRect?
  open var footerFrame: CoreGraphics.CGRect?
  open var itemAttributes: [UIKit.UICollectionViewLayoutAttributes]
  open var headerAttribute: UIKit.UICollectionViewLayoutAttributes?
  open var footerAttribute: UIKit.UICollectionViewLayoutAttributes?
  open var needsLayout: Swift.Bool
  open var needsUpdateAttributes: Swift.Bool
  open var bounds: CoreGraphics.CGRect
  open var frame: CoreGraphics.CGRect {
    get
  }
  @objc required override dynamic public init()
  open func prepare()
  open func updateAttributes()
  open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  open func layoutAttributesForItem(at index: Swift.Int) -> UIKit.UICollectionViewLayoutAttributes?
  open func layoutAttributeForHeader() -> UIKit.UICollectionViewLayoutAttributes?
  open func layoutAttributeForFooter() -> UIKit.UICollectionViewLayoutAttributes?
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIUserConsentPageViewController : SAPFiori.FUIBaseDrawingViewController<SAPFiori.FUIUserConsentPageView> {
  open var isMandatory: Swift.Bool
  open var toolbarLeftItemTitle: Swift.String
  open var toolbarRightItemTitle: Swift.String
  weak open var userConsentPageViewControllerDelegate: SAPFiori.FUIUserConsentPageViewControllerDelegate?
  @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FUIMapDetailPanelSearchResultsViewController : SAPFiori.FUIMapDetailPanelViewController {
  public var isApplyingBlurBackground: Swift.Bool {
    get
    set
  }
  final public let searchBar: SAPFiori.FUIMapDetailPanelSearchBar
  @objc override dynamic open var preferredContentSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension FUIMapDetailPanelSearchResultsViewController {
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@objc @_inheritsConvenienceInitializers open class FUICollectionSectionHeaderFooterView : SAPFiori.NibDesignableCollectionReusableView {
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func awakeFromNib()
  public var titleLabel: UIKit.UILabel {
    get
  }
  public var attributeLabel: UIKit.UILabel {
    get
  }
  public var isDisclosureAccessoryHidden: Swift.Bool {
    get
    set
  }
  public var style: SAPFiori.FUISectionHeaderFooterStyle {
    get
    set
  }
  public var didSelectHandler: (() -> Swift.Void)? {
    get
    set
  }
  @nonobjc public func setBackgroundColor(_ color: UIKit.UIColor)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIIconsComponent {
  public var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
}
public struct FUITimelinePreviewNode {
  public static var open: UIKit.UIImage {
    get
  }
  public static var complete: UIKit.UIImage {
    get
  }
  public static var end: UIKit.UIImage {
    get
  }
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "This has been integrated with FUIImageView, please use that instead")
open class FUIPlaceholderImageView : SAPFiori.FUIImageView {
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public init(image: UIKit.UIImage?)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc required dynamic public init()
}
@_inheritsConvenienceInitializers open class FUIChartSummaryItemView : SAPFiori.FUIChartSummaryItemBaseView<SAPFiori.FUIChartSummaryItem>, SAPFiori.FUITitleComponent, SAPFiori.FUIValuesComponent {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  override open func refreshAttributedStrings()
  public var title: SAPFiori.FUIText
  public var values: [Swift.String] {
    get
    set
  }
  public var valuesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var categoryIndex: Swift.Int
  public var isPreservingTitleHeight: Swift.Bool
  public var isPreservingTrendHeight: Swift.Bool
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  public typealias Text = SAPFiori.FUIText
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(*, deprecated, message: "Use `FUIHorizontalScrollCollectionViewLayout` and set `estimatedItemSize` to a non-zero value to enable auto-sizing.")
open class FUIHorizontalScrollDynamicSizeCollectionViewLayout : SAPFiori.FUIHorizontalScrollCollectionViewLayout {
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_hasMissingDesignatedInitializers open class FUIKPIFractionItem : SAPFiori.FUIKPIViewItem {
  convenience public init(string: Swift.String)
  convenience public init(attributedString: Foundation.NSAttributedString)
  public var attributedString: Foundation.NSAttributedString {
    get
  }
  open var style: SAPFiori.FUIKPIViewItemStyle {
    get
  }
  public var accessibilityLabel: Swift.String?
  public var accessibilityValue: Swift.String?
  public var accessibilityHint: Swift.String?
  public var accessibilityTraits: UIKit.UIAccessibilityTraits
  public var accessibilityPath: UIKit.UIBezierPath?
  public var accessibilityLanguage: Swift.String?
  @objc deinit
}
public protocol FUIKPIAttributesProvider : AnyObject {
  func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  func tintAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  func styleSheetAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  func kerningAttribute(for kerningCase: SAPFiori.FUIKPIView.LeadingItemKerning) -> CoreGraphics.CGFloat
  func kpiParagraphStyle() -> UIKit.NSParagraphStyle
}
extension FUIKPIAttributesProvider {
  public func kpiParagraphStyle() -> UIKit.NSParagraphStyle
  public func kerningAttribute(for kerningCase: SAPFiori.FUIKPIView.LeadingItemKerning) -> CoreGraphics.CGFloat
  public func mergedAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  public func tintAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension FUIKPIAttributesProvider where Self : SAPFiori.FUIStyleByStringAttributes {
  public func styleSheetAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension FUIKPIAttributesProvider where Self : SAPFiori.FUITintAttributesProvider {
  public func mergedAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  public func tintAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
}
@objc @_inheritsConvenienceInitializers @available(iOS 11.0, *)
open class FUIMarkerAnnotationView : MapKit.MKMarkerAnnotationView {
  public var priorityIcon: UIKit.UIImage? {
    get
    set
  }
  @objc override dynamic public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
extension FUIMarkerAnnotationView {
  @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  open var stickyZPosition: CoreGraphics.CGFloat {
    get
    set
  }
}
public protocol EditingGeometryProducing {
  associatedtype GeometryType : Swift.Equatable
  var editingGeometry: Self.GeometryType? { get }
}
@_inheritsConvenienceInitializers open class FUIMapFloorplanViewController<InnerView, EditingGeometryWrapper, EditingTypes> : SAPFiori.FUIBaseDrawingViewController<InnerView>, SAPFiori.FUIMapFloorplanComponent where InnerView : SAPFiori.FUIMapFloorplanContentView, EditingGeometryWrapper : SAPFiori.FUIManageRepresentation, EditingTypes : SAPFiori.FUIGeometryTypeWrapper {
  open var isEditable: Swift.Bool {
    get
    set
  }
  open var colorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  open var editingGeometryResultsDisplayMode: SAPFiori.FUICreateGeometryResultsDisplayMode
  open var isEditingExistingObject: Swift.Bool
  open var editingGeometryMapLegendItem: SAPFiori.FUIMapLegendItem? {
    get
    set
  }
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  open func reloadData()
  public var settingsController: UIKit.UIViewController?
  public var detailPanel: SAPFiori.FUIMapDetailPanel! {
    get
  }
  public var toolbar: SAPFiori.FUIMapToolbar! {
    get
  }
  public var legend: SAPFiori.FUIMapLegend
  open func editingPanelWillAppear(createItem: SAPFiori.FUIMapLegendItem)
  @objc override dynamic open func setEditing(_ editing: Swift.Bool, animated: Swift.Bool)
  @objc deinit
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
}
public enum FUICreateGeometryResultsDisplayMode {
  case push
  case present
  public static func == (a: SAPFiori.FUICreateGeometryResultsDisplayMode, b: SAPFiori.FUICreateGeometryResultsDisplayMode) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc public protocol FUIOnboardingScanViewControllerDelegate : AnyObject {
  @objc optional func scanViewController(_ scanViewController: SAPFiori.FUIOnboardingScanViewController, shouldValidateScanResult scanResult: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers public class FUIOnboardingScanViewController : UIKit.UIViewController, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegate {
  public var scanViewTitleString: Swift.String?
  public var scanUnsuccessfulTitleString: Swift.String?
  public var scanUnsuccessfulMessageString: Swift.String?
  public var okButtonString: Swift.String?
  public var invalidQRCodeTitleString: Swift.String?
  public var invalidQRCodeMessageString: Swift.String?
  public var allowPhotoAccessTitleString: Swift.String?
  public var allowPhotoAccessMessageString: Swift.String?
  public var allowCameraAccessTitleString: Swift.String?
  public var allowCameraAccessMessageString: Swift.String?
  public var notNowActionString: Swift.String?
  public var settingsActionString: Swift.String?
  public var barcodeScanner: SAPFiori.FUIBarcodeScanner? {
    get
    set
  }
  public var scanConfirmationView: UIKit.UIView?
  weak public var delegate: SAPFiori.FUIOnboardingScanViewControllerDelegate?
  @objc override dynamic public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIOnboardingScanViewController
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidLayoutSubviews()
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillLayoutSubviews()
  public func didReceiveScanResult(scanResult: SAPFiori.FUIBarcodeScanResult?)
  @objc public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class FUIResizablePopoverContainer : UIKit.UIViewController {
  public var items: [SAPFiori.FUIMapLegendItem] {
    get
    set
  }
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open var preferredContentSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIBaseTableViewCell : UIKit.UITableViewCell {
  public var isMomentarySelection: Swift.Bool
  public var isEnabled: Swift.Bool
  @objc required dynamic public init()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
  @available(*, deprecated, message: "The cell `separators` override API has been disabled, to ensure there are no violations of Apple AppStore policy. The Fiori Design Guidelines for cell separators have been updated.  Please use `.line` preferred Fiori color for cell separator line, and `.backgroundBase` for table view background.")
  public var separators: UIKit.UIRectEdge
  @objc override dynamic open func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open func setEditing(_ editing: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open func willTransition(to state: UIKit.UITableViewCell.StateMask)
  @objc override dynamic open func prepareForReuse()
  open func applyTintColor(forState state: SAPFiori.UIControlState)
  @objc override dynamic open func tintColorDidChange()
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  public func stateDidChange()
  public func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
  open var borders: UIKit.UIRectEdge {
    get
    set
  }
  @objc override dynamic open func layoutSubviews()
}
extension FUIBaseTableViewCell : SAPFiori.FUIStateSelectable, SAPFiori.FUIStateTintable {
}
@_inheritsConvenienceInitializers open class FUITableViewAccessoryDrawingCollectionViewCell<InnerView> : SAPFiori.FUIBaseAccessoryDrawingCollectionViewCell<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIReactingToAccessory, InnerView : SAPFiori.FUIStyleByStringAttributes {
  @objc @IBInspectable open var accessoryType: UIKit.UITableViewCell.AccessoryType {
    @objc get
    @objc set
  }
  @objc override dynamic open func prepareForReuse()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIOnboardingScanConfirmView : SAPFiori.NibDesignable {
  public var confirmationTitleString: Swift.String? {
    get
    set
  }
  public var confirmationMessageString: Swift.String? {
    get
    set
  }
  public var continueButtonTitleString: Swift.String? {
    get
    set
  }
  public var continueButtonWidth: CoreGraphics.CGFloat? {
    get
    set
  }
  @objc @IBOutlet weak public var continueButtonWidthConstraint: UIKit.NSLayoutConstraint!
  weak public var controller: SAPFiori.FUIOnboardingScanViewController? {
    get
    set
  }
  public var hcpServer: Swift.String! {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
public protocol FUIPropertyFormCell : SAPFiori.FUIFormCell {
  var keyName: Swift.String? { get set }
}
@_inheritsConvenienceInitializers open class FUITextFieldFormCell : SAPFiori.FUIInlineValidationDrawingTableViewCell<SAPFiori.FUITextFieldContentView>, SAPFiori.FUIFormCell {
  open var keyName: Swift.String? {
    get
    set
  }
  @available(*, deprecated, message: "This property is has been deprecated.  Please set the `title.text` property.")
  public var keyLabel: UIKit.UILabel
  open var valueTextField: UIKit.UITextField {
    get
  }
  open var isStacked: Swift.Bool {
    get
    set
  }
  open var maxKeyWidth: CoreGraphics.CGFloat {
    get
    set
  }
  open var alternativeInputButton: SAPFiori.FUIButton {
    get
  }
  open var isEditable: Swift.Bool {
    get
    set
  }
  open var isAlternativeInputEnabled: Swift.Bool {
    get
    set
  }
  override open var isEnabled: Swift.Bool {
    get
    set
  }
  open var value: Swift.String {
    get
    set
  }
  open var onChangeHandler: ((Swift.String) -> Swift.Void)? {
    get
    set
  }
  @available(*, deprecated, message: "This property is deprecated.  Please use `placeholder.text`.")
  open var placeholderText: Swift.String? {
    get
    set
  }
  open var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  open var formatter: SAPFiori.FUIFormattedStringEditing? {
    get
    set
  }
  open var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  open var valueTextAlignment: UIKit.NSTextAlignment? {
    get
    set
  }
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  override public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  public typealias ValueType = Swift.String
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@available(*, deprecated, renamed: "FUITextFieldFormCell")
public typealias FUISimplePropertyFormCell = SAPFiori.FUITextFieldFormCell
@_hasMissingDesignatedInitializers public class FUIChartPointAttributes {
  public var isHidden: Swift.Bool
  @objc deinit
}
public protocol FUIHierarchyViewDataSource : AnyObject {
  func rootUUID(in hierarchyView: SAPFiori.FUIHierarchyView) -> Swift.String?
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, numberOfChildrenForItemWith uuid: Swift.String) -> Swift.Int
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, uuidForChildItemAt index: Swift.Int, with parent: Swift.String) -> Swift.String
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, parentForItemWith uuid: Swift.String) -> Swift.String?
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, prefetchDataForItemsWith uuids: [Swift.String])
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, cellForItemWith uuid: Swift.String) -> SAPFiori.FUIHierarchyCollectionItem
  func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, titleForItemWith uuid: Swift.String) -> Swift.String?
}
@_inheritsConvenienceInitializers open class FUIImageCollectionViewCell : SAPFiori.FUIBaseItemCollectionViewCell<SAPFiori.FUIImageCollectionItemView> {
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUISegmentedControlFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell {
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBInspectable public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  public typealias ValueType = Swift.Int
  @objc override dynamic open func prepareForInterfaceBuilder()
  public var value: Swift.Int {
    get
    set
  }
  public var segmentWidth: CoreGraphics.CGFloat {
    get
    set
  }
  public var segmentHeight: CoreGraphics.CGFloat? {
    get
    set
  }
  open var onChangeHandler: ((Swift.Int) -> Swift.Void)?
  @objc public var valueOptions: [Swift.String] {
    @objc get
    @objc set
  }
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  public var apportionsSegmentWidthsByContent: Swift.Bool {
    get
    set
  }
  @objc @available(*, unavailable, renamed: "keyLabel")
  @IBOutlet weak public var titleLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open func prepareForReuse()
  public func setButtonAttributes(_ buttonAttributes: SAPFiori.FUISegmentedControlButtonAttributes, for state: SAPFiori.FUIControlState)
  @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
extension FUISegmentedControlFormCell : UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class FUIModalLoadingIndicatorView : SAPFiori.NibDesignable {
  @objc @IBOutlet weak public var loadingIndicator: SAPFiori.FUILoadingIndicatorView! {
    get
  }
  @objc @IBInspectable public var text: Swift.String? {
    @objc get
    @objc set
  }
  public var isAnimating: Swift.Bool {
    get
  }
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  open func show(inView view: UIKit.UIView, animated: Swift.Bool = true)
  open func dismiss()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
public protocol FUIEventViewComponent : SAPFiori.FUIAttributesConsumer {
  var eventViewColor: UIKit.UIColor? { get set }
  var eventViewStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIEventViewComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var eventViewStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectViewBaseComponent {
  public var headlineLabel: SAPFiori.FUILabel {
    get
  }
  public var subheadlineLabel: SAPFiori.FUILabel {
    get
  }
  public var footnoteLabel: SAPFiori.FUILabel {
    get
  }
  public var descriptionLabel: SAPFiori.FUILabel {
    get
  }
  public var statusLabel: SAPFiori.FUILabel {
    get
  }
  public var substatusLabel: SAPFiori.FUILabel {
    get
  }
  public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  public var splitPercent: CoreGraphics.CGFloat {
    get
    set
  }
  public var isApplyingSplitPercent: Swift.Bool {
    get
    set
  }
}
public protocol FUISubtitleComponent : SAPFiori.FUISubtitleBaseComponent where Self.Text : SAPFiori.FUIText {
  var subtitle: SAPFiori.FUIText { get }
}
public protocol FUISubtitleMultiLineComponent : SAPFiori.FUISubtitleBaseComponent where Self.Text : SAPFiori.FUIMultiLineText {
  var subtitle: SAPFiori.FUIMultiLineText { get }
}
public protocol FUISubtitleBaseComponent : SAPFiori.FUIAttributesConsumer {
  associatedtype Text : SAPFiori.FUITextProtocol
  var subtitle: Self.Text { get }
  var subtitleAttributedText: Foundation.NSAttributedString! { get set }
  var subtitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUISubtitleBaseComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var subtitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUISubtitleBaseComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var subtitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
extension UIView {
  @objc dynamic public var nuiClass: Swift.String? {
    @objc get
    @objc set
  }
  public var styleClassPath: [SAPFiori.FioriStyle]? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUIRoundedFillButton : SAPFiori.FUIButton {
  override public var style: SAPFiori.FUIButtonStyle {
    get
    set
  }
  convenience public init(style: SAPFiori.FUIButtonStyle)
  @objc required dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
public struct FUISearchTag : Swift.Hashable {
  public let text: Swift.String
  public init(_ text: Swift.String)
  public var hashValue: Swift.Int {
    get
  }
  public func equals(_ other: SAPFiori.FUISearchTag) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
}
public func == (lhs: SAPFiori.FUISearchTag, rhs: SAPFiori.FUISearchTag) -> Swift.Bool
public struct FUIHierarchyState : Swift.Hashable {
  public let isSelected: Swift.Bool
  public static let normal: SAPFiori.FUIHierarchyState
  public static let selected: SAPFiori.FUIHierarchyState
  public static func == (a: SAPFiori.FUIHierarchyState, b: SAPFiori.FUIHierarchyState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension FUIHierarchyState : SAPFiori.Enableable {
  public static var defaultEnabled: SAPFiori.FUIHierarchyState
}
extension FUIHierarchyState : SAPFiori.Defaultable {
  public static var `default`: SAPFiori.FUIHierarchyState
}
@_inheritsConvenienceInitializers open class FUIHierarchyIndicator : SAPFiori.FUITintableDrawingView<SAPFiori.FUIHierarchyState>, SAPFiori.FUITitleComponent {
  final public let title: SAPFiori.FUIText
  @objc dynamic open var isMultiline: Swift.Bool
  open var didTapHandler: (() -> Swift.Void)?
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func prepareForReuse()
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
  public typealias Text = SAPFiori.FUIText
}
public protocol FUIAttachmentsViewControllerDataSource : AnyObject {
  func numberOfAttachments(in attachmentsViewController: SAPFiori.FUIAttachmentsViewController) -> Swift.Int
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, iconForAttachmentAtIndex index: Swift.Int) -> (image: UIKit.UIImage, contentMode: SAPFiori.UIViewContentMode)?
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, urlForAttachmentAtIndex index: Swift.Int) -> Foundation.URL?
}
@_inheritsConvenienceInitializers open class FUICardBaseView : SAPFiori.FUIKPITitleBaseView, SAPFiori.FUIStatusComponent {
  public var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer! {
    get
  }
  public var status: SAPFiori.FUIText {
    get
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class FUIMapToolbarButton : SAPFiori.FUIButton {
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  override public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  public var type: SAPFiori.FUIMapToolbarButtonType {
    get
  }
  public init(type: SAPFiori.FUIMapToolbarButtonType)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUILabel : UIKit.UILabel {
  open var onChangeHandler: ((Swift.Optional<Swift.String>) -> Swift.Void)?
  @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  open var insets: UIKit.UIEdgeInsets {
    get
    set
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func drawText(in rect: CoreGraphics.CGRect)
  @objc override dynamic open var numberOfLines: Swift.Int {
    @objc get
    @objc set
  }
  @objc override dynamic open var textColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc override dynamic open var font: UIKit.UIFont! {
    @objc get
    @objc set
  }
  @objc override dynamic open var textAlignment: UIKit.NSTextAlignment {
    @objc get
    @objc set
  }
  @objc override dynamic open var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func copy(_ sender: Any?)
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
public struct FUICollectionCellSize : Swift.Equatable {
  public static let small: SAPFiori.FUICollectionCellSize
  public static let standard: SAPFiori.FUICollectionCellSize
  public static func == (a: SAPFiori.FUICollectionCellSize, b: SAPFiori.FUICollectionCellSize) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class FUIKPIProgressView : SAPFiori.NibDesignableControl, SAPFiori.FUIKPIContainer, SAPFiori.FUIStateTintable, SAPFiori.FUIStateTintableImplementation {
  @available(*, unavailable, message: "This property is no longer required")
  public var shouldCenterKPIView: Swift.Bool
  @available(*, unavailable, message: "It is not required to set this property when adding FUIKPIProgressView items to the FUIKPIHeader")
  public var isArrangedInKPIHeader: Swift.Bool {
    get
    set
  }
  public var metric: Swift.Int
  public var metricFormatter: Foundation.NumberFormatter?
  public var fractionFormatter: Foundation.NumberFormatter?
  public var animationDuration: Swift.Float
  open var didSelectHandler: (() -> Swift.Void)?
  open var isDisplayingCaptionOutsideCircle: Swift.Bool {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc @IBInspectable public var isLarge: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  public var colorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func updateConstraints()
  open var chartSize: SAPFiori.FUIKPIProgressViewSize {
    get
    set
  }
  open var progress: Swift.Float {
    get
    set
  }
  public var captionLabelText: Swift.String! {
    get
    set
  }
  public var items: [SAPFiori.FUIKPIViewItem]? {
    get
    set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  public func applyTintColor(forState state: SAPFiori.UIControlState)
  @objc override dynamic open var forFirstBaselineLayout: UIKit.UIView {
    @objc get
  }
  @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
  public var tintColorForState: [SAPFiori.UIControlState : UIKit.UIColor]
  public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  public func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
  public var _isTintColorOverridden: Swift.Bool
  public var tintableChildren: [SAPFiori.FUIStateTintable]
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc deinit
}
public enum FUIKPIProgressViewSize {
  case small
  case large
  public static func == (a: SAPFiori.FUIKPIProgressViewSize, b: SAPFiori.FUIKPIProgressViewSize) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension FUIKPIProgressView : SAPFiori.FUIStateSelectable {
}
@_inheritsConvenienceInitializers open class FUIGridRowHeaderItem : SAPFiori.FUIGridRowTextItem {
  override public var type: SAPFiori.FUIGridRowItemType {
    get
  }
  @objc deinit
  override public init(text: Swift.String)
  override public init(number: Foundation.NSNumber, formatter: Foundation.NumberFormatter? = super)
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIFootnoteMultiLineComponent {
  public var footnote: SAPFiori.FUIMultiLineText {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIFootnoteComponent {
  public var footnote: SAPFiori.FUIText {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIFootnoteBaseComponent {
  public var footnoteAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var footnoteStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_hasMissingDesignatedInitializers @available(*, unavailable, message: "Obsoleted, not released in 1.1")
open class FUITableViewSection {
  @objc deinit
}
public protocol FUISeriesTitleComponent : SAPFiori.FUIAttributesConsumer {
  var seriesTitles: [SAPFiori.FUIText] { get set }
  var seriesTitlesAttributedText: Foundation.NSAttributedString! { get set }
  var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUISeriesTitleComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@available(*, unavailable, message: "delegate has been obsoleted; implement the `onActivitySelectedHandler`, instead")
public protocol FUIContactCellDelegate : AnyObject {
  func contactCell(_ contactCell: SAPFiori.FUIContactCell, didSelectActivity activityItem: SAPFiori.FUIActivityItem)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUIContactCell : SAPFiori.NibDesignableFUIBaseTableViewCell, SAPFiori.FUIActivityControlDelegate {
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet public var detailImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet weak public var headlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet weak public var subheadlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var descriptionLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var activityControl: SAPFiori.FUIActivityControl! {
    get
  }
  open var onActivitySelectedHandler: ((SAPFiori.FUIActivityItem) -> Swift.Void)?
  public var splitPercent: CoreGraphics.CGFloat {
    get
    set
  }
  @available(*, unavailable, renamed: "splitPercent")
  public var mainStackWidth: CoreGraphics.CGFloat {
    get
    set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func layoutSubviews()
  open func activityControl(_ activityControl: SAPFiori.FUIActivityControl, didSelectActivity activityItem: SAPFiori.FUIActivityItem)
  public var preserveDetailImageSpacing: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var ibDisplayActivityControl: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
public protocol FUIUserConsentPageComponent : SAPFiori.FUIActionTitleComponent, SAPFiori.FUIBodyComponent, SAPFiori.FUITitleComponent {
  var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)? { get set }
}
@objc @_inheritsConvenienceInitializers open class FUIModalProcessingIndicatorView : SAPFiori.NibDesignable {
  public enum BackgroundMode {
    case translucentWhite
    case blurred
    public static func == (a: SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode, b: SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @objc @IBOutlet weak public var processingIndicator: SAPFiori.FUIProcessingIndicatorView! {
    get
  }
  public var backgroundMode: SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode {
    get
    set
  }
  @objc @IBInspectable public var text: Swift.String? {
    @objc get
    @objc set
  }
  public var isAnimating: Swift.Bool {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  open func show(inView view: UIKit.UIView, animated: Swift.Bool = true)
  open func dismiss(animated: Swift.Bool = true)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class NUISettings : ObjectiveC.NSObject {
  public static var instance: SAPFiori.NUISettings!
  public static func initWithStylesheet(name: Swift.String)
  public static func appendStylesheet(name: Swift.String)
  public static func loadStylesheetByPath(path: Swift.String)
  public static func loadStylesheetByURL(url: Foundation.URL)
  public static func loadStylesheetByString(content: Swift.String)
  public static func reloadStylesheets()
  public static func reloadStylesheetsOnOrientationChange(orientation: UIKit.UIInterfaceOrientation) -> Swift.Bool
  public static func autoUpdateIsEnabled() -> Swift.Bool
  public static func autoUpdatePath() -> Swift.String?
  public static func setAutoUpdatePath(path: Swift.String)
  public static func hasProperty(property: Swift.String, withExplicitClass className: Swift.String) -> Swift.Bool
  public static func hasProperty(property: Swift.String, withClass className: Swift.String) -> Swift.Bool
  public static func hasFontPropertiesWithClass(className: Swift.String) -> Swift.Bool
  public static func get(property: Swift.String, withExplicitClass className: Swift.String) -> Swift.String?
  public static func get(property: Swift.String, withClass className: Swift.String) -> Swift.String?
  public static func getBoolean(property: Swift.String, withClass className: Swift.String) -> Swift.Bool
  public static func getFloat(property: Swift.String, withClass className: Swift.String) -> Swift.Float?
  public static func getInteger(property: Swift.String, withClass className: Swift.String) -> Swift.Int?
  public static func getSize(property: Swift.String, withClass className: Swift.String) -> CoreGraphics.CGSize?
  public static func getOffset(property: Swift.String, withClass className: Swift.String) -> UIKit.UIOffset?
  public static func getEdgeInsets(property: Swift.String, withClass className: Swift.String) -> UIKit.UIEdgeInsets?
  public static func getBorderStyle(property: Swift.String, withClass className: Swift.String) -> SAPFiori.UITextBorderStyle
  public static func getSeparatorStyle(property: Swift.String, withClass className: Swift.String) -> SAPFiori.UITableViewCellSeparatorStyle
  public static func getFontWithClass(className: Swift.String) -> UIKit.UIFont?
  public static func getFontWithClass(className: Swift.String, baseFont: UIKit.UIFont?, withSuffix suffix: Swift.String? = nil) -> UIKit.UIFont
  public static func getColor(property: Swift.String, withClass className: Swift.String) -> UIKit.UIColor?
  public static func getColorFromImage(property: Swift.String, withClass className: Swift.String) -> UIKit.UIColor?
  public static func getImageFromColor(property: Swift.String, withClass className: Swift.String) -> UIKit.UIImage?
  public static func getImage(property: Swift.String, withClass className: Swift.String) -> UIKit.UIImage?
  public static func getBarStyle(property: Swift.String, withClass className: Swift.String) -> UIKit.UIBarStyle
  public static func getTextAlignment(property: Swift.String, withClass className: Swift.String) -> UIKit.NSTextAlignment
  public static func getControlContentHorizontalAlignment(property: Swift.String, withClass className: Swift.String) -> SAPFiori.UIControlContentHorizontalAlignment
  public static func getControlContentVerticalAlignment(property: Swift.String, withClass className: Swift.String) -> SAPFiori.UIControlContentVerticalAlignment
  public static func getKeyboardAppearance(property: Swift.String, withClass className: Swift.String) -> UIKit.UIKeyboardAppearance
  public static func getClasses(className: Swift.String) -> [Swift.String]
  public static func setGlobalExclusions(array: [Swift.String])
  public static func getGlobalExclusions() -> [Swift.String]
  public static func stylesheetOrientation() -> Swift.String?
  public static func stylesheetOrientationFromInterfaceOrientation(orientation: UIKit.UIInterfaceOrientation) -> Swift.String
  public var stylesheetName: Swift.String? {
    get
  }
  public static func getInstance() -> SAPFiori.NUISettings
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIChartLegendTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartLegendView> {
  public var seriesColor: [UIKit.UIColor] {
    get
    set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
public protocol FUIFormCell : AnyObject, SAPFiori.FUIInlineValidation {
  associatedtype ValueType
  var value: Self.ValueType { get set }
  var isEditable: Swift.Bool { get set }
  var onChangeHandler: ((Self.ValueType) -> Swift.Void)? { get set }
}
@available(*, unavailable, message: "`FUIFormCellDelegate` protocol has been removed.  Implement the `onChangeHandler` closure, to handle value changes.")
public protocol FUIFormCellDelegate : AnyObject {
  func didChangeValue<T>(in formCell: T) where T : SAPFiori.FUIFormCell
}
@available(*, unavailable, message: "`FUIFormCellDelegate` protocol has been removed.  Implement the `onChangeHandler` closure, to handle value changes.")
public protocol FormCellDelegate : AnyObject {
  func didChangeValue<T>(in formCell: T) where T : SAPFiori.FUIFormCell
}
public protocol FUITakePhotoAttachmentActionDelegate : AnyObject {
  func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakePhoto asset: Photos.PHAsset, at url: Foundation.URL)
  func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakePhoto image: UIKit.UIImage)
  func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakeVideo url: Foundation.URL)
}
extension FUITakePhotoAttachmentActionDelegate {
  public func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakePhoto image: UIKit.UIImage)
  public func takePhotoAttachmentAction(_ action: SAPFiori.FUITakePhotoAttachmentAction, didTakeVideo url: Foundation.URL)
}
public class FUITakePhotoAttachmentAction : SAPFiori.FUIAttachmentAction {
  final public let title: Swift.String
  weak public var delegate: SAPFiori.FUITakePhotoAttachmentActionDelegate?
  public var isSavedToCameraRoll: Swift.Bool
  public var mediaTypes: [Swift.String]?
  public init(withTitle title: Swift.String? = nil)
  public func action(onController controller: SAPFiori.FUIAttachmentsViewController)
  public func isAvailable(_ alertAction: UIKit.UIAlertAction) -> Swift.Bool
  @objc deinit
}
public enum FUIBarcodeScannerError : Swift.Error, Swift.Equatable {
  case deviceNotSupported(error: Foundation.NSError)
}
extension FUIBarcodeScannerError : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
public func == (lhs: SAPFiori.FUIBarcodeScannerError, rhs: SAPFiori.FUIBarcodeScannerError) -> Swift.Bool
@objc @_inheritsConvenienceInitializers open class FUIGridTableViewHeaderFooterView : SAPFiori.FUIBaseTableViewHeaderFooterView {
  public var items: [SAPFiori.FUIGridRowItem]? {
    get
    set
  }
  public var columnWidth: [CoreGraphics.CGFloat]?
  public var columnWidthPercent: [CoreGraphics.CGFloat]?
  public var spacing: CoreGraphics.CGFloat
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForReuse()
  @objc @IBInspectable open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol FUIEnabledComponent : AnyObject {
  var isEnabled: Swift.Bool { get set }
}
extension FUIBaseDrawingCollectionViewCell where InnerView : SAPFiori.FUIEnabledComponent {
  public var isEnabled: Swift.Bool {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUIFormTableViewController : UIKit.UITableViewController {
  public var effectiveNavigationController: UIKit.UINavigationController? {
    get
    set
  }
  @objc deinit
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, estimatedHeightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func scrollViewWillBeginDragging(_ scrollView: UIKit.UIScrollView)
  public func cellToBecomeFirstResponder<T>(sender: T) -> Swift.Bool where T : SAPFiori.FUIFormCell
  public func navigationControllerPresent(_ viewControllerToPresent: UIKit.UIViewController, animated flag: Swift.Bool, completion: (() -> Swift.Void)?)
  public func navigationControllerPush(_ viewControllerToPush: UIKit.UIViewController, animated flag: Swift.Bool)
}
extension FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers open class ZoomExtentButton : SAPFiori.FUIMapToolbarButton {
    @objc override dynamic public init(frame: CoreGraphics.CGRect)
    @objc required dynamic public init()
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    override public init(type: SAPFiori.FUIMapToolbarButtonType)
    convenience public init(mapView: MapKit.MKMapView)
    @available(*, unavailable, message: "Use the new initializer with MKMapView type")
    convenience public init(mapView: UIKit.UIView)
    weak public var mapView: MapKit.MKMapView?
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapToolbar.ZoomExtentButton")
public typealias FUIMapToolbarZoomExtentButton = SAPFiori.FUIMapToolbar.ZoomExtentButton
public protocol FUIPoint : SAPFiori.FUIGeometry {
  var x: Swift.Double { get }
  var y: Swift.Double { get }
}
extension MKPointAnnotation : SAPFiori.FUIPoint {
  public var x: Swift.Double {
    get
  }
  public var y: Swift.Double {
    get
  }
}
public enum FUIMapToolbarButtonType {
  case settings
  case userLocation
  case clearAll
  case legend
  case zoomExtent
  case plain
  public static func == (a: SAPFiori.FUIMapToolbarButtonType, b: SAPFiori.FUIMapToolbarButtonType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers open class FUIKPICardCollectionViewCell : SAPFiori.FUIBaseDrawingCollectionViewCell<SAPFiori.FUIKPICardView> {
  @objc override dynamic public var nuiClass: Swift.String? {
    @objc get
    @objc set
  }
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
@_inheritsConvenienceInitializers open class FUINoteFormCell : SAPFiori.FUIAutofittingDrawingTableViewCell<SAPFiori.FUINoteFormCellContentView>, SAPFiori.FUIFormCell {
  public var isEditable: Swift.Bool {
    get
    set
  }
  public var isTrackingLiveChanges: Swift.Bool {
    get
    set
  }
  open var onChangeHandler: ((Swift.String) -> Swift.Void)? {
    get
    set
  }
  @available(*, deprecated, message: "This property is deprecated. Please use 'maxNumberOfLines' property.")
  public var isAutoFitting: Swift.Bool {
    get
    set
  }
  public var minNumberOfLines: Swift.Int {
    get
    set
  }
  public var maxNumberOfLines: Swift.Int {
    get
    set
  }
  public var maxNoteTextLength: Swift.Int
  public var valueTextView: SAPFiori.FUITextView {
    get
  }
  public var valueText: SAPFiori.FUIText {
    get
  }
  @objc @available(*, deprecated, message: "This property is deprecated.  Please use `placeholder.text`.")
  @IBInspectable public var placeholderText: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  override public var containerIsEnabled: Swift.Bool? {
    get
  }
  override open var maxDimensions: CoreGraphics.CGSize? {
    get
  }
  override open var minDimensions: CoreGraphics.CGSize? {
    get
  }
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
  public typealias ValueType = SAPFiori.FUINoteFormCellContentView.ValueType
}
@objc @_inheritsConvenienceInitializers open class FUIBaseCollectionViewTableViewCell : UIKit.UITableViewCell {
  public var collectionView: UIKit.UICollectionView! {
    get
  }
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUICircleAnnotationView : MapKit.MKAnnotationView {
  open var outerColor: UIKit.UIColor {
    get
    set
  }
  open var outerWidth: CoreGraphics.CGFloat {
    get
    set
  }
  open var innerColor: UIKit.UIColor {
    get
    set
  }
  open var circleRadius: CoreGraphics.CGFloat {
    get
    set
  }
  convenience public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?, clusteringIdentifier: Swift.String?)
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @objc override dynamic public init(annotation: MapKit.MKAnnotation?, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
extension FUICircleAnnotationView {
  @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  open var stickyZPosition: CoreGraphics.CGFloat {
    get
    set
  }
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIKPICardView : SAPFiori.FUICardBaseView {
  public var kpiAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func kpiParagraphStyle() -> UIKit.NSParagraphStyle
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
@objc @_hasMissingDesignatedInitializers public class FUIPasscodeCreateController : SAPFiori.FUIPasscodeController {
  weak public var validationDelegate: SAPFiori.FUIPasscodeValidationDelegate?
  public var canEnableTouchID: Swift.Bool
  public var hashUserPasscode: Swift.Bool
  public var isWhiteNavigationBar: Swift.Bool
  public var touchIDLearnMoreLink: Foundation.URL?
  public var faceIDLearnMoreLink: Foundation.URL?
  @available(*, unavailable, renamed: "showsCancelBarItem")
  public var isToShowCancelBarItem: Swift.Bool
  public var showsCancelBarItem: Swift.Bool
  public var isBiometricIDEnablementOptional: Swift.Bool
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public class func createInstanceFromStoryboard(_ usesTouchID: Swift.Bool = true) -> SAPFiori.FUIPasscodeCreateController
  public class func createInstanceForEnablingBiometricID(userIdentifier: Swift.String? = nil, keychainAccessGroup: Swift.String? = nil) -> SAPFiori.FUIPasscodeCreateController?
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @objc override dynamic public func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension FUIPasscodeCreateController : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
}
public protocol FUIPasscodeValidationDelegate : AnyObject {
  func validate(passcode: Swift.String) throws
}
extension FUIPasscodeCreateController : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public enum DateSegmentType : Swift.Int {
  case `in`
  case month
  case out
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct FUICalendarItemState {
  public let selectionRangePosition: SAPFiori.SelectionRangePosition
  public let dateSegmentType: SAPFiori.DateSegmentType
  public let isToday: Swift.Bool
  public let isSelected: Swift.Bool
  public init(selectionRangePosition: SAPFiori.SelectionRangePosition, dateSegmentType: SAPFiori.DateSegmentType, isToday: Swift.Bool, isSelected: Swift.Bool = false)
}
extension FUICalendarItemState : SAPFiori.Defaultable {
  public static let `default`: SAPFiori.FUICalendarItemState
}
extension FUICalendarItemState : SAPFiori.Enableable {
  public static var defaultEnabled: SAPFiori.FUICalendarItemState
}
extension FUICalendarItemState : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
  public static func == (a: SAPFiori.FUICalendarItemState, b: SAPFiori.FUICalendarItemState) -> Swift.Bool
}
@_inheritsConvenienceInitializers public class FUICalendarItemView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleComponent {
  public var title: SAPFiori.FUIText {
    get
  }
  public var status: SAPFiori.FUIText {
    get
  }
  @available(*, unavailable)
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  @available(*, deprecated, renamed: "isEventIndicatorVisible")
  public var hidesEventView: Swift.Bool {
    get
    set
  }
  public var isEventIndicatorVisible: Swift.Bool {
    get
    set
  }
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func refreshAttributedStrings()
  @available(*, unavailable)
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIText
}
@objc @_inheritsConvenienceInitializers open class FUIKeyValueCollectionViewCell : SAPFiori.NibDesignableFUIBaseCollectionViewCell {
  weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @available(*, unavailable, message: "`valueTextField` property has been removed.")
  weak public var valueTextField: UIKit.UITextField!
  weak public var valueTextView: UIKit.UITextView! {
    get
  }
  @objc @IBInspectable public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var value: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  @objc deinit
}
extension UIFont {
  public class func preferredFioriFont(forTextStyle textStyle: SAPFiori.UIFontTextStyle) -> UIKit.UIFont
}
@objc @_inheritsConvenienceInitializers public class FUIOnboardingButton : SAPFiori.FUIButton {
  public var isUsingIntrinsicContentSize: Swift.Bool
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers public class FUIChartLabelAttributes {
  public var color: UIKit.UIColor {
    get
    set
  }
  public var isHidden: Swift.Bool {
    get
    set
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class JTAppleCell : UIKit.UICollectionViewCell {
  @available(*, unavailable, message: "---> Please use cellState.isSelected")
  @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func awakeFromNib()
  @objc deinit
}
extension FUISearchTagsField {
  @objc override dynamic open func layoutSubviews()
}
@objc @_inheritsConvenienceInitializers open class FUISearchToSelectView : UIKit.UIView {
  public var tagsField: SAPFiori.FUISearchTagsField {
    get
  }
  public var tableView: UIKit.UITableView {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutMarginsDidChange()
  @objc deinit
}
public enum FUIControlState : Swift.Int, Swift.CustomStringConvertible {
  case normal
  case enabled
  case highlighted
  case selected
  case disabled
  public var description: Swift.String {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class FUIMKMapFloorplanContentView : SAPFiori.FUIMapFloorplanContentView {
  final public let mapView: SAPFiori.FUIMKMapView
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class FUITableViewHeaderFooterView : SAPFiori.NibDesignableTableViewHeaderFooterView {
  open class var reuseIdentifier: Swift.String {
    get
  }
  convenience public init(style: SAPFiori.FUISectionHeaderFooterStyle)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  public func setBackgroundColor(_ color: UIKit.UIColor, forState state: SAPFiori.UIControlState)
  @nonobjc public func setBackgroundColor(_ color: UIKit.UIColor)
  public var titleLabel: UIKit.UILabel {
    get
  }
  public var attributeLabel: UIKit.UILabel {
    get
  }
  public var isDisclosureAccessoryHidden: Swift.Bool {
    get
    set
  }
  public var style: SAPFiori.FUISectionHeaderFooterStyle {
    get
    set
  }
  public var didSelectHandler: (() -> Swift.Void)? {
    get
    set
  }
  public var topPadding: CoreGraphics.CGFloat {
    get
    set
  }
  public var bottomPadding: CoreGraphics.CGFloat {
    get
    set
  }
  open var selectionStyle: SAPFiori.UITableViewCellSelectionStyle
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  public var separators: UIKit.UIRectEdge {
    get
    set
  }
  public var separatorInset: UIKit.UIEdgeInsets {
    get
    set
  }
  public var separatorsLineColor: UIKit.UIColor {
    get
    set
  }
  @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, deprecated, message: "If using as subview of UITableViewCell: use FUICollectionViewTableViewCell instead; if using generally: use UICollectionView instead.")
public class FUIResizingCollectionView : UIKit.UICollectionView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers public class FUIPasscodeInputController : SAPFiori.FUIPasscodeController {
  public var customBackgroundImage: UIKit.UIImage?
  @available(*, unavailable, renamed: "showsCancelBarItem")
  public var isToShowCancelBarItem: Swift.Bool
  public var showsCancelBarItem: Swift.Bool
  @available(*, unavailable, renamed: "showsResetButton")
  public var isToShowResetButton: Swift.Bool
  public var showsResetButton: Swift.Bool
  public var hashUserPasscode: Swift.Bool
  public var isRequiringAlphaNumericInput: Swift.Bool
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIPasscodeInputController
  @objc override dynamic public func viewDidLoad()
  @objc deinit
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension FUIPasscodeInputController : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
@_inheritsConvenienceInitializers open class FUIObjectViewBase : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUIReactingToAccessory, SAPFiori.FUIObjectBaseDrawing {
  public var isDrawingIconStackInLayoutMargin: Swift.Bool {
    get
    set
  }
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  @objc @IBInspectable public var preserveIconStackSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var preserveDetailImageSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  public var iconsColumnWidth: CoreGraphics.CGFloat {
    get
    set
  }
  public var detailImageViewSize: CoreGraphics.CGSize {
    get
    set
  }
  @objc @IBInspectable public var splitPercent: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  public var isLimitingHeightToMainContent: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable public var isApplyingSplitPercent: Swift.Bool {
    @objc get
    @objc set
  }
  public var isStatusForcedToCenterYAlignment: Swift.Bool {
    get
    set
  }
  public func centerYOffsetForAccessory() -> CoreGraphics.CGFloat
  public var isAccessoryActionMode: Swift.Bool {
    get
    set
  }
  override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  public var isMultiline: Swift.Bool {
    get
  }
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func prepareForReuse()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func copy(_ sender: Any?)
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
}
public struct FUIStatusBarStyleHelper {
  public static var statusBarStyle: UIKit.UIStatusBarStyle? {
    get
    set
  }
}
public protocol FUIButtonClosureHandling : AnyObject {
  associatedtype ClosureType
  var didSelectHandler: Self.ClosureType? { get set }
}
extension Array {
  public struct Diff<T1, T2> {
    public let common: [(T1, T2)]
    public let removed: [T1]
    public let inserted: [T2]
    public init(common: [(T1, T2)] = [], removed: [T1] = [], inserted: [T2] = [])
  }
  public func diff<T2>(_ comparison: [T2], with compare: (Element, T2) -> Swift.Bool) -> Swift.Array<Element>.Diff<Element, T2>
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUITimelinePreviewTableViewCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  @objc @IBOutlet weak public var timelinePreviewView: SAPFiori.FUITimelinePreviewView! {
    get
  }
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class FUIBaseFixedMarginsView : UIKit.UIView {
  @available(*, unavailable, message: "Use `fixedDirectionalLayoutMargins` instead")
  public var fixedLayoutMargins: UIKit.UIEdgeInsets
  public var fixedDirectionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    get
    set
  }
  @available(iOS 11.0, *)
  @objc override dynamic open var directionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @available(*, deprecated, message: "Use `FUIObjectView`, instead.")
open class FUIObjectCell : SAPFiori.NibDesignable {
  public static var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet public var iconsStackView: UIKit.UIStackView! {
    get
  }
  @objc @IBOutlet public var detailImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet public var headlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var subheadlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var footnoteLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var descriptionLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var statusLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var statusImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet public var substatusLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var substatusImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc @IBInspectable public var iconImages: Swift.Array<UIKit.UIImage> {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var preserveIconStackSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var preserveDetailImageSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var footnoteText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var substatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var substatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  public var splitPercent: CoreGraphics.CGFloat {
    get
    set
  }
  @available(*, unavailable, renamed: "splitPercent")
  public var mainStackWidth: CoreGraphics.CGFloat {
    get
    set
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc override dynamic open var forFirstBaselineLayout: UIKit.UIView {
    @objc get
  }
  @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
}
public protocol FUIValuesComponent : SAPFiori.FUIEmptyValueComponent {
  var values: [Swift.String] { get set }
  var valuesAttributedText: Foundation.NSAttributedString! { get set }
  var valuesStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIValuesComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var valuesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension UISwitch : SAPFiori.Initializable {
}
@_inheritsConvenienceInitializers open class FUISwitchFormView : SAPFiori.FUIFormCellContentView<UIKit.UISwitch, SAPFiori.FUISwitchControlState>, SAPFiori.FUISwitchComponent {
  public var isEditable: Swift.Bool {
    get
    set
  }
  override open var isEnabled: Swift.Bool {
    get
    set
  }
  @objc public var switchView: UIKit.UISwitch {
    @objc get
  }
  public var value: Swift.Bool {
    get
    set
  }
  @objc open func valueChanged(_ sender: UIKit.UISwitch)
  public var isUpdatingTableView: Swift.Bool
  public var onChangeHandler: ((Swift.Bool) -> Swift.Void)?
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public typealias DrawingTintState = SAPFiori.Defaultable & SAPFiori.Enableable & Swift.Hashable
@_inheritsConvenienceInitializers open class FUITintableDrawingView<T> : SAPFiori.FUIBaseDrawingView, SAPFiori.FUITintAttributesProvider, SAPFiori.FUIAttributesProvider, SAPFiori.FUIEnabledComponent, SAPFiori.FUIStyleTintByStringAttributes where T : SAPFiori.Defaultable, T : SAPFiori.Enableable, T : Swift.Hashable {
  open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUITintableDrawingView<T>.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  open func tintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUITintableDrawingView<T>.TintState) -> [SAPFiori.NSAttributedStringKey : Any]
  public func styleSheetTintAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public typealias TintState = T
  open var tintAttributes: [SAPFiori.FUIPropertyRef : [T : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  open var tintState: T {
    get
    set
  }
  open var isEnabled: Swift.Bool {
    get
    set
  }
  override open func prepareForReuse()
  open func cacheTintState()
  open func restoreTintStateFromCache()
  open var cachedTintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.FUITintableDrawingView<T>.TintState : [SAPFiori.NSAttributedStringKey : Any]]]]
  public var tintablePropertyRefs: [SAPFiori.FUIPropertyRef : [SAPFiori.FUITintableDrawingView<T>.TintState]]
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
}
public protocol FUIPlaceholderComponent : SAPFiori.FUIAttributesConsumer {
  var placeholder: SAPFiori.FUIText { get }
  var placeholderAttributedText: Foundation.NSAttributedString! { get set }
  var placeholderStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var placeholderNuiClass: Swift.String? { get set }
}
extension FUIPlaceholderComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var placeholderStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var placeholderNuiClass: Swift.String? {
    get
    set
  }
}
extension FUIPlaceholderComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var placeholderAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUIMapDetailStatusView : SAPFiori.FUIDrawingView, SAPFiori.FUIStatusImageComponent {
  final public let status: SAPFiori.FUIText
  public var statusImage: UIKit.UIImage?
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
extension JTAppleCalendarView {
  public func cellStatusForDate(at row: Swift.Int, column: Swift.Int) -> SAPFiori.CellState?
  public func cellStatus(for date: Foundation.Date) -> SAPFiori.CellState?
  public func cellStatus(for date: Foundation.Date, completionHandler: @escaping (SAPFiori.CellState?) -> ())
  public func monthStatus(for date: Foundation.Date) -> SAPFiori.Month?
  public func cellStatus(at point: CoreGraphics.CGPoint) -> SAPFiori.CellState?
  public func deselectAllDates(triggerSelectionDelegate: Swift.Bool = true)
  public func deselect(dates: [Foundation.Date], triggerSelectionDelegate: Swift.Bool = true)
  public func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator, anchorDate: Foundation.Date?)
  public func boundsChange(anchorDate: Foundation.Date?, completionHandler: (() -> Swift.Void)? = nil)
  public func generateDateRange(from startDate: Foundation.Date, to endDate: Foundation.Date) -> [Foundation.Date]
  @objc override dynamic open func register(_ viewClass: Swift.AnyClass?, forSupplementaryViewOfKind elementKind: Swift.String, withReuseIdentifier identifier: Swift.String)
  @objc override dynamic open func register(_ nib: UIKit.UINib?, forSupplementaryViewOfKind kind: Swift.String, withReuseIdentifier identifier: Swift.String)
  public func dequeueReusableJTAppleSupplementaryView(withReuseIdentifier identifier: Swift.String, for indexPath: Foundation.IndexPath) -> SAPFiori.JTAppleCollectionReusableView
  public func registerDecorationView(nib: UIKit.UINib?)
  public func register(viewClass className: Swift.AnyClass?, forDecorationViewOfKind kind: Swift.String)
  public func dequeueReusableJTAppleCell(withReuseIdentifier identifier: Swift.String, for indexPath: Foundation.IndexPath) -> SAPFiori.JTAppleCell
  public func reloadData(withanchor date: Foundation.Date? = nil, completionHandler: (() -> Swift.Void)? = nil)
  public func reloadDates(_ dates: [Foundation.Date])
  public func selectDates(from startDate: Foundation.Date, to endDate: Foundation.Date, triggerSelectionDelegate: Swift.Bool = true, keepSelectionIfMultiSelectionAllowed: Swift.Bool = false)
  public func deselectDates(from start: Foundation.Date, to end: Foundation.Date? = nil, triggerSelectionDelegate: Swift.Bool = true)
  public func selectDates(_ dates: [Foundation.Date], triggerSelectionDelegate: Swift.Bool = true, keepSelectionIfMultiSelectionAllowed: Swift.Bool = false)
  public func scrollToSegment(_ destination: SAPFiori.SegmentDestination, triggerScrollToDateDelegate: Swift.Bool = true, animateScroll: Swift.Bool = true, extraAddedOffset: CoreGraphics.CGFloat = 0, completionHandler: (() -> Swift.Void)? = nil)
  public func scrollToDate(_ date: Foundation.Date, triggerScrollToDateDelegate: Swift.Bool = true, animateScroll: Swift.Bool = true, preferredScrollPosition: UIKit.UICollectionView.ScrollPosition? = nil, extraAddedOffset: CoreGraphics.CGFloat = 0, completionHandler: (() -> Swift.Void)? = nil)
  public func scrollToHeaderForDate(_ date: Foundation.Date, triggerScrollToDateDelegate: Swift.Bool = false, withAnimation animation: Swift.Bool = false, extraAddedOffset: CoreGraphics.CGFloat = 0, completionHandler: (() -> Swift.Void)? = nil)
  public func visibleDates() -> SAPFiori.DateSegmentInfo
  public func visibleDates(_ completionHandler: @escaping (SAPFiori.DateSegmentInfo) -> ())
  public func currentSection() -> Swift.Int?
}
public protocol FUIBackingPropertyValueMap : AnyObject {
  var backingPropertyValueMap: [SAPFiori.FUIPropertyRef : Foundation.NSAttributedString?] { get set }
}
extension FUIBackingPropertyValueMap where Self : SAPFiori.FUIAttributesConsumer {
  public func styledAttributedString(forText fuiText: SAPFiori.FUITextProtocol, withPropertyRef propertyRef: SAPFiori.FUIPropertyRef) -> Foundation.NSAttributedString
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUIProfileHeader : SAPFiori.NibDesignable {
  @objc @IBOutlet public var imageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet public var headlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var subheadlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var descriptionLabel: SAPFiori.FUILabel! {
    get
  }
  public var detailContentView: UIKit.UIView? {
    get
    set
  }
  @objc @IBInspectable public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var ibDisplayDetailContentView: Swift.String? {
    @objc get
    @objc set
  }
  public var splitPercent: CoreGraphics.CGFloat {
    get
    set
  }
  open var bannerView: SAPFiori.FUIBannerMessageView? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
  @objc override dynamic open func didMoveToWindow()
  @objc override dynamic open func layoutSubviews()
}
@objc open class FUIMapDetailPanel : UIKit.UIView {
  public var passThroughViews: [UIKit.UIView] {
    get
  }
  public var isApplyingBlurBackground: Swift.Bool {
    get
    set
  }
  public var isSearchEnabled: Swift.Bool {
    get
    set
  }
  public var prepareForPushChildViewController: ((SAPFiori.FUIMapDetailPanelContentViewController) -> Swift.Void)?
  public var prepareForPopChildViewController: ((SAPFiori.FUIMapDetailPanelContentViewController) -> Swift.Void)?
  final public let searchResults: SAPFiori.FUIMapDetailPanelSearchResultsViewController
  @available(*, unavailable, renamed: "searchResults")
  final public let search: SAPFiori.FUIMapDetailPanelSearchResultsViewController
  @available(*, unavailable, renamed: "search")
  final public let searchResultsViewController: SAPFiori.FUIMapDetailPanelSearchResultsViewController
  final public let content: SAPFiori.FUIMapDetailPanelContentViewController
  @available(*, unavailable, renamed: "content")
  final public let contentViewController: SAPFiori.FUIMapDetailPanelContentViewController
  public init(parentViewController parent: UIKit.UIViewController, mapView pinnedView: UIKit.UIView? = nil)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
extension FUIMapDetailPanel {
  public func presentContainer()
  public func fitToContent()
  public func pushChildViewController(completion: (() -> Swift.Void)? = nil)
  @available(*, unavailable, renamed: "pushChildViewController()")
  public func pushChildViewController(child childViewController: UIKit.UIViewController)
  public func popChildViewController(completion: (() -> Swift.Void)? = nil)
}
@available(*, unavailable, renamed: "FUIMapDetailPanel")
public typealias FUIDetailPanelContainer = SAPFiori.FUIMapDetailPanel
public protocol FUISelectionRangeComponent : SAPFiori.FUIAttributesConsumer {
  var selectionRangeColor: UIKit.UIColor? { get set }
  var selectionRangeStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUISelectionRangeComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var selectionRangeStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIAnnotation : MapKit.MKAnnotation {
  var state: SAPFiori.FUIMapFloorplan.State { get set }
  var layer: SAPFiori.FUIGeometryLayer { get set }
  var indexPath: Foundation.IndexPath { get set }
}
extension IndexPath {
  public init(index: Swift.Int, routeIndex: Swift.Int)
  public var index: Swift.Int {
    get
    set
  }
  public var routeIndex: Swift.Int {
    get
    set
  }
}
@_inheritsConvenienceInitializers open class FUIChartSummaryItemBaseView<ItemType> : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITrendComponent where ItemType : SAPFiori.FUIChartSummaryItemType {
  public var trend: SAPFiori.FUIText
  public var trendImage: UIKit.UIImage?
  public var trendSemanticColor: UIKit.UIColor?
  public var emptyText: SAPFiori.FUIText
  public var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer! {
    get
  }
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
}
@objc public protocol FUIHierarchyViewDelegate : AnyObject {
  @objc optional func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, hierarchyButtonTappedForItemWith uuid: Swift.String)
  @objc optional func hierarchyView(_ hierarchyView: SAPFiori.FUIHierarchyView, didSelectItemWith uuid: Swift.String)
}
public protocol FUITagsComponent : SAPFiori.FUIAttributesConsumer {
  var tags: [SAPFiori.FUITag] { get set }
  var tagsAttributedText: Foundation.NSAttributedString! { get set }
  var tagsStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUITagsComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var tagsStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUITagsComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var tagsAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FUIHierarchyViewHeader : UIKit.UIView {
  final public let titleLabel: UIKit.UILabel
  final public let leftButton: SAPFiori.FUIButton
  final public let rightButton: SAPFiori.FUIButton
  open var borders: UIKit.UIRectEdge {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers open class FUIMapLegend : SAPFiori.FUIResizablePopoverContainer {
  public var passThroughViews: [UIKit.UIView]
  public var toolbarButton: SAPFiori.FUIMapToolbar.LegendButton?
  public var headerTextView: UIKit.UITextView!
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open var preferredContentSize: CoreGraphics.CGSize {
    @objc get
    @objc set
  }
  @objc deinit
}
extension FUIMapLegend {
  public func setupPopoverAttributes(popOver popController: UIKit.UIPopoverPresentationController, sender view: UIKit.UIView)
}
extension FUIMapLegend {
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
extension FUIMapLegend : UIKit.UIViewControllerTransitioningDelegate {
  @objc dynamic open func presentationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController?, source: UIKit.UIViewController) -> UIKit.UIPresentationController?
  @objc dynamic open func animationController(forPresented presented: UIKit.UIViewController, presenting: UIKit.UIViewController, source: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
  @objc dynamic open func animationController(forDismissed dismissed: UIKit.UIViewController) -> UIKit.UIViewControllerAnimatedTransitioning?
}
extension FUIMapLegend : UIKit.UITableViewDelegate {
}
extension FUIMapLegend : UIKit.UITableViewDataSource {
  @objc dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
}
@available(*, unavailable, renamed: "FUIMapLegend")
public typealias FUIMapLegendContainer = SAPFiori.FUIMapLegend
@objc @_inheritsConvenienceInitializers open class FUIChartTitleView : SAPFiori.FUIDrawingView, SAPFiori.FUITitleComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUIStatusComponent {
  public var title: SAPFiori.FUIText {
    get
  }
  public var subtitle: SAPFiori.FUIText {
    get
  }
  public var status: SAPFiori.FUIText {
    get
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIText
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectViewComponent {
  public var preserveIconStackSpacing: Swift.Bool {
    get
    set
  }
  public var preserveDetailImageSpacing: Swift.Bool {
    get
    set
  }
  public var isLimitingHeightToMainContent: Swift.Bool {
    get
    set
  }
}
@_inheritsConvenienceInitializers public class FUIMapDetailTagObjectView : SAPFiori.FUIObjectView, SAPFiori.FUITagsComponent {
  public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  override public func prepareForReuse()
  override public func refreshAttributedStrings()
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public enum FUIColorVariant {
  case light
  case dark
  public static func == (a: SAPFiori.FUIColorVariant, b: SAPFiori.FUIColorVariant) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension FUIColorVariant : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public enum FUIColorStyle : Swift.String, Swift.CaseIterable {
  case primary1
  case primary2
  case primary3
  case primary4
  case primary5
  case primary6
  case primary7
  case primary8
  case primary9
  case primary10
  case tintColor
  case tintColorLight
  case tintColorDark
  case tintColorTapState
  case tintColorTapStateLight
  case tintColorTapStateDark
  case navigationBar
  @available(*, deprecated, renamed: "navigationBar")
  public static let backgroundGradientTop: SAPFiori.FUIColorStyle
  @available(*, deprecated, renamed: "navigationBar")
  public static let backgroundGradientBottom: SAPFiori.FUIColorStyle
  case backgroundBase
  case cellBackgroundTapState
  case line
  case chart1
  case chart2
  case chart3
  case chart4
  case chart5
  case chart6
  case chart7
  case chart8
  case chart9
  case chart10
  case chart11
  case negative
  case critical
  case positive
  case map1
  case map2
  case map3
  case map4
  case map5
  case map6
  case map7
  case map8
  case map9
  case map10
  case esriEdit
  case negativeBackground
  case positiveBackground
  case criticalBackground
  case informationBackground
  case accent1
  case accent1b
  case accent2
  case accent2b
  case accent3
  case accent4
  case accent5
  case accent6
  case accent6b
  case accent7
  case accent7b
  case accent8
  case accent9
  case accent10
  case accent10b
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
  public typealias AllCases = [SAPFiori.FUIColorStyle]
  public static var allCases: [SAPFiori.FUIColorStyle] {
    get
  }
}
extension UIColor {
  convenience public init(hexString hex: Swift.String)
  public class func preferredFioriColor(forStyle style: SAPFiori.FUIColorStyle) -> UIKit.UIColor
  public class func preferredFioriColor(forStyle style: SAPFiori.FUIColorStyle, background scheme: SAPFiori.FUIBackgroundColorScheme?) -> UIKit.UIColor
  public static let appleDefaultTint: UIKit.UIColor
  public func isAppleDefaultTint() -> Swift.Bool
  public func equals(_ other: UIKit.UIColor) -> Swift.Bool
}
extension FUIColorStyle : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class FUICollectionItemView : SAPFiori.FUIImageCollectionItemView, SAPFiori.FUITitleComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUIStatusComponent {
  public var title: SAPFiori.FUIText {
    get
  }
  public var subtitle: SAPFiori.FUIText {
    get
  }
  public var status: SAPFiori.FUIText {
    get
  }
  open var actionLayout: SAPFiori.FUIControlLayout {
    get
    set
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIText
}
extension FUIPaletteVersion : Swift.RawRepresentable {
  public typealias RawValue = SAPFiori.FUIPalette
  public init?(rawValue: SAPFiori.FUIPalette)
  public var rawValue: SAPFiori.FUIPalette {
    get
  }
}
public enum FUIPaletteVersion : Swift.CaseIterable {
  case v3_x
  case v3_2
  case v4
  public static let latest: SAPFiori.FUIPaletteVersion
  public func previous() -> SAPFiori.FUIPaletteVersion?
  public typealias AllCases = [SAPFiori.FUIPaletteVersion]
  public static var allCases: [SAPFiori.FUIPaletteVersion] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUITimelineCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet public var headlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var subheadlineLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var statusLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var subStatusLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var statusImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet public var subStatusImageView: SAPFiori.FUIImageView! {
    get
  }
  @available(*, unavailable, renamed: "timestampLabel")
  public var eventLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var timestampLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var secondaryTimestampLabel: SAPFiori.FUILabel! {
    get
  }
  @available(*, unavailable, renamed: "secondaryTimestampImageView")
  public var eventImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet public var secondaryTimestampImageView: SAPFiori.FUIImageView! {
    get
  }
  @objc @IBOutlet public var nodeImageView: SAPFiori.FUIImageView! {
    get
  }
  public var nodeColor: UIKit.UIColor? {
    get
    set
  }
  public var nodeColorDisabled: UIKit.UIColor? {
    get
    set
  }
  public var nodeType: SAPFiori.FUITimelineCell.NodeType {
    get
    set
  }
  @objc @IBOutlet public var attributeLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet public var subAttributeLabel: SAPFiori.FUILabel! {
    get
  }
  @objc @IBOutlet weak public var timelineBackground: UIKit.UIView! {
    get
  }
  public var cardBackground: UIKit.UIView {
    get
  }
  open var isSingleActionEnabled: Swift.Bool {
    get
    set
  }
  final public let singleActionButton: SAPFiori.FUIButton
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc deinit
  @objc @IBInspectable public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subStatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subStatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "timestampText")
  public var eventText: Swift.String?
  @objc @IBInspectable public var timestampText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var secondaryTimestampText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, renamed: "secondaryTimestampImage")
  public var eventImage: UIKit.UIImage?
  @objc @IBInspectable public var secondaryTimestampImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var nodeImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var timelineWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var attributeText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subAttributeText: Swift.String? {
    @objc get
    @objc set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc override dynamic open func updateConstraints()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
}
extension FUITimelineCell {
  public enum NodeType : Swift.Int {
    case open
    case complete
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
}
@objc @_inheritsConvenienceInitializers open class FUIChartView : UIKit.UIView {
  public var placeholderText: Swift.String? {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic open var isOpaque: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func didMoveToWindow()
  public var tapGestureRecognizer: UIKit.UIGestureRecognizer {
    get
    set
  }
  public var longPressGestureRecognizer: UIKit.UIGestureRecognizer {
    get
    set
  }
  public var doubleTapGestureRecognizer: UIKit.UIGestureRecognizer {
    get
    set
  }
  public var style: SAPFiori.FUIChartStyle {
    get
  }
  public var chartType: SAPFiori.FUIChartType {
    get
    set
  }
  weak public var delegate: SAPFiori.FUIChartViewDelegate?
  weak public var dataSource: SAPFiori.FUIChartViewDataSource? {
    get
    set
  }
  public func reloadData()
  public var indexesOfTotalsCategories: Foundation.IndexSet? {
    get
    set
  }
  public var indexesOfSecondaryValueAxis: Foundation.IndexSet? {
    get
    set
  }
  public func plotItem(at location: CoreGraphics.CGPoint) -> SAPFiori.FUIChartPlotItem?
  public func plotItem(at series: Swift.Int, category: Swift.Int) -> SAPFiori.FUIChartPlotItem?
  public var numericAxis: SAPFiori.FUIChartNumericAxis {
    get
  }
  public var secondaryNumericAxis: SAPFiori.FUIChartNumericAxis {
    get
  }
  public var categoryAxis: SAPFiori.FUIChartCategoryAxis {
    get
  }
  public var series: SAPFiori.FUIChartSeriesCollection {
    get
  }
  public var selectionMode: SAPFiori.FUIChartSelectionMode {
    get
    set
  }
  public var defaultCategorySelectionMode: SAPFiori.ChartDefaultCategorySelectionMode {
    get
    set
  }
  public var selectionRequired: Swift.Bool {
    get
    set
  }
  public var selections: [SAPFiori.FUIChartPlotItem]? {
    get
  }
  public func select(category categoryIndex: Swift.Int)
  public func select(categoriesInRange range: Swift.ClosedRange<Swift.Int>)
  public func select(series seriesIndex: Swift.Int)
  public func selectNextSeries()
  public func select(dimension dimensionIndex: Swift.Int = 0)
  public func clearSelections()
  public var debugDataDescription: Swift.String {
    get
  }
  @objc deinit
}
public protocol FUIChartViewDelegate : AnyObject {
  func chartView(_ chartView: SAPFiori.FUIChartView, didChangeSelections selections: [SAPFiori.FUIChartPlotItem]?)
  func chartView(_ chartView: SAPFiori.FUIChartView, colorForPlotItem plotItem: SAPFiori.FUIChartPlotItem) -> UIKit.UIColor?
}
extension FUIChartViewDelegate {
  public func chartView(_ chartView: SAPFiori.FUIChartView, didChangeSelections selections: [SAPFiori.FUIChartPlotItem]?)
  public func chartView(_ chartView: SAPFiori.FUIChartView, colorForPlotItem plotItem: SAPFiori.FUIChartPlotItem) -> UIKit.UIColor?
}
public protocol FUIChartViewDataSource : AnyObject {
  func numberOfSeries(in: SAPFiori.FUIChartView) -> Swift.Int
  func chartView(_ chartView: SAPFiori.FUIChartView, numberOfValuesInSeries seriesIndex: Swift.Int) -> Swift.Int
  func chartView(_ chartView: SAPFiori.FUIChartView, valueForSeries seriesIndex: Swift.Int, category categoryIndex: Swift.Int, dimension dimensionIndex: Swift.Int) -> Swift.Double?
  func chartView(_ chartView: SAPFiori.FUIChartView, titleForAxis axis: SAPFiori.FUIChartAxisId) -> Swift.String?
  func chartView(_ chartView: SAPFiori.FUIChartView, formattedStringForValue value: Swift.Double, axis: SAPFiori.FUIChartAxisId) -> Swift.String?
  func chartView(_ chartView: SAPFiori.FUIChartView, titleForCategory categoryIndex: Swift.Int, inSeries seriesIndex: Swift.Int) -> Swift.String?
}
extension FUIChartViewDataSource {
  public func chartView(_ chartView: SAPFiori.FUIChartView, titleForAxis axis: SAPFiori.FUIChartAxisId) -> Swift.String?
  public func chartView(_ chartView: SAPFiori.FUIChartView, formattedStringForValue value: Swift.Double, axis: SAPFiori.FUIChartAxisId) -> Swift.String?
  public func chartView(_ chartView: SAPFiori.FUIChartView, titleForCategory categoryIndex: Swift.Int, inSeries seriesIndex: Swift.Int) -> Swift.String?
}
extension UIImage : SAPFiori.FUIGlyphImage {
  public var attributedText: Foundation.NSAttributedString! {
    get
  }
  public var glyphImage: UIKit.UIImage? {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class FUIBarcodeScanView : UIKit.UIView {
  @objc @IBOutlet weak public var scanGuidesImageView: UIKit.UIImageView! {
    get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class FUIBaseDrawingTableViewCell<InnerView> : SAPFiori.FUIBaseTableViewCell, SAPFiori.InnerViewContainer, SAPFiori.FUIStyleByStringAttributes where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  public var _innerView: InnerView! {
    get
  }
  open class var reuseIdentifier: Swift.String {
    get
  }
  open var maxDimensions: CoreGraphics.CGSize? {
    get
  }
  open var minDimensions: CoreGraphics.CGSize? {
    get
  }
  open var inlineValidationViewHeight: CoreGraphics.CGFloat {
    get
  }
  public func scrollToVisible()
  public var containerIsEnabled: Swift.Bool? {
    get
  }
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func layoutMarginsDidChange()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIUserConsentPageComponent {
  public var titleText: SAPFiori.FUIText {
    get
  }
  public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var body: SAPFiori.FUIText {
    get
  }
  public var bodyAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var bodyStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var actionTitle: SAPFiori.FUIText {
    get
  }
  public var actionTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var actionTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)? {
    get
    set
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIAxisTitleComponent {
  public var valuesAxisTitle: SAPFiori.FUIText {
    get
  }
  public var valuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var categoryAxisTitle: SAPFiori.FUIText {
    get
  }
  public var categoryAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIObjectBaseDrawing {
  var iconsColumnWidth: CoreGraphics.CGFloat { get set }
  var isAccessoryActionMode: Swift.Bool { get set }
  var isDrawingIconStackInLayoutMargin: Swift.Bool { get set }
  var isMultiline: Swift.Bool { get }
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUITimelineCollectionViewCell : SAPFiori.NibDesignableCollectionViewCell {
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet weak public var titleLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var nodeImageView: UIKit.UIImageView! {
    get
  }
  @objc @IBOutlet weak public var footnoteLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var timeline: UIKit.UIView! {
    get
  }
  public var timelineColor: UIKit.UIColor
  public var gradientAlphas: [CoreGraphics.CGFloat]?
  @objc @IBInspectable public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var footnote: Swift.String? {
    @objc get
    @objc set
  }
  public var nodeType: SAPFiori.FUITimelineStatus {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
public protocol FUICompressedTagsComponent : SAPFiori.FUITagsComponent {
  var tagsPlaceholderTitle: SAPFiori.FUIPlaceholderFormatter { get }
  var tagsPlaceholderAttrText: Foundation.NSAttributedString! { get set }
}
extension FUICompressedTagsComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var tagsPlaceholderAttrText: Foundation.NSAttributedString! {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUICalendarFloorplanViewController : UIKit.UIViewController {
  public var calendarView: SAPFiori.FUICalendarView! {
    get
  }
  public var tableView: UIKit.UITableView {
    get
  }
  public var allowsStyleSwitching: Swift.Bool
  public var displaysToolbar: Swift.Bool
  weak public var calendarFloorplanDelegate: SAPFiori.FUICalendarFloorplanDelegate?
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public init(calendarStyle: SAPFiori.FUICalendarStyle = .month, weekStartDay: SAPFiori.FUIWeekStartDay = .localeSpecific, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil, displayDateAtStartup: Foundation.Date? = nil, allowsStyleSwitching: Swift.Bool = false)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
}
@objc public protocol FUICalendarFloorplanDelegate : AnyObject {
  @objc optional func didTapDone(_ controller: SAPFiori.FUICalendarFloorplanViewController)
}
public struct FUISwitchControlState : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let disabled: SAPFiori.FUISwitchControlState
  public static let enabled: SAPFiori.FUISwitchControlState
  public static let selected: SAPFiori.FUISwitchControlState
  public static let unselected: SAPFiori.FUISwitchControlState
  public typealias Element = SAPFiori.FUISwitchControlState
  public typealias ArrayLiteralElement = SAPFiori.FUISwitchControlState
  public typealias RawValue = Swift.Int
}
extension FUISwitchControlState : SAPFiori.Defaultable {
  public static let `default`: SAPFiori.FUISwitchControlState
}
extension FUISwitchControlState : SAPFiori.Enableable {
  public static var defaultEnabled: SAPFiori.FUISwitchControlState
}
extension FUISwitchControlState : Swift.Hashable {
}
public protocol ChartThemePalette {
  var primary1: UIKit.UIColor { get set }
  var primary2: UIKit.UIColor { get set }
  var primary3: UIKit.UIColor { get set }
  var primary4: UIKit.UIColor { get set }
  var primary5: UIKit.UIColor { get set }
  var primary6: UIKit.UIColor { get set }
  var primary1Light: UIKit.UIColor { get set }
  var primary2Light: UIKit.UIColor { get set }
}
@_hasMissingDesignatedInitializers public class FUIChartStyle {
  public var themePalette: SAPFiori.ChartThemePalette {
    get
    set
  }
  @objc deinit
}
public protocol FUISearchToSelectViewDelegate : AnyObject {
  func searchToSelectView(_ searchToSelectView: SAPFiori.FUISearchToSelectView, uuidForItemAt indexPath: Foundation.IndexPath) -> Swift.String?
  func searchToSelectView(_ searchToSelectView: SAPFiori.FUISearchToSelectView, tagTitleFor itemUUID: Swift.String) -> Swift.String?
}
@objc @_inheritsConvenienceInitializers open class FUISearchToSelectViewController : UIKit.UIViewController, UIKit.UITableViewDataSource, UIKit.UITableViewDelegate {
  public var tagsField: SAPFiori.FUISearchTagsField {
    get
  }
  public var tableView: UIKit.UITableView! {
    get
  }
  open func selectedUUIDsDidChange()
  open var selectedUUIDs: [Swift.String] {
    get
    set
  }
  weak public var searchtoSelectViewDelegate: SAPFiori.FUISearchToSelectViewDelegate?
  @objc override dynamic open func loadView()
  @objc override dynamic open func viewDidLoad()
  @objc deinit
  @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc open func tableView(_ tableView: UIKit.UITableView, willDisplay cell: UIKit.UITableViewCell, forRowAt indexPath: Foundation.IndexPath)
  @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc open func tableView(_ tableView: UIKit.UITableView, didDeselectRowAt indexPath: Foundation.IndexPath)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FUIIconsComponent : AnyObject {
  var iconImages: [SAPFiori.FUIGlyphImage] { get set }
}
public protocol FUIEULADelegate : AnyObject {
  func eulaAccepted(on viewController: SAPFiori.FUIEULAViewController)
  func eulaRejected(on viewController: SAPFiori.FUIEULAViewController)
  func eulaCancelled(on viewController: SAPFiori.FUIEULAViewController)
}
@objc @_inheritsConvenienceInitializers open class FUIEULAViewController : SAPFiori.FUIWelcomeController {
  @objc @IBOutlet weak public var headlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var eulaTextView: UIKit.UITextView! {
    get
  }
  @objc @IBOutlet weak public var confirmButton: UIKit.UIBarButtonItem! {
    get
  }
  @objc @IBOutlet weak public var rejectButton: UIKit.UIBarButtonItem! {
    get
  }
  @objc @IBOutlet weak public var cancelButton: UIKit.UIBarButtonItem! {
    get
  }
  weak public var delegate: SAPFiori.FUIEULADelegate?
  @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIEULAViewController
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FUIOverlay : MapKit.MKOverlay, SAPFiori.FUIAnnotation {
  var overlayRenderer: [SAPFiori.FUIMapFloorplan.State : MapKit.MKOverlayRenderer] { get set }
}
public protocol FUIStatusComponent : SAPFiori.FUIAttributesConsumer {
  var status: SAPFiori.FUIText { get }
  var statusAttributedText: Foundation.NSAttributedString! { get set }
  var statusStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIStatusComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var statusStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUIStatusComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
open class FUIPhoneNumberFormatter : SAPFiori.FUIFormattedStringEditing {
  open func attributedString(for string: Swift.String, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]?, cursorPosition: Swift.Int) -> (formattedAttributedString: Foundation.NSAttributedString?, adjustedCursorPosition: Swift.Int)?
  public var format: Swift.String {
    get
    set
  }
  public init()
  open func string(for string: Swift.String, cursorPosition: Swift.Int) -> (formattedString: Swift.String?, adjustedCursorPosition: Swift.Int)?
  open func editingString(for obj: Any) -> Swift.String?
  open func isPartialStringValid(_ partialString: Swift.String, newEditingString newString: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUINumberFormatter : Foundation.NumberFormatter, SAPFiori.FUIFormattedStringEditing {
  open func attributedString(for string: Swift.String, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]?, cursorPosition: Swift.Int) -> (formattedAttributedString: Foundation.NSAttributedString?, adjustedCursorPosition: Swift.Int)?
  open func string(for string: Swift.String, cursorPosition: Swift.Int) -> (formattedString: Swift.String?, adjustedCursorPosition: Swift.Int)?
  @objc override dynamic open func editingString(for obj: Any) -> Swift.String?
  @objc override dynamic open func isPartialStringValid(_ partialString: Swift.String, newEditingString newString: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?, errorDescription error: Swift.AutoreleasingUnsafeMutablePointer<Foundation.NSString?>?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FUICalculateLayout {
  var container: SAPFiori.InnerViewContainerProtocols? { get set }
  func setNeedsCalculateLayout()
  func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  var needsCalculateLayout: Swift.Bool { get }
  func prepareForReuse()
}
@_inheritsConvenienceInitializers open class FUIBaseContainerView<InnerView> : SAPFiori.FUIDrawingView, SAPFiori.InnerViewContainer where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  public var _innerView: InnerView! {
    get
  }
  override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func prepareForReuse()
  override public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  override public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
@_inheritsConvenienceInitializers open class FUIBaseHeaderView<InnerView> : SAPFiori.FUIBaseContainerView<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  weak public var tableView: UIKit.UITableView?
  override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  open var bannerView: SAPFiori.FUIBannerMessageView? {
    get
    set
  }
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func didMoveToSuperview()
  @available(*, deprecated, message: "Header is always auto-sized.  Value will be ignored.")
  public var isAutoResizingHeight: Swift.Bool {
    get
  }
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public protocol FUIManageRepresentation {
  associatedtype MapContextType
  associatedtype GeometryType : SAPFiori.FUIGeometry
  var geometry: Self.GeometryType? { get }
  var cachedGeometry: Self.GeometryType? { get set }
  var cachedIndex: Swift.Int { get set }
  func updateRepresentation(_ editingCoordinate: CoreLocation.CLLocationCoordinate2D?, add newCoordinates: [CoreLocation.CLLocationCoordinate2D], with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], from existingEditingMode: SAPFiori.FUIGeospatialType, to newEditingMode: SAPFiori.FUIGeospatialType, in colorScheme: SAPFiori.FUIBackgroundColorScheme, on context: Self.MapContextType, shouldUpdateImmediately: Swift.Bool)
  func addRepresentation(to context: Self.MapContextType)
  func removeRepresentation(from context: Self.MapContextType)
  func redrawRepresentation(in context: Self.MapContextType, with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], scheme: SAPFiori.FUIBackgroundColorScheme, traits: UIKit.UIUserInterfaceStyle)
}
@objc @_inheritsConvenienceInitializers public class FUIProgressBannerMessageView : SAPFiori.FUIBannerMessageView {
  public var progress: Swift.Float {
    get
  }
  public var didSelectHandler: (() -> Swift.Void)?
  public var completionMessage: Swift.String?
  public var isUsingProgressBar: Swift.Bool {
    get
    set
  }
  final public let progressBar: UIKit.UIProgressView
  @objc @IBOutlet public var closeIcon: UIKit.UIImageView! {
    get
  }
  @objc @IBOutlet public var syncIcon: UIKit.UIImageView! {
    get
  }
  open var completionViewDuration: Foundation.TimeInterval
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  open func update(progress: Swift.Float, animated: Swift.Bool = false, completion: (() -> Swift.Void)? = nil)
  override open func show(message: Swift.String, withDuration duration: Foundation.TimeInterval = 0, animated: Swift.Bool = true)
  @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc deinit
}
open class FUISinglePageUserConsentForm : SAPFiori.FUIUserConsentForm, SAPFiori.FUIUserConsentPageComponent {
  public var titleStyleClassPath: [SAPFiori.FioriStyle]
  public var bodyStyleClassPath: [SAPFiori.FioriStyle]
  public var actionTitleStyleClassPath: [SAPFiori.FioriStyle]
  public var attributesProvider: SAPFiori.FUIAttributesProvider?
  public var title: SAPFiori.FUIText
  public var titleAttributedText: Foundation.NSAttributedString!
  public var body: SAPFiori.FUIText
  public var bodyAttributedText: Foundation.NSAttributedString!
  final public let actionTitle: SAPFiori.FUIText
  public var actionTitleAttributedText: Foundation.NSAttributedString!
  public var actionHandler: ((SAPFiori.FUIUserConsentPageViewController) -> Swift.Void)?
  public var isRequired: Swift.Bool
  public var isUserAccepted: Swift.Bool {
    get
  }
  public var pages: [SAPFiori.FUIUserConsentPage] {
    get
  }
  public init()
  @objc deinit
  public typealias Text = SAPFiori.FUIText
}
public enum MKEditGeometry {
  public class Point : SAPFiori.MKEditingGeometryWrapper, SAPFiori.FUIInitCoordinate {
    required override public init(_ coordinate: CoreLocation.CLLocationCoordinate2D)
    override public var geometry: MapKit.MKShape? {
      get
    }
    override public func updateRepresentation(_ editingCoordinate: CoreLocation.CLLocationCoordinate2D?, add newCoordinates: [CoreLocation.CLLocationCoordinate2D], with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], from existingEditingMode: SAPFiori.FUIGeospatialType, to newEditingMode: SAPFiori.FUIGeospatialType, in colorScheme: SAPFiori.FUIBackgroundColorScheme, on context: SAPFiori.MKEditGeometry.Point.MapContextType, shouldUpdateImmediately: Swift.Bool)
    override public func removeRepresentation(from context: MapKit.MKMapView)
    override public func redrawRepresentation(in context: MapKit.MKMapView, with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], scheme: SAPFiori.FUIBackgroundColorScheme, traits: UIKit.UIUserInterfaceStyle)
    @objc deinit
    override public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
  }
  public class Polyline : SAPFiori.MKEditingGeometryWrapper, SAPFiori.FUIInitCoordinates {
    required override public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
    required convenience public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D], selectedIndex: Swift.Int)
    override public var geometry: MapKit.MKShape? {
      get
    }
    override public func updateRepresentation(_ editingCoordinate: CoreLocation.CLLocationCoordinate2D?, add newCoordinates: [CoreLocation.CLLocationCoordinate2D], with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], from existingEditingMode: SAPFiori.FUIGeospatialType, to newEditingMode: SAPFiori.FUIGeospatialType, in colorScheme: SAPFiori.FUIBackgroundColorScheme, on context: SAPFiori.MKEditGeometry.Polyline.MapContextType, shouldUpdateImmediately: Swift.Bool)
    override public func removeRepresentation(from context: MapKit.MKMapView)
    override public func redrawRepresentation(in context: MapKit.MKMapView, with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], scheme: SAPFiori.FUIBackgroundColorScheme, traits: UIKit.UIUserInterfaceStyle)
    @objc deinit
    override public init(_ coordinate: CoreLocation.CLLocationCoordinate2D)
  }
  @_inheritsConvenienceInitializers public class Polygon : SAPFiori.MKEditGeometry.Polyline {
    override public var geometry: MapKit.MKShape? {
      get
    }
    override public func removeRepresentation(from context: MapKit.MKMapView)
    @objc deinit
    required public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
  }
}
@_inheritsConvenienceInitializers open class FUIChartFloorplanViewController : SAPFiori.FUIBaseDrawingViewController<SAPFiori.FUIChartFloorplanView>, SAPFiori.FUIBackgroundSchemeSupporting {
  public var titleText: SAPFiori.FUIText {
    get
  }
  public var titleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var status: SAPFiori.FUIText {
    get
  }
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var statusStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var valuesAxisTitle: SAPFiori.FUIText {
    get
  }
  public var valuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var categoryAxisTitle: SAPFiori.FUIText {
    get
  }
  public var categoryAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var allowLegendViewSeriesSelection: Swift.Bool {
    get
    set
  }
  public var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  @available(*, deprecated, message: "Will be unavailable in newer SDK version.")
  public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  public var chartView: SAPFiori.FUIChartView {
    get
  }
  @available(*, unavailable, renamed: "summaryView")
  public var headerView: SAPFiori.FUIChartSummaryView {
    get
  }
  public var summaryView: SAPFiori.FUIChartSummaryView {
    get
  }
  @objc override dynamic open func viewDidLoad()
  @objc deinit
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
}
public protocol FUISwitchComponent : SAPFiori.FUIAttributesConsumer {
  var value: Swift.Bool { get set }
  var switchView: UIKit.UISwitch { get }
  var onChangeHandler: ((Swift.Bool) -> Swift.Void)? { get set }
  var switchStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUISwitchComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var switchStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_inheritsConvenienceInitializers public class FUITagText : SAPFiori.FUIText {
  public var contentInsets: UIKit.NSDirectionalEdgeInsets?
  public var cornerRadius: CoreGraphics.CGFloat?
  public var fillColor: UIKit.UIColor?
  public var borderColor: UIKit.UIColor?
  @available(*, unavailable, message: "'borderWidth' is no longer supported.")
  public var borderWidth: CoreGraphics.CGFloat?
  override public func attributes() -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
  required public init(stringLiteral value: Swift.String)
  override public init(_ value: Swift.String)
  override public init()
}
@objc @_inheritsConvenienceInitializers open class JTAppleCalendarView : UIKit.UICollectionView {
  @objc @IBInspectable open var cellSize: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  open var scrollDirection: UIKit.UICollectionView.ScrollDirection
  open var cachedConfiguration: SAPFiori.ConfigurationParameters? {
    get
  }
  open var allowsDateCellStretching: Swift.Bool
  open var isRangeSelectionUsed: Swift.Bool
  weak open var calendarDelegate: SAPFiori.JTAppleCalendarViewDelegate? {
    get
    set
  }
  weak open var calendarDataSource: SAPFiori.JTAppleCalendarViewDataSource? {
    get
    set
  }
  @objc dynamic public init()
  @available(*, unavailable, message: "Please use JTAppleCalendarView() instead. It manages its own layout.")
  @objc override dynamic public init(frame: CoreGraphics.CGRect, collectionViewLayout layout: UIKit.UICollectionViewLayout)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open var sectionInset: UIKit.UIEdgeInsets
  open var minimumInteritemSpacing: CoreGraphics.CGFloat
  open var minimumLineSpacing: CoreGraphics.CGFloat
  open var scrollingMode: SAPFiori.ScrollingMode {
    get
    set
  }
  @objc deinit
}
extension JTAppleCalendarView {
  @available(iOS 9.0, *)
  @objc override dynamic open var semanticContentAttribute: UIKit.UISemanticContentAttribute {
    @objc get
    @objc set
  }
}
@_hasMissingDesignatedInitializers open class FUIEditingPanel<GeometryType> where GeometryType : SAPFiori.FUIGeometry {
  public var createGeometryItems: [SAPFiori.FUIMapLegendItem]
  public var basemapTypes: [MapKit.MKMapType] {
    get
    set
  }
  public var isCreatePointEnabled: Swift.Bool {
    get
    set
  }
  public var isCreatePolylineEnabled: Swift.Bool {
    get
    set
  }
  public var isCreatePolygonEnabled: Swift.Bool {
    get
    set
  }
  public var createGeometryResultsController: UIKit.UIViewController {
    get
    set
  }
  public var willShowCreateGeometryResultsController: ((UIKit.UIViewController) -> Swift.Void)?
  public var didDismissGeometryResultsController: ((UIKit.UIViewController, SAPFiori.FUIMapEditingToolbarButtonActionType) -> Swift.Void)?
  @available(*, unavailable, renamed: "didCommitGeometryResults")
  public var didSaveResults: ((GeometryType, SAPFiori.FUIMapLegendItem) -> Swift.Void)?
  public var didCommitGeometryResults: ((GeometryType, SAPFiori.FUIMapLegendItem) -> Swift.Void)?
  public var didChangeBaseMapType: ((MapKit.MKMapType) -> Swift.Void)?
  public var defaultEditingMode: SAPFiori.FUIGeospatialType {
    get
    set
  }
  @objc deinit
}
public enum FUIMapEditingToolbarButtonActionType {
  case didSaveEditingGeometry
  case didCancelEditingGeometry
  public static func == (a: SAPFiori.FUIMapEditingToolbarButtonActionType, b: SAPFiori.FUIMapEditingToolbarButtonActionType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@available(*, deprecated, message: "Please use `FUIDetailImageViewComponent` instead")
public protocol FUIPlaceholderDetailImageViewComponent : SAPFiori.FUIAttributesConsumer {
  var detailImageView: SAPFiori.FUIPlaceholderImageView { get set }
}
public protocol FUIStatusImageComponent : SAPFiori.FUIStatusComponent {
  var statusImage: UIKit.UIImage? { get set }
  var statusImageStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIStatusImageComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var statusImageStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUIStatusImageComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
public protocol FUIGeometry : Swift.Hashable {
}
extension MKShape : SAPFiori.FUIGeometry {
}
extension FUIMapDetailPanel {
  @objc @_inheritsConvenienceInitializers @IBDesignable open class ActionTableViewCell : SAPFiori.FUIBaseTableViewCell, SAPFiori.FUIBackgroundSchemeSupporting {
    final public let actionTitleLabel: UIKit.UILabel
    final public let actionImageView: UIKit.UIImageView
    open class var reuseIdentifier: Swift.String {
      get
    }
    @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @objc required dynamic public init()
    public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme
    override open func applyTintColor(forState state: SAPFiori.UIControlState)
    @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
    @objc override dynamic open func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
    @objc override dynamic open func tintColorDidChange()
    @objc override dynamic open func layoutSubviews()
    @objc override dynamic open func prepareForReuse()
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapDetailPanel.ActionTableViewCell")
public typealias FUIMapDetailActionTableViewCell = SAPFiori.FUIMapDetailPanel.ActionTableViewCell
extension CGRectEdge : Swift.CaseIterable {
  public static var allCases: [CoreGraphics.CGRectEdge] {
    get
  }
  public typealias AllCases = [CoreGraphics.CGRectEdge]
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIValuesComponent {
  public var values: [Swift.String] {
    get
    set
  }
  public var valuesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var valuesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers @available(*, unavailable, renamed: "FUIObjectTableViewCell")
open class FUIMapDetailBaseObjectTableViewCell : SAPFiori.FUIBaseTableViewCell {
  @objc deinit
  @objc required dynamic public init()
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FUIPolyline : SAPFiori.FUIGeometry {
}
extension MKPolyline : SAPFiori.FUIPolyline {
}
@objc @_inheritsConvenienceInitializers public class FUIPlaceholderFormatter : Foundation.Formatter, SAPFiori.FUITextProtocol {
  public var text: Swift.String? {
    get
    set
  }
  public var textColor: UIKit.UIColor?
  public var font: UIKit.UIFont?
  public func attributes() -> [Foundation.NSAttributedString.Key : Any]
  @objc override dynamic public func string(for obj: Any?) -> Swift.String?
  @objc override dynamic public func attributedString(for obj: Any, withDefaultAttributes attrs: [Foundation.NSAttributedString.Key : Any]? = nil) -> Foundation.NSAttributedString?
  @objc deinit
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc @_inheritsConvenienceInitializers open class FUIMapFloorplanContentView : SAPFiori.FUIBaseDrawingView, SAPFiori.FUIMapFloorplanComponent {
  open var toolbar: SAPFiori.FUIMapToolbar!
  open var detailPanel: SAPFiori.FUIMapDetailPanel! {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
}
public protocol InnerViewContainer : SAPFiori.InnerViewContainerDimensions, SAPFiori.InnerViewContainerEnabled {
  associatedtype InnerView : SAPFiori.FUIBaseFixedMarginsView, SAPFiori.FUIBackgroundSchemeSupporting, SAPFiori.FUICalculateLayout, SAPFiori.FUIStyleByStringAttributes
  var _innerView: Self.InnerView! { get }
}
public typealias InnerViewContainerProtocols = SAPFiori.InnerViewContainerDimensions & SAPFiori.InnerViewContainerEnabled
public protocol InnerViewContainerDimensions : AnyObject {
  var bounds: CoreGraphics.CGRect { get }
  @available(iOS 11.0, *)
  var safeAreaInsets: UIKit.UIEdgeInsets { get }
  var maxDimensions: CoreGraphics.CGSize? { get }
  var minDimensions: CoreGraphics.CGSize? { get }
  var inlineValidationViewHeight: CoreGraphics.CGFloat { get }
  func scrollToVisible()
}
public protocol InnerViewContainerEnabled : AnyObject {
  var containerIsEnabled: Swift.Bool? { get }
}
extension InnerViewContainerEnabled {
  public var containerIsEnabled: Swift.Bool? {
    get
  }
}
extension InnerViewContainerEnabled where Self : UIKit.UICollectionViewCell {
  public var containerIsEnabled: Swift.Bool? {
    get
  }
}
extension InnerViewContainerDimensions {
  public var maxDimensions: CoreGraphics.CGSize? {
    get
  }
  public var minDimensions: CoreGraphics.CGSize? {
    get
  }
  public var inlineValidationViewHeight: CoreGraphics.CGFloat {
    get
  }
  public func scrollToVisible()
}
@objc @_inheritsConvenienceInitializers open class FUIDrawingView : SAPFiori.FUIBaseDrawingView, SAPFiori.FUIAttributesProvider {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIChartFloorplanTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartFloorplanView> {
  @objc override dynamic open func prepareForReuse()
  public var chartView: SAPFiori.FUIChartView {
    get
  }
  @available(*, unavailable, renamed: "summaryView")
  public var headerView: SAPFiori.FUIChartSummaryView {
    get
  }
  public var summaryView: SAPFiori.FUIChartSummaryView {
    get
  }
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUINavigationBar : UIKit.UINavigationBar {
  open var bannerView: SAPFiori.FUIBannerMessageView? {
    get
    set
  }
  @objc override dynamic public var barTintColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension UINavigationBar {
  @available(*, deprecated, message: "Static method will be changed to instance method. Please use: UINavigationBar().applyFioriStyle()")
  public static func applyFioriStyle()
  public func applyFioriStyle()
  public func extendBackgroundColorToTop()
  public func removeExtendeBackgroundColorView()
}
@objc @_inheritsConvenienceInitializers open class FUIHierarchyCollectionViewLayout : UIKit.UICollectionViewLayout, UIKit.UIScrollViewDelegate {
  open var sectionInset: UIKit.UIEdgeInsets
  open var interItemSpacing: CoreGraphics.CGFloat
  open var showVerticalScrollIndicator: Swift.Bool
  @objc override dynamic open class var invalidationContextClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func prepare()
  @objc override dynamic open var collectionViewContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func layoutAttributesForDecorationView(ofKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext)
  @objc override dynamic open func invalidationContext(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutInvalidationContext
  @objc override dynamic open func shouldInvalidateLayout(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> Swift.Bool
  @objc override dynamic open func prepare(forCollectionViewUpdates updateItems: [UIKit.UICollectionViewUpdateItem])
  @objc override dynamic open func targetContentOffset(forProposedContentOffset proposedContentOffset: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  @objc override dynamic open func targetContentOffset(forProposedContentOffset proposedContentOffset: CoreGraphics.CGPoint, withScrollingVelocity velocity: CoreGraphics.CGPoint) -> CoreGraphics.CGPoint
  @objc public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIGridTableViewHeader : SAPFiori.FUIGridTableViewHeaderFooterView {
  @objc deinit
  @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public protocol FUIEmptyValueComponent : SAPFiori.FUIAttributesConsumer {
  var emptyText: SAPFiori.FUIText { get set }
  var emptyTextStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIEmptyValueComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var emptyTextStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUIBaseTableViewHeaderFooterView : UIKit.UITableViewHeaderFooterView {
  open class var reuseIdentifier: Swift.String {
    get
  }
  public var topPadding: CoreGraphics.CGFloat {
    get
    set
  }
  public var bottomPadding: CoreGraphics.CGFloat {
    get
    set
  }
  open var selectionStyle: SAPFiori.UITableViewCellSelectionStyle
  open var borders: UIKit.UIRectEdge {
    get
    set
  }
  @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public func setBackgroundColor(_ color: UIKit.UIColor, forState state: SAPFiori.UIControlState = .normal)
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForReuse()
  @objc deinit
}
extension JTAppleCalendarView : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScrollToTop(_ scrollView: UIKit.UIScrollView)
  public func saveLastContentOffset(_ offset: CoreGraphics.CGPoint)
  @objc dynamic open func scrollViewWillEndDragging(_ scrollView: UIKit.UIScrollView, withVelocity velocity: CoreGraphics.CGPoint, targetContentOffset: Swift.UnsafeMutablePointer<CoreGraphics.CGPoint>)
  @objc dynamic public func scrollViewDidEndScrollingAnimation(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidEndDecelerating(_ scrollView: UIKit.UIScrollView)
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUIImageView : UIKit.UIImageView, SAPFiori.InnerViewContainer {
  public var _innerView: SAPFiori.FUIPlaceholderView! {
    get
  }
  public typealias InnerView = SAPFiori.FUIPlaceholderView
  open var onChangeHandler: ((Swift.Optional<UIKit.UIImage>) -> Swift.Void)?
  @objc override dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  public var isGradientLayerEnabled: Swift.Bool {
    get
    set
  }
  public var gradientLayerColors: [CoreGraphics.CGColor]? {
    get
    set
  }
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc override dynamic open var backgroundColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  public var placeholderBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public init(image: UIKit.UIImage?)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc required dynamic public init()
  @objc deinit
  @objc @IBInspectable open var isCircular: Swift.Bool {
    @objc get
    @objc set
  }
  open var maskType: SAPFiori.FUIImageView.MaskType {
    get
    set
  }
  public enum MaskType {
    case circular
    case roundedCorner(_: CoreGraphics.CGFloat?)
    case none
  }
  @objc @IBInspectable open var borderColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var borderWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc override dynamic open var forFirstBaselineLayout: UIKit.UIView {
    @objc get
  }
  @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
  open var baselineDescenderHeight: CoreGraphics.CGFloat {
    get
    set
  }
}
@_inheritsConvenienceInitializers public class FUIChartRangeSummaryItem : SAPFiori.FUIChartSummaryItemType {
  required public init()
  public var lowerBoundTitle: SAPFiori.FUIText
  public var upperBoundTitle: SAPFiori.FUIText
  public var isEnabled: Swift.Bool
  public var value: SAPFiori.FUIText
  public var categoryRange: Swift.ClosedRange<Swift.Int>
  public var trend: SAPFiori.FUIText
  public var trendImage: UIKit.UIImage?
  public var trendSemanticColor: UIKit.UIColor?
  public var sortableCategoryRange: Swift.Int {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIBaseDrawingCollectionViewCell<InnerView> : UIKit.UICollectionViewCell, SAPFiori.FUIStyleByStringAttributes, SAPFiori.InnerViewContainer where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  open class var reuseIdentifier: Swift.String {
    get
  }
  public var _innerView: InnerView! {
    get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func layoutMarginsDidChange()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func layoutSubviews()
  public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  public var borders: UIKit.UIRectEdge {
    get
    set
  }
  public var borderColor: UIKit.UIColor {
    get
    set
  }
  public var borderWeights: UIKit.UIEdgeInsets {
    get
    set
  }
  public var topBorderWeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var leftBorderWeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var bottomBorderWeight: CoreGraphics.CGFloat {
    get
    set
  }
  public var rightBorderWeight: CoreGraphics.CGFloat {
    get
    set
  }
  @available(*, unavailable, message: "`topBorder` is now drawn as layer, please use other border APIs to modify.")
  public var topBorder: UIKit.UIView {
    get
  }
  @available(*, unavailable, message: "`leftBorder` is now drawn as layer, please use other border APIs to modify.")
  public var leftBorder: UIKit.UIView {
    get
  }
  @available(*, unavailable, message: "`bottomBorder` is now drawn as layer, please use other border APIs to modify.")
  public var bottomBorder: UIKit.UIView {
    get
  }
  @available(*, unavailable, message: "`rightBorder` is now drawn as layer, please use other border APIs to modify.")
  public var rightBorder: UIKit.UIView {
    get
  }
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIObjectHeaderViewComponent {
  public var bodyLabel: SAPFiori.FUILabel {
    get
  }
  public var bodyText: Swift.String? {
    get
    set
  }
  public var detailContentView: UIKit.UIView? {
    get
    set
  }
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIObjectView : SAPFiori.FUIObjectViewBase, SAPFiori.FUIObjectViewComponent, SAPFiori.FUIIconsComponent {
  public var headlineLabel: SAPFiori.FUILabel {
    get
  }
  public var subheadlineLabel: SAPFiori.FUILabel {
    get
  }
  public var footnoteLabel: SAPFiori.FUILabel {
    get
  }
  public var descriptionLabel: SAPFiori.FUILabel {
    get
  }
  public var statusLabel: SAPFiori.FUILabel {
    get
  }
  public var substatusLabel: SAPFiori.FUILabel {
    get
  }
  public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  @objc @IBInspectable public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var footnoteText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var substatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var substatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  public var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func prepareForReuse()
  @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
}
public protocol FUIStyleTintByStringAttributes : SAPFiori.FUIStyleByStringAttributes {
  associatedtype TintState : SAPFiori.Defaultable, SAPFiori.Enableable, Swift.Hashable
  var cachedTintAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [Self.TintState : [SAPFiori.NSAttributedStringKey : Any]]]] { get set }
  func getStylesForTintStates(property: SAPFiori.FUIPropertyRef, source: SAPFiori.FUIStyleClassSource, styleType: SAPFiori.FUIStyleType, states: [Self.TintState])
  var tintablePropertyRefs: [SAPFiori.FUIPropertyRef : [Self.TintState]] { get set }
}
extension FUIStyleTintByStringAttributes {
  public func getStylesForTintStates(property: SAPFiori.FUIPropertyRef, source: SAPFiori.FUIStyleClassSource, styleType: SAPFiori.FUIStyleType, states: [Self.TintState])
}
public protocol FUIAttachmentsViewControllerDelegate : AnyObject {
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, didPressDeleteAtIndex index: Swift.Int)
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, couldNotPresentAttachmentAtIndex index: Swift.Int)
  func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, didSelectAtIndex index: Swift.Int) -> Swift.Bool
}
extension FUIAttachmentsViewControllerDelegate {
  public func attachmentsViewController(_ attachmentsViewController: SAPFiori.FUIAttachmentsViewController, didSelectAtIndex index: Swift.Int) -> Swift.Bool
}
public protocol FUIDetailImageViewComponent : SAPFiori.FUIAttributesConsumer {
  var detailImageView: SAPFiori.FUIImageView { get }
}
@objc @_inheritsConvenienceInitializers open class FUICardCollectionViewTableViewCell : SAPFiori.FUIBaseCollectionViewTableViewCell {
  public var isAllowingFlowLayout: Swift.Bool
  @objc deinit
  @objc override dynamic open func layoutMarginsDidChange()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
public protocol FUIAxisTitleComponent : SAPFiori.FUIAttributesConsumer {
  var valuesAxisTitle: SAPFiori.FUIText { get }
  var valuesAxisTitleAttributedText: Foundation.NSAttributedString! { get set }
  var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
  var categoryAxisTitle: SAPFiori.FUIText { get }
  var categoryAxisTitleAttributedText: Foundation.NSAttributedString! { get set }
  var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] { get set }
}
extension FUIAxisTitleComponent where Self : SAPFiori.FUIBaseFixedMarginsView, Self : SAPFiori.FUIBackgroundSchemeSupporting, Self : SAPFiori.FUICalculateLayout, Self : SAPFiori.FUIStyleByStringAttributes {
  public var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
extension FUIAxisTitleComponent where Self : SAPFiori.FUIBackingPropertyValueMap {
  public var valuesAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var categoryAxisTitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUICalloutAnnotation : MapKit.MKPointAnnotation, SAPFiori.FUIAnnotation {
  open var state: SAPFiori.FUIMapFloorplan.State
  public var layer: SAPFiori.FUIGeometryLayer
  public var indexPath: Foundation.IndexPath
  @objc deinit
  @objc override dynamic public init()
}
public enum FUIKPIViewItemStyle {
  case metric
  case unit
  case icon
  case fraction
  public static func == (a: SAPFiori.FUIKPIViewItemStyle, b: SAPFiori.FUIKPIViewItemStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol FUIKPIViewItem {
  var style: SAPFiori.FUIKPIViewItemStyle { get }
  var attributedString: Foundation.NSAttributedString { get }
  var accessibilityLabel: Swift.String? { get set }
  var accessibilityValue: Swift.String? { get set }
  var accessibilityHint: Swift.String? { get set }
  var accessibilityTraits: UIKit.UIAccessibilityTraits { get set }
  var accessibilityPath: UIKit.UIBezierPath? { get set }
  var accessibilityLanguage: Swift.String? { get set }
}
@_inheritsConvenienceInitializers open class FUIMapDetailTagObjectTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIMapDetailTagObjectView> {
  public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUITagsComponent {
  public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  public var tagsAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var tagsStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public struct FUIMapLegendLine {
  public var dashPattern: [Foundation.NSNumber]?
  public var dashPhase: CoreGraphics.CGFloat?
  public init(dashPattern: [Foundation.NSNumber]? = nil, dashPhase: CoreGraphics.CGFloat? = nil)
}
public protocol FUIPaletteProvider {
  var uuid: Foundation.UUID { get }
  func hexColor(for style: SAPFiori.FUIColorStyle, variant: SAPFiori.FUIColorVariant) -> SAPFiori.FUIPaletteHexColor
}
@objc @_inheritsConvenienceInitializers open class FUIBannerMessageView : SAPFiori.NibDesignable {
  @objc @IBOutlet public var view: UIKit.UIView! {
    get
  }
  @objc @IBOutlet weak public var blurView: UIKit.UIVisualEffectView! {
    get
  }
  @objc @IBOutlet public var titleLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var dividerTop: UIKit.UIView! {
    get
  }
  @objc @IBOutlet weak public var dividerBottom: UIKit.UIView! {
    get
  }
  weak public var navigationBar: UIKit.UINavigationBar?
  weak public var headerView: UIKit.UIView?
  public var isFading: Swift.Bool
  public var dismissHandler: ((SAPFiori.FUIBannerMessageView) -> Swift.Void)?
  @objc @IBOutlet public var closeImage: UIKit.UIImageView! {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  open func show(message: Swift.String, withDuration duration: Foundation.TimeInterval = 0, animated: Swift.Bool = true)
  open func dismissBanner(animated: Swift.Bool)
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var accessibilityLabel: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open var accessibilityTraits: UIKit.UIAccessibilityTraits {
    @objc get
    @objc set
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIStatusImageComponent {
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  public var statusImageStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public class FUITag : SAPFiori.FUITagText {
  open var colorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  public init(title: Swift.String, colorScheme: SAPFiori.FUIBackgroundColorScheme = .device)
  required public init(stringLiteral value: Swift.String)
  required override public init()
  @available(*, deprecated, message: "This property is deprecated. Please use 'fillColor' property.")
  public var backgroundColor: UIKit.UIColor? {
    get
  }
  @objc deinit
  override public init(_ value: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class FUIDynamicAuthenticationScreen : SAPFiori.FUIWelcomeController {
  @objc @IBOutlet weak public var detailLabel: UIKit.UILabel! {
    get
  }
  public var informationFields: [SAPFiori.FUIAuthenticationInformationField]?
  public var verifyingMessage: Swift.String?
  weak public var delegate: SAPFiori.FUIDynamicAuthenticationDelegate?
  public class func createInstanceFromStoryboard() -> (navigationController: UIKit.UINavigationController, dynamicAuthenticationScreen: SAPFiori.FUIDynamicAuthenticationScreen)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc deinit
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension FUIDynamicAuthenticationScreen : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
public struct FUIAuthenticationInformationField {
  public var placeholder: Swift.String
  public var isSecureText: Swift.Bool
  public var informationString: Swift.String?
  public init(placeholder: Swift.String, isSecureText: Swift.Bool, informationString: Swift.String?)
}
public protocol FUIDynamicAuthenticationDelegate : AnyObject {
  func verify(_ controller: SAPFiori.FUIDynamicAuthenticationScreen, informationStrings: [Swift.String], completion: @escaping ((Swift.String?) -> Swift.Void))
  func didCancel(_ controller: SAPFiori.FUIDynamicAuthenticationScreen)
}
public protocol NibDesignableProtocol : ObjectiveC.NSObjectProtocol {
  var nibContainerView: UIKit.UIView { get }
  var nibName: Swift.String { get }
  var bundle: Foundation.Bundle { get }
  var nibLoadingClass: Swift.AnyClass { get }
}
extension UIView {
  @objc dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @objc dynamic open var nibName: Swift.String {
    @objc get
  }
  @objc dynamic open var bundle: Foundation.Bundle {
    @objc get
  }
  @objc dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class NibDesignable : UIKit.UIView, SAPFiori.NibDesignableProtocol {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class NibDesignableTableViewCell : UIKit.UITableViewCell, SAPFiori.NibDesignableProtocol {
  @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class NibDesignableFUIBaseTableViewCell : SAPFiori.FUIBaseTableViewCell, SAPFiori.NibDesignableProtocol {
  @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class NibDesignableControl : UIKit.UIControl, SAPFiori.NibDesignableProtocol {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class NibDesignableTableViewHeaderFooterView : UIKit.UITableViewHeaderFooterView, SAPFiori.NibDesignableProtocol {
  @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @objc override dynamic public init(reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class NibDesignableCollectionReusableView : UIKit.UICollectionReusableView, SAPFiori.NibDesignableProtocol {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class NibDesignableCollectionViewCell : UIKit.UICollectionViewCell, SAPFiori.NibDesignableProtocol {
  @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class NibDesignableFUIBaseCollectionViewCell : SAPFiori.FUIBaseCollectionViewCell, SAPFiori.NibDesignableProtocol {
  @objc override dynamic open var nibContainerView: UIKit.UIView {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
extension FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers open class SettingsButton : SAPFiori.FUIMapToolbarButton {
    @objc override dynamic public init(frame: CoreGraphics.CGRect)
    @objc required dynamic public init()
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    override public init(type: SAPFiori.FUIMapToolbarButtonType)
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapToolbar.SettingsButton")
public typealias FUIMapToolbarSettingsButton = SAPFiori.FUIMapToolbar.SettingsButton
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIValueComponent {
  public var value: Self.InnerView.ValueType {
    get
    set
  }
  public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  public var valueStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public protocol FUIStateSelectable {
  var isEnabled: Swift.Bool { get set }
  var isSelected: Swift.Bool { get set }
  var isHighlighted: Swift.Bool { get set }
  var tintAdjustmentMode: SAPFiori.UIViewTintAdjustmentMode { get set }
}
@_inheritsConvenienceInitializers open class FUIAutofittingDrawingTableViewCell<InnerView> : SAPFiori.FUIInlineValidationDrawingTableViewCell<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  override open var validationMessage: Swift.String? {
    get
    set
  }
  @objc override dynamic open func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc deinit
  override public var containerIsEnabled: Swift.Bool? {
    get
  }
  override open var maxDimensions: CoreGraphics.CGSize? {
    get
  }
  override open var minDimensions: CoreGraphics.CGSize? {
    get
  }
  override open func scrollToVisible()
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class FUIKPIView : SAPFiori.NibDesignableControl, SAPFiori.FUIStateTintable, SAPFiori.FUIStateTintableImplementation, SAPFiori.FUIKPIContainer {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  open var didSelectHandler: (() -> Swift.Void)?
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  public var colorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @objc @IBOutlet weak public var captionlabel: SAPFiori.FUILabel! {
    get
  }
  public var items: [SAPFiori.FUIKPIViewItem]? {
    get
    set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  public func applyTintColor(forState state: SAPFiori.UIControlState)
  @objc override dynamic open var forFirstBaselineLayout: UIKit.UIView {
    @objc get
  }
  @objc override dynamic open var forLastBaselineLayout: UIKit.UIView {
    @objc get
  }
  public enum LeadingItemKerning {
    case none
    case `default`
    case repeatingFraction
    case repeatingUnit
    public static func == (a: SAPFiori.FUIKPIView.LeadingItemKerning, b: SAPFiori.FUIKPIView.LeadingItemKerning) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public var tintColorForState: [SAPFiori.UIControlState : UIKit.UIColor]
  public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  public func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
  public var _isTintColorOverridden: Swift.Bool
  @objc deinit
}
public protocol FUIKPIContainer {
  func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  var isEnabled: Swift.Bool { get set }
  var isHighlighted: Swift.Bool { get set }
}
extension UIControl.State : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
    set
  }
}
extension FUIKPIView : SAPFiori.FUIStateSelectable {
}
@objc @_inheritsConvenienceInitializers open class FUITextView : UIKit.UITextView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect, textContainer: UIKit.NSTextContainer?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var textColor: UIKit.UIColor? {
    @objc get
    @objc set
  }
  @objc override dynamic open var font: UIKit.UIFont? {
    @objc get
    @objc set
  }
  @objc override dynamic open var text: Swift.String! {
    @objc get
    @objc set
  }
  @objc override dynamic open var attributedText: Foundation.NSAttributedString! {
    @objc get
    @objc set
  }
  @objc override weak dynamic open var delegate: UIKit.UITextViewDelegate? {
    @objc get
    @objc set
  }
  open var placeholder: Swift.String? {
    get
    set
  }
  open var attributedPlaceholder: Foundation.NSAttributedString? {
    get
    set
  }
  open var placeholderTextColor: UIKit.UIColor {
    get
    set
  }
  @available(*, deprecated, message: "This property is kept for backwards-compatibility to version 1.0, but has no effect on the view")
  public var fadeTime: Swift.Double {
    get
    set
  }
  @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUISeriesTitleComponent {
  public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public enum FUISectionHeaderFooterStyle {
  case title
  case attribute
  case empty
  public static func == (a: SAPFiori.FUISectionHeaderFooterStyle, b: SAPFiori.FUISectionHeaderFooterStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol FUIAddPhotoAttachmentActionDelegate : AnyObject {
  func addPhotoAttachmentAction(_ action: SAPFiori.FUIAddPhotoAttachmentAction, didSelectPhoto asset: Photos.PHAsset, at url: Foundation.URL)
}
extension FUIAddPhotoAttachmentActionDelegate {
  public func addPhotoAttachmentAction(_ action: SAPFiori.FUIAddPhotoAttachmentAction, didSelectPhoto asset: Photos.PHAsset, at url: Foundation.URL)
}
public class FUIAddPhotoAttachmentAction : SAPFiori.FUIAttachmentAction {
  final public let title: Swift.String
  weak public var delegate: SAPFiori.FUIAddPhotoAttachmentActionDelegate?
  public var mediaTypes: [Swift.String]?
  convenience public init()
  public init(withTitle title: Swift.String? = nil)
  public func action(onController controller: SAPFiori.FUIAttachmentsViewController)
  public func isAvailable(_ alertAction: UIKit.UIAlertAction) -> Swift.Bool
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUITrendComponent {
  public var trend: SAPFiori.FUIText {
    get
  }
  public var trendImage: UIKit.UIImage? {
    get
    set
  }
  public var trendAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var trendSemanticColor: UIKit.UIColor? {
    get
    set
  }
  public var trendStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var trendImageStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@_hasMissingDesignatedInitializers public class FUIModalLoadingIndicator {
  public class func show(inView view: UIKit.UIView, animated: Swift.Bool = true) -> SAPFiori.FUIModalLoadingIndicatorView
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIChartCardView : SAPFiori.FUICardBaseView, SAPFiori.FUISeriesTitleComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUITrendComponent {
  final public let chartView: SAPFiori.FUIChartView
  public var trend: SAPFiori.FUIText {
    get
  }
  public var trendImage: UIKit.UIImage? {
    get
    set
  }
  public var trendSemanticColor: UIKit.UIColor?
  public var subtitle: SAPFiori.FUIText {
    get
  }
  public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func prepareForReuse()
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers open class FUIBasicAuthenticationScreen : SAPFiori.FUIWelcomeController {
  @objc @IBOutlet weak public var headlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var detailLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var usernameInputView: SAPFiori.FUIEmailInputView! {
    get
  }
  @objc @IBOutlet weak public var passwordInputView: SAPFiori.FUIEmailInputView! {
    get
  }
  @objc @IBOutlet weak public var primaryActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  weak public var delegate: SAPFiori.FUIBasicAuthenticationDelegate?
  public var verifyingMessage: Swift.String?
  public var signInErrorMessage: Swift.String?
  public class func createInstanceFromStoryboard() -> (navigationController: UIKit.UINavigationController, basicAuthenticationScreen: SAPFiori.FUIBasicAuthenticationScreen)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc deinit
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension FUIBasicAuthenticationScreen : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
}
public protocol FUIBasicAuthenticationDelegate : AnyObject {
  func didSignIn(_ controller: SAPFiori.FUIBasicAuthenticationScreen, username: Swift.String, password: Swift.String, completion: @escaping ((Swift.String?) -> Swift.Void))
  func didCancel(_ controller: SAPFiori.FUIBasicAuthenticationScreen)
}
@objc @_inheritsConvenienceInitializers public class FUITouchIDErrorViewController : UIKit.UIViewController {
  public static var titleString: Swift.String?
  public static var errorTitleString: Swift.String?
  public static var errorMessageString: Swift.String?
  public static var errorMessageStringForFaceID: Swift.String?
  public static var actionTitleString: Swift.String?
  public class func createInstanceFromStoryboard() -> SAPFiori.FUITouchIDErrorViewController
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIKPIComponent {
  public var kpiItems: [SAPFiori.FUIKPIViewItem] {
    get
    set
  }
  public var kpiAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var kpiUnitItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiMetricItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiIconItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiFractionItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public enum FUITableViewCellActionAccessoryType {
  case none
  case button
  case processing
  case loadingPausable
  case loadingStoppable
  case pausedResumable
  public static func == (a: SAPFiori.FUITableViewCellActionAccessoryType, b: SAPFiori.FUITableViewCellActionAccessoryType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers public class FUISingleActionProgressIndicator : SAPFiori.FUIProgressIndicatorControl {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open var didSelectHandler: ((SAPFiori.FUISingleActionProgressIndicator) -> Swift.Void)?
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIKPIAttributesConsumer {
  public var kpiAttributesProvider: SAPFiori.FUIKPIAttributesProvider? {
    get
    set
  }
}
public enum FUITimelineStatus : Swift.Int {
  case complete
  case open
  case end
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class FUITimelineItem : ObjectiveC.NSObject {
  public var title: Swift.String
  public var due: Foundation.Date
  public var status: SAPFiori.FUITimelineStatus
  convenience public init(title: Swift.String, due: Foundation.Date, status: SAPFiori.FUITimelineStatus)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUITimelinePreviewView : UIKit.UIView, UIKit.UICollectionViewDataSource {
  public var dateFormatter: Foundation.DateFormatter! {
    get
    set
  }
  open var isAscendingOrder: Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
  @objc public var collectionView: UIKit.UICollectionView! {
    get
  }
  @objc public var header: SAPFiori.FUICollectionSectionHeaderFooterView! {
    get
  }
  public func addItem(_ item: SAPFiori.FUITimelineItem)
  public func addItems(_ items: [SAPFiori.FUITimelineItem])
  public func insertItem(_ item: SAPFiori.FUITimelineItem, at index: Swift.Int)
  public func removeAllItems()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc open func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc open func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
}
@objc @_inheritsConvenienceInitializers open class FUIButton : UIKit.UIButton, SAPFiori.FUIButtonClosureHandling, SAPFiori.FUIStateSelectable, SAPFiori.FUIBackgroundSchemeSupporting {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  convenience public init(style: SAPFiori.FUIButtonStyle)
  @objc required dynamic public init()
  @objc deinit
  public var style: SAPFiori.FUIButtonStyle {
    get
    set
  }
  public var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  open func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @objc override dynamic open func setTitleColor(_ color: UIKit.UIColor?, for state: SAPFiori.UIControlState)
  public func setBackgroundColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  public func setIsApplyingBorderColor(_ value: Swift.Bool, for state: SAPFiori.UIControlState)
  @objc override dynamic open func tintColorDidChange()
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func setTitle(_ title: Swift.String?, for state: SAPFiori.UIControlState)
  open var didSelectHandler: ((SAPFiori.FUIButton) -> Swift.Void)?
  public typealias ClosureType = ((SAPFiori.FUIButton) -> Swift.Void)
  public var isPersistentSelection: Swift.Bool {
    get
    set
  }
  @objc override dynamic open var isSelected: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  public var isPreservingPreferredMaxLayoutWidth: Swift.Bool
  @objc override dynamic open func prepareForInterfaceBuilder()
}
extension JTAppleCalendarViewDelegate {
  public func calendar(_ calendar: SAPFiori.JTAppleCalendarView, shouldSelectDate date: Foundation.Date, cell: SAPFiori.JTAppleCell?, cellState: SAPFiori.CellState) -> Swift.Bool
  public func calendar(_ calendar: SAPFiori.JTAppleCalendarView, shouldDeselectDate date: Foundation.Date, cell: SAPFiori.JTAppleCell?, cellState: SAPFiori.CellState) -> Swift.Bool
  public func calendar(_ calendar: SAPFiori.JTAppleCalendarView, didSelectDate date: Foundation.Date, cell: SAPFiori.JTAppleCell?, cellState: SAPFiori.CellState)
  public func calendar(_ calendar: SAPFiori.JTAppleCalendarView, didDeselectDate date: Foundation.Date, cell: SAPFiori.JTAppleCell?, cellState: SAPFiori.CellState)
  public func calendar(_ calendar: SAPFiori.JTAppleCalendarView, willScrollToDateSegmentWith visibleDates: SAPFiori.DateSegmentInfo)
  public func calendar(_ calendar: SAPFiori.JTAppleCalendarView, didScrollToDateSegmentWith visibleDates: SAPFiori.DateSegmentInfo)
  public func calendar(_ calendar: SAPFiori.JTAppleCalendarView, headerViewForDateRange range: (start: Foundation.Date, end: Foundation.Date), at indexPath: Foundation.IndexPath) -> SAPFiori.JTAppleCollectionReusableView
  public func calendarDidScroll(_ calendar: SAPFiori.JTAppleCalendarView)
  public func calendarSizeForMonths(_ calendar: SAPFiori.JTAppleCalendarView?) -> SAPFiori.MonthSize?
  public func sizeOfDecorationView(indexPath: Foundation.IndexPath) -> CoreGraphics.CGRect
  public func scrollDidEndDecelerating(for calendar: SAPFiori.JTAppleCalendarView)
}
public protocol JTAppleCalendarViewDataSource : AnyObject {
  func configureCalendar(_ calendar: SAPFiori.JTAppleCalendarView) -> SAPFiori.ConfigurationParameters
}
public protocol JTAppleCalendarViewDelegate : AnyObject {
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, shouldSelectDate date: Foundation.Date, cell: SAPFiori.JTAppleCell?, cellState: SAPFiori.CellState) -> Swift.Bool
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, shouldDeselectDate date: Foundation.Date, cell: SAPFiori.JTAppleCell?, cellState: SAPFiori.CellState) -> Swift.Bool
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, didSelectDate date: Foundation.Date, cell: SAPFiori.JTAppleCell?, cellState: SAPFiori.CellState)
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, didDeselectDate date: Foundation.Date, cell: SAPFiori.JTAppleCell?, cellState: SAPFiori.CellState)
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, didScrollToDateSegmentWith visibleDates: SAPFiori.DateSegmentInfo)
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, willScrollToDateSegmentWith visibleDates: SAPFiori.DateSegmentInfo)
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, cellForItemAt date: Foundation.Date, cellState: SAPFiori.CellState, indexPath: Foundation.IndexPath) -> SAPFiori.JTAppleCell
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, headerViewForDateRange range: (start: Foundation.Date, end: Foundation.Date), at indexPath: Foundation.IndexPath) -> SAPFiori.JTAppleCollectionReusableView
  func scrollDidEndDecelerating(for calendar: SAPFiori.JTAppleCalendarView)
  func calendarDidScroll(_ calendar: SAPFiori.JTAppleCalendarView)
  func calendarSizeForMonths(_ calendar: SAPFiori.JTAppleCalendarView?) -> SAPFiori.MonthSize?
  func calendar(_ calendar: SAPFiori.JTAppleCalendarView, willDisplay cell: SAPFiori.JTAppleCell, forItemAt date: Foundation.Date, cellState: SAPFiori.CellState, indexPath: Foundation.IndexPath)
  func sizeOfDecorationView(indexPath: Foundation.IndexPath) -> CoreGraphics.CGRect
}
@objc open class FUIRatingControl : UIKit.UIControl, SAPFiori.Initializable {
  public enum Style {
    case editable
    case editableDisabled
    case standard
    case accented
    public static func == (a: SAPFiori.FUIRatingControl.Style, b: SAPFiori.FUIRatingControl.Style) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  open var style: SAPFiori.FUIRatingControl.Style {
    get
    set
  }
  open var ratingBounds: Swift.ClosedRange<Swift.Int> {
    get
    set
  }
  open var rating: Swift.Int {
    get
    set
  }
  open var onImage: UIKit.UIImage?
  open var offImage: UIKit.UIImage?
  open var itemSize: CoreGraphics.CGSize?
  open var interItemSpacing: CoreGraphics.CGFloat?
  public init(style: SAPFiori.FUIRatingControl.Style)
  @objc required convenience dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open func setTintColor(_ color: UIKit.UIColor, for range: Swift.Range<Swift.Int>)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func beginTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func continueTracking(_ touch: UIKit.UITouch, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc override dynamic open func endTracking(_ touch: UIKit.UITouch?, with event: UIKit.UIEvent?)
  @objc override dynamic open func cancelTracking(with event: UIKit.UIEvent?)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIAttributesConsumer {
  public var attributesProvider: SAPFiori.FUIAttributesProvider? {
    get
    set
  }
}
public enum FUIGridRowItemAlignment : Swift.Int {
  case top
  case bottom
  case firstBaseline
  case lastBaseline
  case center
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers open class FUIGridTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIObjectView> {
  public enum ObjectViewProperty {
    public enum Text {
      case headline
      case subheadline
      case footnote
      case status
      case substatus
      public static func == (a: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text, b: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
    public enum Image {
      case statusImage
      case substatusImage
      case detailImage
      case icon
      public static func == (a: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image, b: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image) -> Swift.Bool
      public var hashValue: Swift.Int {
        get
      }
      public func hash(into hasher: inout Swift.Hasher)
    }
  }
  public var items: [SAPFiori.FUIGridRowItem]? {
    get
    set
  }
  public var columnWidth: [CoreGraphics.CGFloat]?
  public var columnWidthPercent: [CoreGraphics.CGFloat]?
  public var spacing: CoreGraphics.CGFloat
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  @IBInspectable @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @objc override dynamic open var accessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc override dynamic open func willTransition(to state: SAPFiori.UITableViewCellStateMask)
  @objc override dynamic open func didTransition(to state: SAPFiori.UITableViewCellStateMask)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
public protocol FUIMKMapViewDelegate : AnyObject {
  func mapView(_ mapView: MapKit.MKMapView, willRender overlayRenderer: MapKit.MKOverlayRenderer, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer, in state: SAPFiori.FUIMapFloorplan.State)
  func mapView(_ mapView: MapKit.MKMapView, willRender annotationView: MapKit.MKAnnotationView, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer, in state: SAPFiori.FUIMapFloorplan.State)
  func mapView(_ mapView: MapKit.MKMapView, willRender clusterAnnotationView: MapKit.MKAnnotationView, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]], in state: SAPFiori.FUIMapFloorplan.State)
  func mapView(_ mapView: MapKit.MKMapView, didSelect annotation: SAPFiori.FUIAnnotation, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  func mapView(_ mapView: MapKit.MKMapView, didSelect clusterAnnotation: MapKit.MKClusterAnnotation, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  func mapView(_ mapView: MapKit.MKMapView, didSelect overlay: SAPFiori.FUIOverlay, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  func mapView(_ mapView: MapKit.MKMapView, didSelect overlayRenderer: MapKit.MKOverlayRenderer)
  func mapView(_ mapView: MapKit.MKMapView, didDeselect annotation: SAPFiori.FUIAnnotation, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  func mapView(_ mapView: MapKit.MKMapView, didDeselect clusterAnnotation: MapKit.MKClusterAnnotation, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  func mapView(_ mapView: MapKit.MKMapView, didDeselect overlay: SAPFiori.FUIOverlay, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  func mapView(_ mapView: MapKit.MKMapView, didDeselect overlayRenderer: MapKit.MKOverlayRenderer)
}
extension FUIMKMapViewDelegate {
  public func mapView(_ mapView: MapKit.MKMapView, willRender overlayRenderer: MapKit.MKOverlayRenderer, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer, in state: SAPFiori.FUIMapFloorplan.State)
  public func mapView(_ mapView: MapKit.MKMapView, willRender annotationView: MapKit.MKAnnotationView, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer, in state: SAPFiori.FUIMapFloorplan.State)
  public func mapView(_ mapView: MapKit.MKMapView, willRender clusterAnnotationView: MapKit.MKAnnotationView, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]], in state: SAPFiori.FUIMapFloorplan.State)
  public func mapView(_ mapView: MapKit.MKMapView, didSelect annotation: SAPFiori.FUIAnnotation, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  public func mapView(_ mapView: MapKit.MKMapView, didSelect clusterAnnotation: MapKit.MKClusterAnnotation, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  public func mapView(_ mapView: MapKit.MKMapView, didSelect overlay: SAPFiori.FUIOverlay, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  public func mapView(_ mapView: MapKit.MKMapView, didSelect overlayRenderer: MapKit.MKOverlayRenderer)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselect annotation: SAPFiori.FUIAnnotation, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselect clusterAnnotation: MapKit.MKClusterAnnotation, for geometryIndexesInLayers: [SAPFiori.FUIGeometryLayer : [Swift.Int]])
  public func mapView(_ mapView: MapKit.MKMapView, didDeselect overlay: SAPFiori.FUIOverlay, for geometryIndex: Swift.Int, in layer: SAPFiori.FUIGeometryLayer)
  public func mapView(_ mapView: MapKit.MKMapView, didDeselect overlayRenderer: MapKit.MKOverlayRenderer)
}
@objc @_inheritsConvenienceInitializers open class FUIWelcomeScreen : SAPFiori.FUIWelcomeController, UIKit.UITextFieldDelegate {
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIWelcomeScreen
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @objc @IBOutlet public var headlineLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet public var detailLabel: UIKit.UILabel! {
    get
  }
  @objc public var emailTextField: SAPFiori.FUIAutoResizingTextField {
    @objc get
  }
  @objc @IBOutlet public var primaryActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @objc @IBOutlet public var footnoteLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet public var footnoteActionButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @objc @available(*, unavailable, message: "`appNameLabel` and `thankyouLabel` have been consolidated to the single `welcomeDetailLabel`.  You should concatenate their respective strings to a new value for `welcomeDetailLabel.text`.")
  @IBOutlet public var appNameLabel: UIKit.UILabel! {
    get
  }
  @available(*, deprecated, message: "This property has been renamed to `headlineLabel`.  Please update your code to reference `headlineLabel` directly.")
  public var welcomeDetailLabel: UIKit.UILabel! {
    get
  }
  @objc @available(*, unavailable, message: "`welcomeLabel` has been removed")
  @IBOutlet public var welcomeLabel: UIKit.UILabel! {
    get
  }
  @objc @available(*, unavailable, message: "`appNameLabel` and `thankyouLabel` have been consolidated to the single `welcomeDetailLabel`.  You should concatenate their respective strings to a new value for `welcomeDetailLabel.text`.")
  @IBOutlet public var thankyouLabel: UIKit.UILabel! {
    get
  }
  @objc @available(*, unavailable, renamed: "detailLabel")
  @IBOutlet public var instructionTextView: UIKit.UITextView! {
    get
  }
  @available(*, deprecated, message: "This property has been renamed to `primaryActionButton`.  Please update your code to reference `primaryActionButton` directly.")
  public var signInButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  @available(*, deprecated, message: "This property has been renamed to `footnoteLabel`.  Please update your code to reference `footnoteLabel` directly.")
  public var demoLabel: UIKit.UILabel! {
    get
  }
  @available(*, deprecated, message: "This property has been renamed to `footnoteActionButton`.  Please update your code to reference `footnoteActionButton` directly.")
  public var demoButton: SAPFiori.FUIOnboardingButton! {
    get
  }
  public var loadingMessage: Swift.String?
  public var showsCancelButtonForDiscoveryService: Swift.Bool
  public var cancelHandler: (() -> Swift.Void)?
  @objc @IBOutlet weak public var logoImageView: UIKit.UIImageView! {
    get
  }
  weak public var delegate: SAPFiori.FUIWelcomeControllerDelegate?
  public var isDemoAvailable: Swift.Bool {
    get
    set
  }
  public var state: SAPFiori.FUIWelcomeControllerState {
    get
    set
  }
  public var configurationOptions: SAPFiori.FUIWelcomeControllerConfigurationOption {
    get
    set
  }
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open var keyCommands: [UIKit.UIKeyCommand]? {
    @objc get
  }
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func viewDidLayoutSubviews()
  open func dismissLoadingIndicator()
  @objc override dynamic open func prepare(for segue: UIKit.UIStoryboardSegue, sender: Any?)
  @objc public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc deinit
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@objc public protocol FUIWelcomeControllerDelegate : AnyObject {
  @objc optional func welcomeController(_ welcomeController: SAPFiori.FUIWelcomeController, willNavigateToActivationScreen activationScreen: SAPFiori.FUIActivationScreen)
  @objc optional func welcomeController(_ welcomeController: SAPFiori.FUIWelcomeController, shouldTryUserEmail userEmail: Swift.String)
  @objc optional func welcomeController(_ welcomeController: SAPFiori.FUIWelcomeController, willNavigateToScannerScreen scanController: SAPFiori.FUIOnboardingScanViewController)
  @objc optional func didSelectDemoMode(_ welcomeController: SAPFiori.FUIWelcomeController)
  @objc optional func shouldContinueUserOnboarding(_ welcomeController: SAPFiori.FUIWelcomeController)
}
public enum FUIWelcomeControllerState : Swift.Int {
  case notConfigured
  case isConfigured
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct FUIWelcomeControllerConfigurationOption : Swift.OptionSet {
  public let rawValue: Swift.UInt
  public init(rawValue: Swift.UInt)
  public static let discoveryService: SAPFiori.FUIWelcomeControllerConfigurationOption
  public static let barcodeScanner: SAPFiori.FUIWelcomeControllerConfigurationOption
  public typealias Element = SAPFiori.FUIWelcomeControllerConfigurationOption
  public typealias ArrayLiteralElement = SAPFiori.FUIWelcomeControllerConfigurationOption
  public typealias RawValue = Swift.UInt
}
@objc @_inheritsConvenienceInitializers open class FUIWelcomeController : UIKit.UIViewController {
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUITimelineCollectionViewHorizontalFlowLayout : SAPFiori.FUIStandardAutoSizingColumnFlowLayout {
  @objc override dynamic open func prepare()
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
extension FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers open class ClearAllButton : SAPFiori.FUIMapToolbarButton {
    @objc override dynamic public init(frame: CoreGraphics.CGRect)
    @objc required dynamic public init()
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    override public init(type: SAPFiori.FUIMapToolbarButtonType)
    convenience public init(mapFloorplan: SAPFiori.FUIMKMapFloorplanViewController)
    weak public var mapFloorplan: SAPFiori.FUIMKMapFloorplanViewController?
    @objc deinit
  }
}
@objc @_inheritsConvenienceInitializers open class JTAppleCollectionReusableView : UIKit.UICollectionReusableView {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public protocol FUIWebViewContainerDelegate : AnyObject {
  func didTapCancel(on viewController: SAPFiori.FUIWebViewContainer)
}
@objc @_inheritsConvenienceInitializers open class FUIWebViewContainer : UIKit.UIViewController {
  public var wkWebView: WebKit.WKWebView
  @available(*, deprecated, message: "This type is not needed any more since only WKWebView available")
  public enum WebViewType {
    case wkWebView
    public static func == (a: SAPFiori.FUIWebViewContainer.WebViewType, b: SAPFiori.FUIWebViewContainer.WebViewType) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  @available(*, deprecated, message: "Please use init().")
  convenience public init(type: SAPFiori.FUIWebViewContainer.WebViewType)
  @objc convenience dynamic public init()
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  weak open var delegate: SAPFiori.FUIWebViewContainerDelegate?
  public var processingIndicatorView: SAPFiori.FUIProcessingIndicatorView
  public var cancelButton: UIKit.UIBarButtonItem?
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  public func showProcessingIndicator()
  public func dismissProcessingIndicator()
  public func startAnimating()
  public func stopAnimating()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class FUIMKPointAnnotation : MapKit.MKPointAnnotation {
  @objc override dynamic public init()
  @objc deinit
}
public enum FUIIconLibrary {
  public static func createImage(sfsymbolImageName: Swift.String?, size: CoreGraphics.CGFloat?, defaultImageName: Swift.String) -> UIKit.UIImage
  public enum system {
    public static let barcode: UIKit.UIImage
    public static let calendar: UIKit.UIImage
    public static let camera: UIKit.UIImage
    public static let cart: UIKit.UIImage
    public static let cartAdd: UIKit.UIImage
    public static let check: UIKit.UIImage
    public static let clock: UIKit.UIImage
    public static let close: UIKit.UIImage
    public static let cloud: UIKit.UIImage
    public static let create: UIKit.UIImage
    public static let dislikeOff: UIKit.UIImage
    public static let dislikeOn: UIKit.UIImage
    public static let dismiss: UIKit.UIImage
    public static let download: UIKit.UIImage
    public static let edit: UIKit.UIImage
    public static let email: UIKit.UIImage
    public static let facetime: UIKit.UIImage
    public static let fastforwardOff: UIKit.UIImage
    public static let fastforwardOn: UIKit.UIImage
    public static let filter: UIKit.UIImage
    public static let flagOff: UIKit.UIImage
    public static let flagOn: UIKit.UIImage
    public static let flashOff: UIKit.UIImage
    public static let flashOn: UIKit.UIImage
    public static let imageLibrary: UIKit.UIImage
    public static let information: UIKit.UIImage
    public static let library: UIKit.UIImage
    public static let likeOff: UIKit.UIImage
    public static let likeOn: UIKit.UIImage
    public static let listView: UIKit.UIImage
    public static let me: UIKit.UIImage
    public static let message: UIKit.UIImage
    public static let more: UIKit.UIImage
    public static let pauseOff: UIKit.UIImage
    public static let pauseOn: UIKit.UIImage
    public static let phone: UIKit.UIImage
    public static let pin: UIKit.UIImage
    public static let playOff: UIKit.UIImage
    public static let playOn: UIKit.UIImage
    public static let refresh: UIKit.UIImage
    public static let reply: UIKit.UIImage
    public static let rewindOff: UIKit.UIImage
    public static let rewindOn: UIKit.UIImage
    public static let search: UIKit.UIImage
    public static let searchSmall: UIKit.UIImage
    public static let selected: UIKit.UIImage
    public static let share: UIKit.UIImage
    public static let shuffle: UIKit.UIImage
    public static let success: UIKit.UIImage
    public static let tileView: UIKit.UIImage
    public static let trash: UIKit.UIImage
    public static let volume: UIKit.UIImage
    public static let progressPausable: UIKit.UIImage
    public static let progressStoppable: UIKit.UIImage
    public static let progressPaused: UIKit.UIImage
  }
  public enum app {
    public static let bookmarkOff: UIKit.UIImage
    public static let bookmarkOn: UIKit.UIImage
    public static let cafeOff: UIKit.UIImage
    public static let cafeOn: UIKit.UIImage
    public static let campusOff: UIKit.UIImage
    public static let campusOn: UIKit.UIImage
    public static let changeStatus: UIKit.UIImage
    public static let discoverOff: UIKit.UIImage
    public static let discoverOn: UIKit.UIImage
    public static let eventsOff: UIKit.UIImage
    public static let eventsOn: UIKit.UIImage
    public static let printer: UIKit.UIImage
    public static let stadiumOff: UIKit.UIImage
    public static let stadiumOn: UIKit.UIImage
    public static let staffOff: UIKit.UIImage
    public static let staffOn: UIKit.UIImage
    public static let starOff: UIKit.UIImage
    public static let starOn: UIKit.UIImage
    public static let todayOff: UIKit.UIImage
    public static let todayOn: UIKit.UIImage
    public static let trafficOff: UIKit.UIImage
    public static let trafficOn: UIKit.UIImage
  }
  public enum indicator {
    public static let attachment: UIKit.UIImage
    public static let clock: UIKit.UIImage
    public static let dot: UIKit.UIImage
    public static let female: UIKit.UIImage
    public static let genderNeutral: UIKit.UIImage
    public static let hierarchyOff: UIKit.UIImage
    public static let hierarchyOn: UIKit.UIImage
    public static let highPriority: UIKit.UIImage
    public static let inProcess: UIKit.UIImage
    public static let male: UIKit.UIImage
    public static let mediumPriority: UIKit.UIImage
    public static let pageLeft: UIKit.UIImage
    public static let pageRight: UIKit.UIImage
    public static let veryHighPriority: UIKit.UIImage
  }
  public enum map {
    public enum marker {
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let assetSmall: UIKit.UIImage
      public static let asset: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let busSmall: UIKit.UIImage
      public static let bus: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let cafeSmall: UIKit.UIImage
      public static let cafe: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let cameraSmall: UIKit.UIImage
      public static let camera: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let displaySmall: UIKit.UIImage
      public static let display: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let functionalLocationSmall: UIKit.UIImage
      public static let functionalLocation: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let gameRoomSmall: UIKit.UIImage
      public static let gameRoom: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let gymSmall: UIKit.UIImage
      public static let gym: UIKit.UIImage
      public static let highPriority: UIKit.UIImage
      public static let inProcess: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let informationSmall: UIKit.UIImage
      public static let information: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let jobSmall: UIKit.UIImage
      public static let job: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let librarySmall: UIKit.UIImage
      public static let library: UIKit.UIImage
      public static let mediumPriority: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let meetingRoomSmall: UIKit.UIImage
      public static let meetingRoom: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let notificationSmall: UIKit.UIImage
      public static let notification: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let printerSmall: UIKit.UIImage
      public static let printer: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let restroomMenSmall: UIKit.UIImage
      public static let restroomMen: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let restroomWomenSmall: UIKit.UIImage
      public static let restroomWomen: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let securityOfficeSmall: UIKit.UIImage
      public static let securityOffice: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let turnstileSmall: UIKit.UIImage
      public static let turnstile: UIKit.UIImage
      public static let venue: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let venueSmall: UIKit.UIImage
      public static let veryHighPriority: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let walkSmall: UIKit.UIImage
      public static let walk: UIKit.UIImage
      @available(*, deprecated, message: "No longer supported. Newer icons are based on SFSymbols.")
      public static let wellnessRoomSmall: UIKit.UIImage
      public static let wellnessRoom: UIKit.UIImage
    }
    public enum panel {
      public static let clear: UIKit.UIImage
      public static let point: UIKit.UIImage
      public static let polygon: UIKit.UIImage
      public static let polyline: UIKit.UIImage
    }
    public enum legend {
      public static let addBranchPoint: UIKit.UIImage
      public static let addPoint: UIKit.UIImage
      public static let clearAllOff: UIKit.UIImage
      public static let clearAllOn: UIKit.UIImage
      public static let legendOff: UIKit.UIImage
      public static let legendOn: UIKit.UIImage
      public static let locationOff: UIKit.UIImage
      public static let locationOn: UIKit.UIImage
      public static let redo: UIKit.UIImage
      public static let subtractPoint: UIKit.UIImage
      public static let undo: UIKit.UIImage
      public static let zoomExtent: UIKit.UIImage
    }
  }
  public enum onboarding {
    public enum scan {
      public static let controlCollapse: UIKit.UIImage
      public static let controlExpand: UIKit.UIImage
    }
  }
  public enum socialMedia {
    public static let thumbsDownOff: UIKit.UIImage
    public static let thumbsDownOn: UIKit.UIImage
    public static let thumbsUpOff: UIKit.UIImage
    public static let thumbsUpOn: UIKit.UIImage
  }
  public enum docType {
    public static let audio: UIKit.UIImage
    public static let csv: UIKit.UIImage
    public static let generic: UIKit.UIImage
    public static let image: UIKit.UIImage
    public static let pdf: UIKit.UIImage
    public static let presentation: UIKit.UIImage
    public static let table: UIKit.UIImage
    public static let text: UIKit.UIImage
    public static let video: UIKit.UIImage
  }
  public enum analytics {
    public static let chartView: UIKit.UIImage
    public static let chevronNext: UIKit.UIImage
    public static let chevronPrevious: UIKit.UIImage
    public static let trendDown: UIKit.UIImage
    public static let trendUp: UIKit.UIImage
  }
}
@objc @_inheritsConvenienceInitializers public class FUIMapDetailPanelSearchBar : SAPFiori.FUISearchBar {
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIModalProcessingIndicator {
  public class func show(inView view: UIKit.UIView, animated: Swift.Bool = true, backgroundMode: SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode = .translucentWhite) -> SAPFiori.FUIModalProcessingIndicatorView
  @objc deinit
}
@_inheritsConvenienceInitializers public class FUIChartSummaryItem : SAPFiori.FUIChartSummaryItemType {
  public var emptyText: SAPFiori.FUIText
  public var title: SAPFiori.FUIText
  public var isEnabled: Swift.Bool
  public var isPreservingTitleHeight: Swift.Bool
  public var isPreservingTrendHeight: Swift.Bool
  public var valuesText: [Swift.String]
  public var categoryIndex: Swift.Int
  public var trend: SAPFiori.FUIText
  public var trendImage: UIKit.UIImage?
  public var trendSemanticColor: UIKit.UIColor?
  required public init()
  @objc deinit
}
public class FUIChartSummaryItemType {
  required public init()
  @objc deinit
}
extension FUIChartSummaryItemType : Swift.Equatable {
  public static func == (lhs: SAPFiori.FUIChartSummaryItemType, rhs: SAPFiori.FUIChartSummaryItemType) -> Swift.Bool
}
extension FUIChartSummaryItemType : Swift.Comparable {
  public static func < (lhs: SAPFiori.FUIChartSummaryItemType, rhs: SAPFiori.FUIChartSummaryItemType) -> Swift.Bool
}
extension FUIChartSummaryItemType : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
@objc public protocol FUIListPicker {
  @objc var prompt: Swift.String? { get set }
  @objc var isSearchEnabled: Swift.Bool { get set }
  @objc var isSearchCancelledAfterSelection: Swift.Bool { get set }
  @objc var hidesNavigationBarDuringSearch: Swift.Bool { get set }
  @objc var searchBarDelegate: UIKit.UISearchBarDelegate? { get set }
  @objc var searchBarPlaceholderText: Swift.String? { get set }
  @objc var isBarcodeScannerEnabled: Swift.Bool { get set }
  @objc var barcodeScanMode: SAPFiori.FUIBarcodeScanMode { get set }
  @objc var barcodeScanResultTransformer: ((Swift.String) -> Swift.String)? { get set }
  @objc var dataSource: SAPFiori.FUIListPickerDataSource? { get set }
  @objc var isDataSourceRequiringUniqueIdentifiers: Swift.Bool { get set }
  @objc var searchResultsUpdating: SAPFiori.FUIListPickerSearchResultsUpdating? { get set }
  @objc var selectedEntriesSectionTitle: Swift.String? { get set }
  @objc var allEntriesSectionTitle: Swift.String? { get set }
  @objc var selectAllButtonTitle: Swift.String? { get set }
  @objc var deselectAllButtonTitle: Swift.String? { get set }
  @objc var title: Swift.String? { get set }
  @objc var estimatedRowHeight: CoreGraphics.CGFloat { get set }
  @objc var isSelectedSectionEnabled: Swift.Bool { get set }
  @objc var tintColor: UIKit.UIColor? { get set }
  @objc func register(_ cellClass: Swift.AnyClass?, forCellReuseIdentifier identifier: Swift.String)
  @objc func reloadData()
}
public protocol FUIObjectComponent : AnyObject {
  var detailImage: UIKit.UIImage? { get set }
  var headlineText: Swift.String? { get set }
  var subheadlineText: Swift.String? { get set }
  var footnoteText: Swift.String? { get set }
  var descriptionText: Swift.String? { get set }
  var statusText: Swift.String? { get set }
  var substatusText: Swift.String? { get set }
  var statusImage: UIKit.UIImage? { get set }
  var substatusImage: UIKit.UIImage? { get set }
}
extension FUIObjectComponent where Self : SAPFiori.FUIObjectViewBaseComponent {
  public var detailImage: UIKit.UIImage? {
    get
    set
  }
  public var headlineText: Swift.String? {
    get
    set
  }
  public var subheadlineText: Swift.String? {
    get
    set
  }
  public var footnoteText: Swift.String? {
    get
    set
  }
  public var descriptionText: Swift.String? {
    get
    set
  }
  public var statusText: Swift.String? {
    get
    set
  }
  public var substatusText: Swift.String? {
    get
    set
  }
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  public var substatusImage: UIKit.UIImage? {
    get
    set
  }
}
public enum FUISearchTagAcceptOption {
  case `return`
  case comma
  case space
  public static func == (a: SAPFiori.FUISearchTagAcceptOption, b: SAPFiori.FUISearchTagAcceptOption) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class FUISearchTagsField : UIKit.UIScrollView {
  open var searchIcon: UIKit.UIImage? {
    get
    set
  }
  open var searchImageView: UIKit.UIImageView
  weak open var textDelegate: UIKit.UITextFieldDelegate?
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  open var textColor: UIKit.UIColor? {
    get
    set
  }
  open var normalBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  open var selectedColor: UIKit.UIColor? {
    get
    set
  }
  open var selectedTextColor: UIKit.UIColor? {
    get
    set
  }
  open var delimiter: Swift.String {
    get
    set
  }
  @available(*, unavailable, message: "Use 'isDelimiterVisible' instead.")
  open var displayDelimiter: Swift.Bool
  open var isDelimiterVisible: Swift.Bool {
    get
    set
  }
  open var maxHeight: CoreGraphics.CGFloat {
    get
    set
  }
  open var numberOfLines: Swift.Int {
    get
    set
  }
  @available(*, unavailable, message: "Use 'cornerRadius' instead.")
  open var tagCornerRadius: CoreGraphics.CGFloat
  open var cornerRadius: CoreGraphics.CGFloat {
    get
    set
  }
  open var borderWidth: CoreGraphics.CGFloat {
    get
    set
  }
  open var borderColor: UIKit.UIColor? {
    get
    set
  }
  @objc override dynamic open var layoutMargins: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  open var fieldTextColor: UIKit.UIColor? {
    get
    set
  }
  open var placeholder: Swift.String {
    get
    set
  }
  open var placeholderColor: UIKit.UIColor? {
    get
    set
  }
  @available(*, unavailable, message: "Use 'placeholderAlwaysVisible' instead.")
  open var placeholderAlwayVisible: Swift.Bool
  open var placeholderAlwaysVisible: Swift.Bool {
    get
    set
  }
  open var font: UIKit.UIFont? {
    get
    set
  }
  open var readOnly: Swift.Bool {
    get
    set
  }
  open var acceptTagOption: SAPFiori.FUISearchTagAcceptOption
  @available(*, unavailable, message: "Use 'contentInset' instead.")
  open var padding: UIKit.UIEdgeInsets
  @objc override dynamic open var contentInset: UIKit.UIEdgeInsets {
    @objc get
    @objc set
  }
  open var spaceBetweenTags: CoreGraphics.CGFloat {
    get
    set
  }
  open var spaceBetweenLines: CoreGraphics.CGFloat {
    get
    set
  }
  @objc override dynamic open var isFirstResponder: Swift.Bool {
    @objc get
  }
  open var tagLayoutMargins: UIKit.UIEdgeInsets {
    get
    set
  }
  open var bounceOnSelection: Swift.Bool
  open var tags: [SAPFiori.FUISearchTag] {
    get
  }
  open var onShouldAcceptTag: ((SAPFiori.FUISearchTagsField) -> Swift.Bool)?
  open var onDidChangeText: ((SAPFiori.FUISearchTagsField, Swift.String?) -> Swift.Void)?
  open var onDidAddTag: ((SAPFiori.FUISearchTagsField, SAPFiori.FUISearchTag) -> Swift.Void)?
  open var onDidRemoveTag: ((SAPFiori.FUISearchTagsField, SAPFiori.FUISearchTag) -> Swift.Void)?
  open var onDidSelectTagView: ((SAPFiori.FUISearchTagsField, SAPFiori.FUISearchTagView) -> Swift.Void)?
  open var onDidUnselectTagView: ((SAPFiori.FUISearchTagsField, SAPFiori.FUISearchTagView) -> Swift.Void)?
  open var onVerifyTag: ((SAPFiori.FUISearchTagsField, Swift.String) -> Swift.Bool)?
  open var onDidChangeHeightTo: ((SAPFiori.FUISearchTagsField, CoreGraphics.CGFloat) -> Swift.Void)?
  open var preferredMaxLayoutWidth: CoreGraphics.CGFloat {
    get
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func willMove(toSuperview newSuperview: UIKit.UIView?)
  open func acceptCurrentTextAsTag()
  open var isEditing: Swift.Bool {
    get
  }
  open func beginEditing()
  open func endEditing()
  open func addTags(_ tags: [Swift.String])
  open func addTags(_ tags: [SAPFiori.FUISearchTag])
  open func addTag(_ tag: Swift.String)
  open func addTag(_ tag: SAPFiori.FUISearchTag)
  open func removeTag(_ tag: Swift.String)
  open func removeTag(_ tag: SAPFiori.FUISearchTag)
  open func removeTagAtIndex(_ index: Swift.Int)
  open func removeTags()
  @discardableResult
  open func tokenizeTextFieldText() -> SAPFiori.FUISearchTag?
  @objc open func onTextFieldDidChange(_ sender: Swift.AnyObject)
  open func selectNextTag()
  open func selectPrevTag()
  open func selectTagView(_ tagView: SAPFiori.FUISearchTagView, animated: Swift.Bool = false)
  open func unselectAllTagViewsAnimated(_ animated: Swift.Bool = false)
  open var borders: UIKit.UIRectEdge {
    get
    set
  }
  @objc deinit
}
extension FUISearchTagsField {
  public var keyboardType: UIKit.UIKeyboardType {
    get
    set
  }
  public var returnKeyType: UIKit.UIReturnKeyType {
    get
    set
  }
  public var spellCheckingType: UIKit.UITextSpellCheckingType {
    get
    set
  }
  public var autocapitalizationType: UIKit.UITextAutocapitalizationType {
    get
    set
  }
  public var autocorrectionType: UIKit.UITextAutocorrectionType {
    get
    set
  }
  public var enablesReturnKeyAutomatically: Swift.Bool {
    get
    set
  }
  public var text: Swift.String? {
    get
    set
  }
  @available(iOS, message: "DO NOT USE.  Property will be overwritten by framework.  Use `inputFieldAccessoryView, instead`.")
  @objc override dynamic open var inputAccessoryView: UIKit.UIView? {
    @objc get
  }
  open var inputFieldAccessoryView: UIKit.UIView? {
    get
    set
  }
}
extension FUISearchTagsField : UIKit.UITextFieldDelegate {
  @objc dynamic public func textFieldDidBeginEditing(_ textField: UIKit.UITextField)
  @objc dynamic public func textFieldDidEndEditing(_ textField: UIKit.UITextField)
  @objc dynamic public func textFieldShouldReturn(_ textField: UIKit.UITextField) -> Swift.Bool
  @objc dynamic public func textField(_ textField: UIKit.UITextField, shouldChangeCharactersIn range: Foundation.NSRange, replacementString string: Swift.String) -> Swift.Bool
}
extension FUISearchTagsField : UIKit.UIScrollViewDelegate {
  @objc dynamic public func scrollViewDidScroll(_ scrollView: UIKit.UIScrollView)
}
public func == (lhs: UIKit.UITextField, rhs: SAPFiori.FUISearchTagsField) -> Swift.Bool
@objc @_inheritsConvenienceInitializers open class FUIImageCollectionItemView : SAPFiori.FUIDrawingView, SAPFiori.FUIDetailImageViewComponent {
  public var detailImageView: SAPFiori.FUIImageView
  public var detailImage: UIKit.UIImage? {
    get
    set
  }
  public var detailImageViewSize: CoreGraphics.CGSize {
    get
    set
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func prepareForReuse()
  override public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  override public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  @objc deinit
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUISubtitleComponent {
  public var subtitle: SAPFiori.FUIText {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUISubtitleMultiLineComponent {
  public var subtitle: SAPFiori.FUIMultiLineText {
    get
  }
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUISubtitleBaseComponent {
  public var subtitleAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var subtitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public enum FUIChartAxisId {
  case x
  case y
  case radius
  case dual
  case category
  public static func == (a: SAPFiori.FUIChartAxisId, b: SAPFiori.FUIChartAxisId) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class FUIChartAxis {
  public var labels: SAPFiori.FUIChartLabelAttributes {
    get
  }
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FUIChartNumericAxis : SAPFiori.FUIChartAxis {
  public var isZeroBased: Swift.Bool
  public var formatter: Foundation.NumberFormatter {
    get
    set
  }
  public var abbreviatesLabels: Swift.Bool
  public var isMagnitudedDisplayed: Swift.Bool {
    get
    set
  }
  public var explicitMin: Swift.Double?
  public var explicitMax: Swift.Double?
  @objc deinit
}
public enum FUIChartCategoryAxisLabelLayoutStyle {
  case allOrNothing
  case range
  public static func == (a: SAPFiori.FUIChartCategoryAxisLabelLayoutStyle, b: SAPFiori.FUIChartCategoryAxisLabelLayoutStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_hasMissingDesignatedInitializers public class FUIChartCategoryAxis : SAPFiori.FUIChartNumericAxis {
  public var labelLayoutStyle: SAPFiori.FUIChartCategoryAxisLabelLayoutStyle {
    get
    set
  }
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIHierarchyCollectionItem : SAPFiori.FUITableViewAccessoryDrawingCollectionViewCell<SAPFiori.FUIHierarchyItemView> {
  weak open var parentHierarchyView: SAPFiori.FUIHierarchyView?
  final public let hierarchyIndicator: SAPFiori.FUIHierarchyIndicator
  override open var accessoriesPaddedWidth: CoreGraphics.CGFloat {
    get
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
public protocol FUIBackgroundSchemeSupporting : AnyObject {
  var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme { get set }
}
public struct FUIGeometryLayer : Swift.Hashable {
  public let displayName: Swift.String
  public init(displayName: Swift.String, uuid: Swift.String = UUID().uuidString)
  public static func == (lhs: SAPFiori.FUIGeometryLayer, rhs: SAPFiori.FUIGeometryLayer) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class FUIBarButtonItem : UIKit.UIBarButtonItem {
  @objc override dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc override dynamic open var isEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  public func setImage(_ image: UIKit.UIImage?, for state: SAPFiori.FUIControlState)
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension MKPointAnnotation {
  convenience public init(coordinate: CoreLocation.CLLocationCoordinate2D)
}
public protocol FUIMKRoutingMapViewDataSource : SAPFiori.FUIMKMapViewDataSource {
  func numberOfRoutes(in mapView: MapKit.MKMapView) -> Swift.Int
  func mapView(_ mapView: MapKit.MKMapView, routeAt index: Swift.Int) -> SAPFiori.FUIRoute<MapKit.MKPolyline, MapKit.MKPointAnnotation>
}
extension FUIMKRoutingMapViewDataSource {
  public func numberOfLayers(in mapView: MapKit.MKMapView) -> Swift.Int
  public func mapView(_ mapView: MapKit.MKMapView, layerAtIndex index: Swift.Int) -> SAPFiori.FUIGeometryLayer
  public func mapView(_ mapView: MapKit.MKMapView, geometriesForLayer layer: SAPFiori.FUIGeometryLayer) -> [SAPFiori.FUIAnnotation]
}
@objc @_inheritsConvenienceInitializers open class FUIObjectHeaderView : SAPFiori.FUIDrawingView, SAPFiori.FUIObjectHeaderViewComponent, SAPFiori.FUIObjectComponent, SAPFiori.FUITagsComponent {
  public var headlineLabel: SAPFiori.FUILabelProxy {
    get
  }
  public var subheadlineLabel: SAPFiori.FUILabelProxy {
    get
  }
  public var bodyLabel: SAPFiori.FUILabelProxy {
    get
  }
  public var footnoteLabel: SAPFiori.FUILabelProxy {
    get
  }
  public var descriptionLabel: SAPFiori.FUILabelProxy {
    get
  }
  public var statusLabel: SAPFiori.FUILabelProxy {
    get
  }
  public var substatusLabel: SAPFiori.FUILabelProxy {
    get
  }
  public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  @available(*, deprecated, message: "The component design has been updated, to allocate content frames based upon the content intrinsic sizes.  The value `splitPercent` will be ignored at runtime.")
  public var splitPercent: CoreGraphics.CGFloat
  @available(*, deprecated, message: "The component design has been updated, to allocate content frames based upon the content intrinsic sizes.  The value `isApplyingSplitPercent` will be ignored at runtime.")
  public var isApplyingSplitPercent: Swift.Bool {
    get
    set
  }
  override open var isCompact: Swift.Bool {
    get
  }
  public var preserveDetailImageSpacing: Swift.Bool
  public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  public var detailContentView: UIKit.UIView? {
    get
    set
  }
  override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  @objc deinit
  override open func refreshAttributedStrings()
  public var pageControl: UIKit.UIPageControl {
    get
  }
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func prepareForReuse()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func copy(_ sender: Any?)
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic public func resignFirstResponder() -> Swift.Bool
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
extension MKOverlayRenderer {
  @objc @_inheritsConvenienceInitializers public class Nil : MapKit.MKOverlayRenderer {
    @objc deinit
    @objc override dynamic public init(overlay: MapKit.MKOverlay)
  }
}
@objc @_inheritsConvenienceInitializers open class FUIMKMapView : MapKit.MKMapView {
  @objc override weak dynamic open var delegate: MapKit.MKMapViewDelegate? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  open var layers: [SAPFiori.FUIGeometryLayer] {
    get
  }
  open var overlaysForLayer: [SAPFiori.FUIGeometryLayer : [SAPFiori.FUIOverlay]] {
    get
  }
  open var annotationsForLayer: [SAPFiori.FUIGeometryLayer : [SAPFiori.FUIAnnotation]] {
    get
  }
  open var isLayerHidden: [SAPFiori.FUIGeometryLayer : Swift.Bool] {
    get
  }
  open var selectedOverlays: [SAPFiori.FUIOverlay] {
    get
  }
  @objc override dynamic open func selectAnnotation(_ annotation: MapKit.MKAnnotation, animated: Swift.Bool)
  @objc override dynamic open func deselectAnnotation(_ annotation: MapKit.MKAnnotation?, animated: Swift.Bool)
  open func selectOverlay(_ overlay: SAPFiori.FUIOverlay, animated: Swift.Bool)
  open func deselectOverlay(_ overlay: SAPFiori.FUIOverlay, animated: Swift.Bool)
  @objc deinit
}
public class FUIEditingGeometryObject<GeometryType, RepresentationType, MapContextType> : SAPFiori.FUIManageRepresentation where GeometryType : SAPFiori.FUIGeometry {
  public var geometry: GeometryType? {
    get
  }
  public var cachedGeometry: GeometryType?
  public var cachedIndex: Swift.Int
  public func updateRepresentation(_ editingCoordinate: CoreLocation.CLLocationCoordinate2D?, add newCoordinates: [CoreLocation.CLLocationCoordinate2D], with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], from existingEditingMode: SAPFiori.FUIGeospatialType, to newEditingMode: SAPFiori.FUIGeospatialType, in colorScheme: SAPFiori.FUIBackgroundColorScheme, on context: MapContextType, shouldUpdateImmediately: Swift.Bool)
  public func addRepresentation(to context: MapContextType)
  public func removeRepresentation(from context: MapContextType)
  public func redrawRepresentation(in context: MapContextType, with existingCoordinates: [CoreLocation.CLLocationCoordinate2D], scheme: SAPFiori.FUIBackgroundColorScheme, traits: UIKit.UIUserInterfaceStyle)
  public init(_ coordinate: CoreLocation.CLLocationCoordinate2D)
  public init(_ coordinates: [CoreLocation.CLLocationCoordinate2D])
  @objc deinit
}
public typealias MKEditingGeometryWrapper = SAPFiori.FUIEditingGeometryObject<MapKit.MKShape, SAPFiori.FUIMKPointAnnotation, MapKit.MKMapView>
public protocol FUIAttributesProvider : AnyObject {
  func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func styleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func mergedAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  func mergedStyleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension FUIAttributesProvider {
  public func mergedAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public func mergedStyleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension FUIAttributesProvider where Self : SAPFiori.FUITintAttributesProvider {
  public func mergedAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  public func mergedStyleSheetAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
}
extension UIBarButtonItem {
  @objc dynamic public var nuiClass: Swift.String? {
    @objc get
    @objc set
  }
  @objc dynamic public func override_didMoveToWindow()
}
extension UINavigationItem {
  public var nuiClass: Swift.String? {
    get
    set
  }
}
extension UITabBarItem {
  public var nuiClass: Swift.String? {
    get
    set
  }
}
@_inheritsConvenienceInitializers open class FUINoteFormCellContentView : SAPFiori.FUIFormCellContentView<SAPFiori.FUITextView, SAPFiori.FUIControlState>, SAPFiori.FUIValueComponent, SAPFiori.FUIPlaceholderComponent, UIKit.UITextViewDelegate {
  public var onChangeHandler: ((Swift.String) -> Swift.Void)?
  public var value: Swift.String {
    get
    set
  }
  public var valueAttributedText: Foundation.NSAttributedString {
    get
    set
  }
  public var valueStyleClassPath: [SAPFiori.FioriStyle]
  public typealias ValueType = Swift.String
  final public let placeholder: SAPFiori.FUIText
  public var isTrackingLiveChanges: Swift.Bool
  public var minNumberOfLines: Swift.Int {
    get
    set
  }
  public var maxNumberOfLines: Swift.Int
  public var maxValueTextLength: Swift.Int
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc public func textViewShouldBeginEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc public func textViewDidBeginEditing(_ textView: UIKit.UITextView)
  @objc public func textViewShouldEndEditing(_ textView: UIKit.UITextView) -> Swift.Bool
  @objc public func textViewDidEndEditing(_ textView: UIKit.UITextView)
  @objc public func textView(_ textView: UIKit.UITextView, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc public func textViewDidChange(_ textView: UIKit.UITextView)
  @objc public func textViewDidChangeSelection(_ textView: UIKit.UITextView)
  @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith textAttachment: UIKit.NSTextAttachment, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @objc public func textView(_ textView: UIKit.UITextView, shouldInteractWith URL: Foundation.URL, in characterRange: Foundation.NSRange, interaction: UIKit.UITextItemInteraction) -> Swift.Bool
  @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public protocol FUIObjectHeaderViewBaseComponent : AnyObject {
  var headlineLabel: SAPFiori.FUILabelProxy { get }
  var subheadlineLabel: SAPFiori.FUILabelProxy { get }
  var footnoteLabel: SAPFiori.FUILabelProxy { get }
  var descriptionLabel: SAPFiori.FUILabelProxy { get }
  var statusLabel: SAPFiori.FUILabelProxy { get }
  var substatusLabel: SAPFiori.FUILabelProxy { get }
  var statusImageView: SAPFiori.FUIImageView { get }
  var substatusImageView: SAPFiori.FUIImageView { get }
  var detailImageView: SAPFiori.FUIImageView { get }
  var splitPercent: CoreGraphics.CGFloat { get set }
  var isApplyingSplitPercent: Swift.Bool { get set }
}
public protocol FUIObjectHeaderViewComponent : SAPFiori.FUIObjectHeaderViewBaseComponent {
  var bodyLabel: SAPFiori.FUILabelProxy { get }
  var bodyText: Swift.String? { get set }
  var detailContentView: UIKit.UIView? { get set }
}
extension FUIObjectHeaderViewComponent {
  public var bodyText: Swift.String? {
    get
    set
  }
}
@objc @_inheritsConvenienceInitializers open class FUISimplePropertyCollectionViewCell : SAPFiori.NibDesignableFUIBaseCollectionViewCell {
  @objc @IBOutlet weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBInspectable public var value: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc deinit
}
public enum FUIHorizontalAlignment {
  case left
  case center
  case right
  public static func == (a: SAPFiori.FUIHorizontalAlignment, b: SAPFiori.FUIHorizontalAlignment) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUIButtonFormCell : SAPFiori.FUIInlineValidationTableViewCell {
  public typealias ValueType = SAPFiori.UIControlEvents
  public var onChangeHandler: ((SAPFiori.UIControlEvents) -> Swift.Void)?
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc override dynamic open func awakeFromNib()
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBOutlet weak public var button: SAPFiori.FUIButton! {
    get
  }
  public var alignment: SAPFiori.FUIHorizontalAlignment {
    get
    set
  }
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  override public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
public enum FUICalendarStyle {
  case month
  @available(*, unavailable, renamed: "month")
  case monthView
  case week
  @available(*, unavailable, renamed: "week")
  case weekView
  case expandable
  @available(*, unavailable, renamed: "expandable")
  case expandableView
  case rangeSelection
  @available(*, unavailable, renamed: "rangeSelection")
  case multipleSelectionView
  case datesSelection
  public static func == (a: SAPFiori.FUICalendarStyle, b: SAPFiori.FUICalendarStyle) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum FUIWeekStartDay {
  case sunday
  case monday
  case saturday
  case localeSpecific
  public static func == (a: SAPFiori.FUIWeekStartDay, b: SAPFiori.FUIWeekStartDay) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct FUIVisibleDates {
  public let previous: [Foundation.Date]
  public let current: [Foundation.Date]
  public let next: [Foundation.Date]
}
public protocol FUIDateSelection {
}
extension Date : SAPFiori.FUIDateSelection {
}
extension FUIDateRange : SAPFiori.FUIDateSelection {
}
@objc open class FUICalendarView : SAPFiori.FUIBaseDrawingView, SAPFiori.FUIAttributesProvider, SAPFiori.FUISelectionRangeComponent, SAPFiori.FUIEventViewComponent {
  public var style: SAPFiori.FUICalendarStyle {
    get
  }
  public var startDay: SAPFiori.FUIWeekStartDay {
    get
  }
  public var title: Swift.String {
    get
  }
  public var startDate: Foundation.Date? {
    get
  }
  public var endDate: Foundation.Date? {
    get
  }
  public var visibleDates: SAPFiori.FUIVisibleDates? {
    get
  }
  public var selectedDates: [Foundation.Date]? {
    get
  }
  public var displayDateAtStartup: Foundation.Date? {
    get
  }
  public var selectionSingleColor: UIKit.UIColor?
  public var selectionRangeColor: UIKit.UIColor?
  public var eventViewColor: UIKit.UIColor?
  public var hasEventIndicator: Swift.Bool {
    get
  }
  weak public var delegate: SAPFiori.FUICalendarViewDelegate?
  public var isPersistentSelection: Swift.Bool {
    get
  }
  public var showsWeekNumbers: Swift.Bool
  final public let calendarItemTintAttributesProvider: SAPFiori.FUIControlStateTintAttributesProvider
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public init(calendarStyle: SAPFiori.FUICalendarStyle = .month, weekStartDay: SAPFiori.FUIWeekStartDay = .localeSpecific, startDate: Foundation.Date? = nil, endDate: Foundation.Date? = nil, displayDateAtStartup: Foundation.Date? = nil, isPersistentSelection: Swift.Bool = false, hasEventIndicator: Swift.Bool = true)
  @objc required dynamic public init()
  @objc deinit
  open func scrollToDate(_ date: Foundation.Date?, animated: Swift.Bool = true, completionHandler: (() -> Swift.Void)? = nil)
  open func selectDate(_ date: Foundation.Date?)
  open func selectDateRange(_ dateRange: SAPFiori.FUIDateRange?)
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func layoutSubviews()
  @objc public func reloadData()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension FUICalendarView : UIKit.UIGestureRecognizerDelegate {
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldRecognizeSimultaneouslyWith otherGestureRecognizer: UIKit.UIGestureRecognizer) -> Swift.Bool
  @objc dynamic public func gestureRecognizer(_ gestureRecognizer: UIKit.UIGestureRecognizer, shouldReceive touch: UIKit.UITouch) -> Swift.Bool
}
public protocol FUICalendarViewDelegate : AnyObject {
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeVisibleDatesTo visibleDates: SAPFiori.FUIVisibleDates)
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didSelectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didDeselectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  func calendar(_ calendarView: SAPFiori.FUICalendarView, willDisplay cell: SAPFiori.FUICalendarItemCollectionViewCell, forItemAt date: Foundation.Date, indexPath: Foundation.IndexPath)
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeTitleTo title: Swift.String)
  func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeSelections selections: [SAPFiori.FUIDateSelection])
}
extension FUICalendarViewDelegate {
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeVisibleDatesTo visibleDates: SAPFiori.FUIVisibleDates)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didSelectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didDeselectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  public func calendar(_ calendarView: SAPFiori.FUICalendarView, willDisplay cell: SAPFiori.FUICalendarItemCollectionViewCell, forItemAt date: Foundation.Date, indexPath: Foundation.IndexPath)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeTitleTo title: Swift.String)
}
extension FUICalendarView : SAPFiori.FUICalendarViewDelegate {
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeVisibleDatesTo visibleDates: SAPFiori.FUIVisibleDates)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didSelectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didDeselectDate date: Foundation.Date, cell: SAPFiori.FUICalendarItemCollectionViewCell)
  public func calendar(_ calendarView: SAPFiori.FUICalendarView, willDisplay cell: SAPFiori.FUICalendarItemCollectionViewCell, forItemAt date: Foundation.Date, indexPath: Foundation.IndexPath)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeTitleTo title: Swift.String)
  public func calendarView(_ calendarView: SAPFiori.FUICalendarView, didChangeSelections selections: [SAPFiori.FUIDateSelection])
}
extension FUIMapToolbar {
  @objc @_inheritsConvenienceInitializers open class LegendButton : SAPFiori.FUIMapToolbarButton {
    @objc override dynamic public init(frame: CoreGraphics.CGRect)
    @objc required dynamic public init()
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    override public init(type: SAPFiori.FUIMapToolbarButtonType)
    @objc deinit
  }
}
@available(*, unavailable, renamed: "FUIMapToolbar.LegendButton")
public typealias FUIMapToolbarLegendButton = SAPFiori.FUIMapToolbar.LegendButton
@objc @_inheritsConvenienceInitializers open class FUITextField : UIKit.UITextField {
  public var onChangeHandler: ((Swift.String?) -> Swift.Void)?
  @objc override dynamic open var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic open func editingRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic open func textRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic open func placeholderRect(forBounds bounds: CoreGraphics.CGRect) -> CoreGraphics.CGRect
  @objc override dynamic open func addSubview(_ view: UIKit.UIView)
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUILoadingIndicatorView : SAPFiori.NibDesignable {
  @objc @IBOutlet weak public var activityIndicator: UIKit.UIActivityIndicatorView! {
    get
  }
  @objc @IBOutlet weak public var textLabel: UIKit.UILabel! {
    get
  }
  @objc @IBInspectable public var text: Swift.String? {
    @objc get
    @objc set
  }
  public var isAnimating: Swift.Bool {
    get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  open func show(animated: Swift.Bool = true)
  open func dismiss()
  open func startAnimating()
  open func stopAnimating()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc deinit
}
public enum FUIControlLayout {
  case none
  case single
  case double
  public static func == (a: SAPFiori.FUIControlLayout, b: SAPFiori.FUIControlLayout) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol FUIGlyphImage {
  var glyphText: Swift.String? { get }
  var glyphImage: UIKit.UIImage? { get }
  var attributedText: Foundation.NSAttributedString! { get }
  var attributes: [SAPFiori.NSAttributedStringKey : Any] { get }
}
extension FUIImageView : SAPFiori.FUIGlyphImage {
  public var glyphImage: UIKit.UIImage? {
    get
  }
  public var attributedText: Foundation.NSAttributedString! {
    get
  }
  public var attributes: [SAPFiori.NSAttributedStringKey : Any] {
    get
  }
}
extension FUIImageView : SAPFiori.FUIAttributedGlyphImage {
  public var size: CoreGraphics.CGSize? {
    get
  }
}
public protocol FUIAttributedGlyphImage : SAPFiori.FUIGlyphImage {
  var size: CoreGraphics.CGSize? { get }
  var tintColor: UIKit.UIColor! { get set }
  var isCircular: Swift.Bool { get set }
  var contentMode: SAPFiori.UIViewContentMode { get set }
}
public class FUIAttributedImage : SAPFiori.FUIAttributedGlyphImage {
  public var glyphImage: UIKit.UIImage? {
    get
  }
  public var attributedText: Foundation.NSAttributedString! {
    get
  }
  public var size: CoreGraphics.CGSize?
  public var tintColor: UIKit.UIColor! {
    get
    set
  }
  public var isCircular: Swift.Bool
  public var contentMode: SAPFiori.UIViewContentMode
  public var attributes: [SAPFiori.NSAttributedStringKey : Any] {
    get
    set
  }
  public init(image: UIKit.UIImage)
  public init(image: UIKit.UIImage, attributes: [SAPFiori.NSAttributedStringKey : Any])
  @objc deinit
}
extension FUIGlyphImage {
  public var glyphText: Swift.String? {
    get
  }
  public var glyphImage: UIKit.UIImage? {
    get
  }
  public var attributes: [SAPFiori.NSAttributedStringKey : Any] {
    get
  }
}
open class FUITableViewCollectionSection {
  open var collectionView: UIKit.UICollectionView {
    get
  }
  open var collectionViewTableViewCell: SAPFiori.FUICollectionViewTableViewCell {
    get
  }
  public init(tableView: UIKit.UITableView, collectionViewLayout: UIKit.UICollectionViewLayout = UICollectionViewFlowLayout())
  open var rowCount: Swift.Int {
    get
  }
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUIAttachmentsFormCell : SAPFiori.NibDesignableFUIBaseTableViewCell {
  open class var reuseIdentifier: Swift.String {
    get
  }
  open var attachmentsController: SAPFiori.FUIAttachmentsViewController {
    get
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  override public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
}
public enum FUICollectionViewLayout {
  public static var horizontalScroll: SAPFiori.FUIHorizontalScrollCollectionViewLayout {
    get
  }
  public static var horizontalScrollDynamicSize: SAPFiori.FUIHorizontalScrollDynamicSizeCollectionViewLayout {
    get
  }
  public static var horizontalFlow: SAPFiori.FUIHorizontalFlowCollectionViewLayout {
    get
  }
  public static var autosizingColumnFlow: SAPFiori.FUIStandardAutoSizingColumnFlowLayout {
    get
  }
  public static var keyValueColumnFlow: SAPFiori.FUIKeyValueFlowLayout {
    get
  }
}
@_inheritsConvenienceInitializers open class FUIObjectCardContentView : SAPFiori.FUIObjectViewBase, SAPFiori.FUIObjectCardComponent {
  open var trailingProperties: [SAPFiori.FUIObjectCardContentView.OrderedPropertyRef] {
    get
    set
  }
  final public let title: SAPFiori.FUIMultiLineText
  final public let subtitle: SAPFiori.FUIMultiLineText
  final public let footnote: SAPFiori.FUIMultiLineText
  final public let status: SAPFiori.FUIText
  public var statusImage: UIKit.UIImage? {
    get
    set
  }
  open var iconImages: [SAPFiori.FUIGlyphImage] {
    get
    set
  }
  public var rating: Swift.Int? {
    get
    set
  }
  public var tags: [SAPFiori.FUITag] {
    get
    set
  }
  final public let tagsPlaceholderTitle: SAPFiori.FUIPlaceholderFormatter
  public enum OrderedPropertyRef {
    case footnote
    case rating
    case tags
    public static func == (a: SAPFiori.FUIObjectCardContentView.OrderedPropertyRef, b: SAPFiori.FUIObjectCardContentView.OrderedPropertyRef) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  override open func refreshAttributedStrings()
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIMultiLineText
}
@objc @_inheritsConvenienceInitializers open class FUIHorizontalFlowCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  open var minimumScaledItemSize: CoreGraphics.CGSize
  open var numberOfColumns: Swift.Int
  open var isLayoutJustified: Swift.Bool
  open var numberOfRows: Swift.Int
  open var isTopAligned: Swift.Bool
  @objc override dynamic open var scrollDirection: SAPFiori.UICollectionViewScrollDirection {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc override dynamic open func prepare()
  @objc override dynamic open var collectionViewContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUISingleActionButton : SAPFiori.FUIButton {
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIBaseCollectionViewLayout<LayoutManager> : UIKit.UICollectionViewLayout where LayoutManager : SAPFiori.FUISectionLayoutManager {
  open var sectionInset: UIKit.UIEdgeInsets
  open var itemSize: CoreGraphics.CGSize
  open var estimatedItemSize: CoreGraphics.CGSize
  open var interitemSpacing: CoreGraphics.CGFloat
  open var lineSpacing: CoreGraphics.CGFloat
  open var headerReferenceHeight: CoreGraphics.CGFloat
  open var footerReferenceHeight: CoreGraphics.CGFloat
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open class var invalidationContextClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func prepare()
  @objc override dynamic open var collectionViewContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc override dynamic open func shouldInvalidateLayout(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> Swift.Bool
  @objc override dynamic open func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext)
  @objc override dynamic open func invalidationContext(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutInvalidationContext
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func layoutAttributesForDecorationView(ofKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc deinit
}
extension FUIMapDetailPanel {
  @_inheritsConvenienceInitializers @IBDesignable open class StatusTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIMapDetailStatusView> {
    @objc override dynamic open func prepareForInterfaceBuilder()
    @objc override dynamic open func prepareForReuse()
    @objc deinit
    @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
    @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
    @objc required dynamic public init()
  }
}
@available(*, unavailable, renamed: "FUIMapDetailPanel.StatusTableViewCell")
public typealias FUIMapDetailStatusTableViewCell = SAPFiori.FUIMapDetailPanel.StatusTableViewCell
@objc @_inheritsConvenienceInitializers open class FUIListPickerTableViewController : UIKit.UITableViewController, UIKit.UISearchResultsUpdating, UIKit.UISearchBarDelegate, SAPFiori.FUIBarcodeScanViewControllerDelegate {
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIListPickerTableViewController
  public var effectiveNavigationController: UIKit.UINavigationController? {
    get
    set
  }
  public var listPicker: SAPFiori.FUIListPicker
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  public var onSelectionHandler: ((Swift.Int) -> Swift.Void)?
  public var onMultipleSelectionHandler: (([Swift.Int]) -> Swift.Void)?
  public var onUuidSelectionHandler: ((Swift.String) -> Swift.Void)?
  public var onUuidMultipleSelectionHandler: (([Swift.String]) -> Swift.Void)?
  public var showsCancelButton: Swift.Bool {
    get
    set
  }
  public var isDismissedOnSelection: Swift.Bool
  public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @objc override dynamic open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, viewForHeaderInSection section: Swift.Int) -> UIKit.UIView?
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, heightForFooterInSection section: Swift.Int) -> CoreGraphics.CGFloat
  @objc override dynamic open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  public func selectItem(_ index: Swift.Int)
  public func selectItem(_ uniqueIdentifier: Swift.String)
  @objc public func updateSearchResults(for searchController: UIKit.UISearchController)
  @objc public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @objc public func searchBar(_ searchBar: UIKit.UISearchBar, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc public func searchBarShouldBeginEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @objc public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @objc public func searchBarShouldEndEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @objc public func searchBarTextDidEndEditing(_ searchBar: UIKit.UISearchBar)
  @objc public func searchBarBookmarkButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc public func searchBarResultsListButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc public func searchBar(_ searchBar: UIKit.UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Swift.Int)
  public func barcodeScanViewController(_ barcodeScanViewController: SAPFiori.FUIBarcodeScanViewController, didReceiveScanResult scanResult: SAPFiori.FUIBarcodeScanResult?)
  @objc deinit
  @objc override dynamic public init(style: UIKit.UITableView.Style)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_inheritsConvenienceInitializers open class FUIBaseDrawingViewController<InnerView> : UIKit.UIViewController, SAPFiori.InnerViewContainer where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  public var bounds: CoreGraphics.CGRect {
    get
  }
  @available(iOS 11.0, *)
  public var safeAreaInsets: UIKit.UIEdgeInsets {
    get
  }
  public var _innerView: InnerView! {
    get
  }
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
  @objc override dynamic open func loadView()
  @objc override dynamic open func viewDidLayoutSubviews()
  @objc deinit
}
public enum FUIGridRowItemType {
  case number
  case text
  case image
  public static func == (a: SAPFiori.FUIGridRowItemType, b: SAPFiori.FUIGridRowItemType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol FUIGridRowItem : AnyObject {
  var type: SAPFiori.FUIGridRowItemType { get }
}
@_inheritsConvenienceInitializers open class FUIObjectHeaderChartView : SAPFiori.FUITintableDrawingView<SAPFiori.FUIControlState>, SAPFiori.FUITitleComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUITrendComponent, SAPFiori.FUIKPIComponent, SAPFiori.FUIKPIAttributesConsumer, SAPFiori.FUIKPIAttributesProvider {
  public var title: SAPFiori.FUIText {
    get
  }
  public var subtitle: SAPFiori.FUIText {
    get
  }
  public var trend: SAPFiori.FUIText {
    get
  }
  public var trendImage: UIKit.UIImage? {
    get
    set
  }
  public var trendSemanticColor: UIKit.UIColor? {
    get
    set
  }
  public var kpiItems: [SAPFiori.FUIKPIViewItem]
  public var kpiUnitItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiMetricItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiIconItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiFractionItemStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var kpiAttributesProvider: SAPFiori.FUIKPIAttributesProvider?
  final public let chartView: SAPFiori.FUIChartView
  override open var isEnabled: Swift.Bool {
    get
    set
  }
  public var longPressGestureRecognizer: UIKit.UILongPressGestureRecognizer! {
    get
  }
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func tintAttributes(for property: SAPFiori.FUIPropertyRef, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  open func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  open func tintAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle, state: SAPFiori.FUIControlState) -> [SAPFiori.NSAttributedStringKey : Any]
  open func kpiParagraphStyle() -> UIKit.NSParagraphStyle
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIText
}
@objc @_inheritsConvenienceInitializers open class FUICreateGeometryPopOverTableViewController : SAPFiori.FUIResizablePopoverContainer, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func numberOfSections(in tableView: UIKit.UITableView) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  open var didSelectHandler: ((SAPFiori.FUIMapLegendItem) -> Swift.Void)?
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
  @objc deinit
}
@objc public protocol FUIListPickerDataSource : AnyObject {
  @available(*, unavailable, renamed: "numberOfRows(in:)")
  @objc optional func numberOfRows() -> Swift.Int
  @objc optional func numberOfRows(in listPickerTableView: UIKit.UITableView) -> Swift.Int
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, cellForRowAt index: Swift.Int, isFiltered: Swift.Bool) -> UIKit.UITableViewCell
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, cellForItemWithUniqueIdentifier uniqueIdentifier: Swift.String) -> UIKit.UITableViewCell
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, uniqueIdentifierForItemAt index: Swift.Int) -> Swift.String
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, indexForUniqueIdentifier uniqueIdentifier: Swift.String) -> Swift.Int
  @objc optional func numberOfSections(in listPicker: SAPFiori.FUIListPicker) -> Swift.Int
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, titleForHeaderInSection section: Swift.Int) -> Swift.String?
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, cellForRowAtIndexPath indexPath: Foundation.IndexPath, isFiltered: Swift.Bool) -> UIKit.UITableViewCell
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, uniqueIdentifierForItemAtIndexPath indexPath: Foundation.IndexPath) -> Swift.String
  @objc optional func listPickerTableView(_ tableView: UIKit.UITableView, indexPathForUniqueIdentifier uniqueIdentifier: Swift.String) -> Foundation.IndexPath?
}
@objc public protocol FUIListPickerSearchResultsUpdating : AnyObject {
  @objc func listPicker(_ listPicker: SAPFiori.FUIListPicker, updateSearchResults forSearchString: Swift.String)
  @objc optional func listPicker(_ listPicker: SAPFiori.FUIListPicker, filteredDataSourceContainsItemAt unfilteredIndex: Swift.Int) -> Swift.Bool
  @objc optional func listPicker(_ listPicker: SAPFiori.FUIListPicker, unfilteredDataSourceIndexOfItemAt filteredIndex: Swift.Int) -> Swift.Int
  @objc optional func listPicker(_ listPicker: SAPFiori.FUIListPicker, filteredDataSourceContainsItemWithUniqueIdentifier uniqueIdentifier: Swift.String) -> Swift.Bool
}
@objc @_inheritsConvenienceInitializers open class FUIListPickerFormCell : SAPFiori.FUIInlineValidationTableViewCell {
  open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = [Swift.Int]
  public var value: [Swift.Int]
  public var uuidValues: [Swift.String]
  public var onChangeHandler: (([Swift.Int]) -> Swift.Void)?
  public var onUuidChangeHandler: (([Swift.String]) -> Swift.Void)?
  @available(*, deprecated, message: "No longer needed.")
  public var hierarchyPickerType: SAPFiori.FUIHierarchyListPickerType
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  public var valueOptions: [Swift.String]
  public var listPicker: SAPFiori.FUIListPicker!
  public var presentsListPickerModally: Swift.Bool
  public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  public var allowsEmptySelection: Swift.Bool
  @objc @IBOutlet weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @available(*, unavailable, renamed: "valueLabel")
  weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBOutlet weak public var valueLabel: UIKit.UILabel! {
    get
  }
  public var isUndoEnabled: Swift.Bool
  public var isTrackingLiveChanges: Swift.Bool
  public var isPickerDismissedOnSelection: Swift.Bool
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func updateConstraints()
  @objc deinit
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
}
public enum FUIHierarchyListPickerType {
  case none
  case singleLine
  case multiLine
  public static func == (a: SAPFiori.FUIHierarchyListPickerType, b: SAPFiori.FUIHierarchyListPickerType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class FUISearchController : UIKit.UISearchController, SAPFiori.FUIBarcodeScanViewControllerDelegate {
  @objc override dynamic public init(searchResultsController: UIKit.UIViewController?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc override dynamic open var isActive: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var searchBar: SAPFiori.FUISearchBar {
    @objc get
  }
  @objc override dynamic open var searchResultsUpdater: UIKit.UISearchResultsUpdating? {
    @objc get
    @objc set
  }
  open var setsNavigationBarColor: Swift.Bool
  open var setsStatusBarStyle: Swift.Bool
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewWillLayoutSubviews()
  @objc override dynamic open func viewWillDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  public func barcodeScanViewController(_ barcodeScanViewController: SAPFiori.FUIBarcodeScanViewController, didReceiveScanResult scanResult: SAPFiori.FUIBarcodeScanResult?)
  @objc deinit
}
extension FUISearchController : UIKit.UISearchBarDelegate {
  @objc dynamic public func searchBarShouldBeginEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @objc dynamic public func searchBarTextDidBeginEditing(_ searchBar: UIKit.UISearchBar)
  @objc dynamic public func searchBarShouldEndEditing(_ searchBar: UIKit.UISearchBar) -> Swift.Bool
  @objc dynamic public func searchBarTextDidEndEditing(_ searchBar: UIKit.UISearchBar)
  @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, textDidChange searchText: Swift.String)
  @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, shouldChangeTextIn range: Foundation.NSRange, replacementText text: Swift.String) -> Swift.Bool
  @objc dynamic public func searchBarSearchButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc dynamic public func searchBarBookmarkButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc dynamic public func searchBarCancelButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc dynamic public func searchBarResultsListButtonClicked(_ searchBar: UIKit.UISearchBar)
  @objc dynamic public func searchBar(_ searchBar: UIKit.UISearchBar, selectedScopeButtonIndexDidChange selectedScope: Swift.Int)
}
extension FUISearchController : UIKit.UIBarPositioningDelegate {
  @objc dynamic public func position(for bar: UIKit.UIBarPositioning) -> UIKit.UIBarPosition
}
extension FUISearchController : UIKit.UISearchResultsUpdating {
  @objc dynamic public func updateSearchResults(for searchController: UIKit.UISearchController)
}
public struct FUIPalette : SAPFiori.FUIPaletteProvider {
  public func hexColor(for style: SAPFiori.FUIColorStyle, variant: SAPFiori.FUIColorVariant) -> SAPFiori.FUIPaletteHexColor
  public var uuid: Foundation.UUID {
    get
  }
}
extension FUIPalette : Swift.Equatable {
  public static func == (lhs: SAPFiori.FUIPalette, rhs: SAPFiori.FUIPalette) -> Swift.Bool
}
@_inheritsConvenienceInitializers open class FUIObjectBaseTableViewCell<InnerView> : SAPFiori.FUIBaseDrawingTableViewCell<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIObjectBaseDrawing, InnerView : SAPFiori.FUIReactingToAccessory, InnerView : SAPFiori.FUIStyleByStringAttributes {
  public var iconsColumnWidth: CoreGraphics.CGFloat {
    get
    set
  }
  @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @objc override dynamic open var accessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  open var isActionAccessoryAlsoEditingActionAccessory: Swift.Bool {
    get
    set
  }
  open var actionAccessoryView: SAPFiori.FUISingleActionAccessoryView? {
    get
  }
  open var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @objc override dynamic open var editingAccessoryView: UIKit.UIView? {
    @objc get
    @objc set
  }
  @objc override dynamic open func willTransition(to state: SAPFiori.UITableViewCellStateMask)
  @objc override dynamic open func didTransition(to state: SAPFiori.UITableViewCellStateMask)
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
@objc open class FUIGridRowImageItem : SAPFiori.FUIImageView, SAPFiori.FUIGridRowItem {
  public var isAffectingRowHeight: Swift.Bool
  public var binding: SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image?
  @objc override dynamic public init(image: UIKit.UIImage?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  public var type: SAPFiori.FUIGridRowItemType {
    get
  }
  @objc override dynamic open func didMoveToSuperview()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
}
@_hasMissingDesignatedInitializers public class FUIChartSeries {
  public var color: UIKit.UIColor? {
    get
  }
  public var numberOfValues: Swift.Int {
    get
  }
  public func valueForCategory(_ categoryIndex: Swift.Int, dimension dimensionIndex: Swift.Int) -> Swift.Double?
  public func valuesInCategoryRange(_ categoryRange: Swift.CountableClosedRange<Swift.Int>, dimension dimensionIndex: Swift.Int) -> [Swift.Double?]?
  public func valuesForDimension(_ dimension: Swift.Int = 0) -> [Swift.Double?]?
  @objc deinit
}
@_hasMissingDesignatedInitializers public class FUIChartSeriesCollection {
  public var colors: [UIKit.UIColor] {
    get
    set
  }
  public var maximumNumberOfValues: Swift.Int {
    get
  }
  final public let points: SAPFiori.FUIChartPointAttributes
  @objc deinit
}
extension FUIChartSeriesCollection : Swift.Sequence {
  public typealias Iterator = Swift.AnyIterator<SAPFiori.FUIChartSeries>
  public func makeIterator() -> SAPFiori.FUIChartSeriesCollection.Iterator
}
extension FUIChartSeriesCollection : Swift.Collection {
  public typealias Index = Swift.Int
  public var startIndex: SAPFiori.FUIChartSeriesCollection.Index {
    get
  }
  public var endIndex: SAPFiori.FUIChartSeriesCollection.Index {
    get
  }
  public subscript(position: SAPFiori.FUIChartSeriesCollection.Index) -> SAPFiori.FUIChartSeriesCollection.Iterator.Element {
    get
  }
  public func index(after i: SAPFiori.FUIChartSeriesCollection.Index) -> SAPFiori.FUIChartSeriesCollection.Index
  public typealias Element = SAPFiori.FUIChartSeriesCollection.Iterator.Element
  public typealias SubSequence = Swift.Slice<SAPFiori.FUIChartSeriesCollection>
  public typealias Indices = Swift.DefaultIndices<SAPFiori.FUIChartSeriesCollection>
}
public enum FUICollectionViewVerticalAlignment : Swift.Int {
  case top
  case middle
  case bottom
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class FUIHorizontalScrollCollectionViewLayout : UIKit.UICollectionViewFlowLayout {
  open var alignment: SAPFiori.FUICollectionViewVerticalAlignment {
    get
    set
  }
  @objc override dynamic open var scrollDirection: SAPFiori.UICollectionViewScrollDirection {
    @objc get
    @objc set
  }
  @objc override dynamic open var flipsHorizontallyInOppositeLayoutDirection: Swift.Bool {
    @objc get
  }
  @objc override dynamic open class var invalidationContextClass: Swift.AnyClass {
    @objc get
  }
  @objc override dynamic open func shouldInvalidateLayout(forBoundsChange newBounds: CoreGraphics.CGRect) -> Swift.Bool
  @objc override dynamic open func shouldInvalidateLayout(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> Swift.Bool
  @objc override dynamic open func invalidationContext(forBoundsChange newBounds: CoreGraphics.CGRect) -> UIKit.UICollectionViewLayoutInvalidationContext
  @objc override dynamic open func invalidationContext(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutInvalidationContext
  @objc override dynamic open func invalidateLayout(with context: UIKit.UICollectionViewLayoutInvalidationContext)
  @objc override dynamic open var collectionViewContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func layoutAttributesForItem(at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func layoutAttributesForSupplementaryView(ofKind elementKind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewLayoutAttributes?
  @objc override dynamic open func layoutAttributesForElements(in rect: CoreGraphics.CGRect) -> [UIKit.UICollectionViewLayoutAttributes]?
  @objc override dynamic open func prepare()
  @objc override dynamic public init()
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
extension JTAppleCalendarView {
  @objc override dynamic open func layoutSubviews()
  @available(*, unavailable)
  @objc override dynamic open func reloadData()
}
@_inheritsConvenienceInitializers open class FUIBaseAccessoryDrawingCollectionViewCell<InnerView> : SAPFiori.FUIBaseDrawingCollectionViewCell<InnerView> where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIReactingToAccessory, InnerView : SAPFiori.FUIStyleByStringAttributes {
  open var accessoryView: UIKit.UIView? {
    get
    set
  }
  open var accessoriesPaddedWidth: CoreGraphics.CGFloat {
    get
  }
  public var isMomentarySelection: Swift.Bool
  @objc override dynamic open func touchesBegan(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesEnded(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func touchesCancelled(_ touches: Swift.Set<UIKit.UITouch>, with event: UIKit.UIEvent?)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func updateConstraints()
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIInlineValidationDrawingTableViewCell<InnerView> : SAPFiori.FUIBaseDrawingTableViewCell<InnerView>, SAPFiori.FUIInlineValidation where InnerView : SAPFiori.FUIBaseFixedMarginsView, InnerView : SAPFiori.FUIBackgroundSchemeSupporting, InnerView : SAPFiori.FUICalculateLayout, InnerView : SAPFiori.FUIStyleByStringAttributes {
  open var validationView: SAPFiori.FUIInlineValidationView!
  open var validationMessage: Swift.String? {
    get
    set
  }
  override open var inlineValidationViewHeight: CoreGraphics.CGFloat {
    get
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
public enum FUIGeospatialType : Swift.Int {
  case point
  case polygon
  case polyline
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
extension FUIObjectView : SAPFiori.FUIObjectComponent {
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUISliderFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell {
  open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = Swift.Float
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBInspectable public var value: Swift.Float {
    @objc get
    @objc set
  }
  public var onChangeHandler: ((Swift.Float) -> Swift.Void)?
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  public var unit: Foundation.Unit {
    get
    set
  }
  final public let formatter: Foundation.MeasurementFormatter
  @objc @IBOutlet weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBOutlet weak public var slider: UIKit.UISlider! {
    get
  }
  public var maximumValue: Swift.Float {
    get
    set
  }
  public var minimumValue: Swift.Float {
    get
    set
  }
  @objc deinit
  @objc override dynamic open func updateConstraints()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
public protocol FUIStateTintable : AnyObject {
  var state: SAPFiori.UIControlState { get }
  func stateDidChange()
  var tintColor: UIKit.UIColor! { get set }
  func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
}
extension FUIStateTintableImplementation {
  public var tintableChildren: [SAPFiori.FUIStateTintable] {
    get
  }
}
extension FUIStateTintable where Self : SAPFiori.FUIStateTintableImplementation {
  @available(*, deprecated, message: "No longer supported. Set textColor and tintColor programmatically.")
  public func setTintColor(_ color: UIKit.UIColor, for state: SAPFiori.UIControlState)
  public func stateDidChange()
  public func tintColor(for state: SAPFiori.UIControlState) -> UIKit.UIColor?
}
extension FUIStateTintable where Self : SAPFiori.FUIStateSelectable {
  public var state: SAPFiori.UIControlState {
    get
  }
}
public protocol FUIStateTintableImplementation : AnyObject {
  var tintColorForState: [SAPFiori.UIControlState : UIKit.UIColor] { get set }
  func applyTintColor(forState state: SAPFiori.UIControlState)
  func tintColorDidChange()
  var _isTintColorOverridden: Swift.Bool { get set }
  var tintableChildren: [SAPFiori.FUIStateTintable] { get }
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIChartPlotTableViewCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIChartPlotView> {
  public var chartView: SAPFiori.FUIChartView {
    get
  }
  @objc override dynamic open func didMoveToSuperview()
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@_hasMissingDesignatedInitializers public class FUIThemeManager {
  public static let shared: SAPFiori.FUIThemeManager
  public func setPaletteVersion(_ version: SAPFiori.FUIPaletteVersion)
  public func setPalette(_ palette: SAPFiori.FUIPalette)
  public var palette: SAPFiori.FUIPalette {
    get
  }
  public func reset()
  public func setColor(_ color: UIKit.UIColor, for style: SAPFiori.FUIColorStyle)
  public func setColor(_ color: UIKit.UIColor, for style: SAPFiori.FUIColorStyle, variant: SAPFiori.FUIColorVariant = .light)
  @available(*, unavailable, renamed: "setColor(color:for:variant:)")
  public func setColor(_ color: UIKit.UIColor, for style: SAPFiori.FUIColorStyle, background scheme: SAPFiori.FUIBackgroundColorScheme = .lightConstant)
  public func setHexColor(_ hex: Swift.String, for style: SAPFiori.FUIColorStyle)
  public func setHexColor(_ hex: Swift.String, for style: SAPFiori.FUIColorStyle, variant: SAPFiori.FUIColorVariant)
  @available(*, unavailable, renamed: "setHexColor(hex:for:variant:)")
  public func setHexColor(_ hex: Swift.String, for style: SAPFiori.FUIColorStyle, background scheme: SAPFiori.FUIBackgroundColorScheme)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIChartLegendView : SAPFiori.FUIDrawingView, SAPFiori.FUISeriesTitleComponent, UIKit.UIGestureRecognizerDelegate {
  public var seriesColors: [UIKit.UIColor] {
    get
    set
  }
  open var allowSelection: Swift.Bool
  @available(*, deprecated, renamed: "indexForSelectedSeries")
  open var indexForSelectedSeires: Swift.Int? {
    get
  }
  open var indexForSelectedSeries: Swift.Int? {
    get
  }
  open func selectSeries(at index: Swift.Int?)
  open func deselectSeries(at index: Swift.Int)
  public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  override open func refreshAttributedStrings()
  @objc override dynamic open func didMoveToWindow()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
public protocol FUIAttributesConsumer : AnyObject {
  var attributesProvider: SAPFiori.FUIAttributesProvider? { get set }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class FUITextKitView : UIKit.UIView {
  @objc deinit
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc override dynamic public var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func copy(_ sender: Any?)
  @objc override dynamic public func canPerformAction(_ action: ObjectiveC.Selector, withSender sender: Any?) -> Swift.Bool
  @objc override dynamic public func resignFirstResponder() -> Swift.Bool
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIKPIProgressCardView : SAPFiori.FUIKPICardView {
  override public var kpiAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  open var progress: Swift.Float {
    get
    set
  }
  @objc override dynamic open func draw(_ rect: CoreGraphics.CGRect)
  override open func defaultAttributes(for itemType: SAPFiori.FUIKPIViewItemStyle) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
public enum FUIButtonStyle : Swift.Int {
  case none
  case fuiRounded
  case fuiRoundedFilled
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
  public init?(rawValue: Swift.Int)
}
@objc @_inheritsConvenienceInitializers @objcMembers public class NUIRenderer : ObjectiveC.NSObject {
  @objc public static func renderActivityIndicator(activityIndicator: UIKit.UIActivityIndicatorView)
  @objc public static func renderActivityIndicator(activityIndicator: UIKit.UIActivityIndicatorView, withClass className: Swift.String)
  @objc public static func renderBarButtonItem(item: UIKit.UIBarButtonItem)
  @objc public static func renderBarButtonItem(item: UIKit.UIBarButtonItem, withClass className: Swift.String)
  @objc public static func renderButton(button: UIKit.UIButton)
  @objc public static func renderButton(button: UIKit.UIButton, withClass className: Swift.String)
  @objc public static func renderControl(control: UIKit.UIControl)
  @objc public static func renderControl(control: UIKit.UIControl, withClass className: Swift.String)
  @objc public static func renderLabel(label: UIKit.UILabel)
  @objc public static func renderLabel(label: UIKit.UILabel, withClass className: Swift.String)
  @objc public static func renderLabel(label: UIKit.UILabel, withClass className: Swift.String, withSuffix suffix: Swift.String)
  @objc public static func renderImageView(imageView: UIKit.UIImageView, withClass className: Swift.String)
  @objc public static func renderNavigationBar(bar: UIKit.UINavigationBar)
  @objc public static func renderNavigationBar(bar: UIKit.UINavigationBar, withClass className: Swift.String)
  @objc public static func renderProgressView(progressView: UIKit.UIProgressView)
  @objc public static func renderProgressView(progressView: UIKit.UIProgressView, withClass className: Swift.String)
  @objc public static func renderNavigationItem(item: UIKit.UINavigationItem)
  @objc public static func renderNavigationItem(item: UIKit.UINavigationItem, withClass className: Swift.String)
  @objc public static func renderSearchBar(bar: UIKit.UISearchBar)
  @objc public static func renderSearchBar(bar: UIKit.UISearchBar, withClass className: Swift.String)
  @objc public static func renderSegmentedControl(control: UIKit.UISegmentedControl)
  @objc public static func renderSegmentedControl(control: UIKit.UISegmentedControl, withClass className: Swift.String)
  @objc public static func renderSlider(slider: UIKit.UISlider)
  @objc public static func renderSlider(slider: UIKit.UISlider, withClass className: Swift.String)
  @objc public static func renderSwitch(uiSwitch: UIKit.UISwitch)
  @objc public static func renderSwitch(uiSwitch: UIKit.UISwitch, withClass className: Swift.String)
  @objc public static func renderPageControl(pageControl: UIKit.UIPageControl)
  @objc public static func renderPageControl(pageControl: UIKit.UIPageControl, withClass className: Swift.String)
  @objc public static func renderTabBar(bar: UIKit.UITabBar)
  @objc public static func renderTabBar(bar: UIKit.UITabBar, withClass className: Swift.String)
  @objc public static func renderTabBarItem(item: UIKit.UITabBarItem)
  @objc public static func renderTabBarItem(item: UIKit.UITabBarItem, withClass className: Swift.String)
  @objc public static func renderTableView(tableView: UIKit.UITableView)
  @objc public static func renderTableView(tableView: UIKit.UITableView, withClass className: Swift.String)
  @objc public static func renderTableViewCell(cell: UIKit.UITableViewCell)
  @objc public static func renderTableViewCell(cell: UIKit.UITableViewCell, withClass className: Swift.String)
  @objc public static func renderToolbar(bar: UIKit.UIToolbar)
  @objc public static func renderToolbar(bar: UIKit.UIToolbar, withClass className: Swift.String)
  @objc public static func renderTextField(textField: UIKit.UITextField)
  @objc public static func renderTextField(textField: UIKit.UITextField, withClass className: Swift.String)
  @objc public static func renderTextView(textView: UIKit.UITextView)
  @objc public static func renderTextView(textView: UIKit.UITextView, withClass className: Swift.String)
  @objc public static func renderProgressView(kpiProgressView: SAPFiori.FUIKPIProgressView)
  @objc public static func renderProgressView(kpiProgressView: SAPFiori.FUIKPIProgressView, withClass className: Swift.String)
  @objc public static func renderView(view: UIKit.UIView)
  @objc public static func renderView(view: UIKit.UIView, withClass className: Swift.String)
  @objc public static func renderView(view: UIKit.UIView, withClass className: Swift.String, withSuffix suffix: Swift.String)
  @objc public static func renderWindow(window: UIKit.UIWindow)
  @objc public static func renderWindow(window: UIKit.UIWindow, withClass className: Swift.String)
  @objc public static func needsTextTransformWithClass(className: Swift.String) -> Swift.Bool
  @objc public static func transformText(text: Swift.String, withClass className: Swift.String) -> Swift.String
  @objc public static func sizeDidChangeForNavigationBar(bar: UIKit.UINavigationBar)
  @objc public static func sizeDidChangeForTabBar(bar: UIKit.UITabBar)
  @objc public static func sizeDidChangeForTableViewCell(cell: UIKit.UITableViewCell)
  @objc public static func sizeDidChangeForTableView(tableView: UIKit.UITableView)
  @objc public static func addOrientationDidChangeObserver(observer: Swift.AnyObject)
  @objc deinit
  @objc public static func removeOrientationDidChangeObserver(observer: Swift.AnyObject)
  @objc public static func rerender()
  @objc public static func rerenderView(view: UIKit.UIView)
  @objc public static func setRerenderOnOrientationChange(rerender: Swift.Bool)
  @objc public static func getInstance() -> SAPFiori.NUIRenderer
  @objc public static func orientationDidChange(notification: Foundation.NSNotification)
  @objc public static func stylesheetFileChanged()
  @objc override dynamic public init()
}
open class FUIMultiPageUserConsentForm : SAPFiori.FUIUserConsentForm {
  public var pages: [SAPFiori.FUIUserConsentPage]
  public var isRequired: Swift.Bool
  public var isUserAccepted: Swift.Bool {
    get
  }
  public init(pages: [SAPFiori.FUIUserConsentPage], isRequired: Swift.Bool = true)
  @objc deinit
}
public struct FUIMapLegendItem {
  public var title: Swift.String
  public init(title: Swift.String)
  public var backgroundColor: UIKit.UIColor
  public var tintColor: UIKit.UIColor! {
    get
    set
  }
  public var icon: SAPFiori.FUIMapLegendIcon?
  public var line: SAPFiori.FUIMapLegendLine?
  public var fillItem: SAPFiori.FUIMapLegendFillItem?
}
@objc @_inheritsConvenienceInitializers open class FUIChartPlotView : SAPFiori.FUIDrawingView, SAPFiori.FUIAxisTitleComponent {
  final public let chartView: SAPFiori.FUIChartView
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public var valuesAxisTitle: SAPFiori.FUIText {
    get
  }
  public var categoryAxisTitle: SAPFiori.FUIText {
    get
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIRoundedButton : SAPFiori.FUIButton {
  override public var style: SAPFiori.FUIButtonStyle {
    get
    set
  }
  convenience public init(style: SAPFiori.FUIButtonStyle)
  @objc required dynamic public init()
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
public typealias FUIMKRoute = SAPFiori.FUIRoute<MapKit.MKPolyline, MapKit.MKPointAnnotation>
open class FUIRoute<LineGeometry, PointGeometry> where LineGeometry : SAPFiori.FUIPolyline, PointGeometry : SAPFiori.FUIPoint {
  open var routeName: Swift.String?
  open var segments: [LineGeometry]
  open var vertexes: [PointGeometry]
  public init(segments: [LineGeometry], vertexes: [PointGeometry], routeName: Swift.String?)
  @objc deinit
}
extension FUIRoute : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
  public static func == (lhs: SAPFiori.FUIRoute<LineGeometry, PointGeometry>, rhs: SAPFiori.FUIRoute<LineGeometry, PointGeometry>) -> Swift.Bool
  open func hash(into hasher: inout Swift.Hasher)
}
@objc @_inheritsConvenienceInitializers open class FUIInlineValidationTableViewCell : SAPFiori.NibDesignableFUIBaseTableViewCell, SAPFiori.FUIInlineValidation {
  open var validationView: SAPFiori.FUIInlineValidationView!
  open var validationMessage: Swift.String? {
    get
    set
  }
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @IBInspectable @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc deinit
}
public struct FUIPaletteHexColor {
  public let string: Swift.String
  public let alpha: CoreGraphics.CGFloat
  public init(string: Swift.String, alpha: CoreGraphics.CGFloat? = 1.0)
  public func color() -> UIKit.UIColor
}
@_inheritsConvenienceInitializers public class FUIKeyValueFlowLayout : SAPFiori.FUIStandardAutoSizingColumnFlowLayout {
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@_inheritsConvenienceInitializers open class FUIRatingControlContentView : SAPFiori.FUIFormCellContentView<SAPFiori.FUIRatingControl, SAPFiori.FUIControlState>, SAPFiori.FUIPropertyFormCell, SAPFiori.FUISubtitleComponent {
  final public let subtitle: SAPFiori.FUIText
  public typealias Text = SAPFiori.FUIText
  open var keyName: Swift.String? {
    get
    set
  }
  public typealias ValueType = Swift.Int
  public var validationMessage: Swift.String?
  public var validationView: SAPFiori.FUIInlineValidationView!
  open var isEditable: Swift.Bool {
    get
    set
  }
  open var onChangeHandler: ((Swift.Int) -> Swift.Void)?
  public var value: Swift.Int {
    get
    set
  }
  public var ratingControl: SAPFiori.FUIRatingControl {
    get
  }
  override open func refreshAttributedStrings()
  override open func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  override open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
extension JTAppleCalendarView : UIKit.UICollectionViewDelegate, UIKit.UICollectionViewDataSource {
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, viewForSupplementaryElementOfKind kind: Swift.String, at indexPath: Foundation.IndexPath) -> UIKit.UICollectionReusableView
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, willDisplay cell: UIKit.UICollectionViewCell, forItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc dynamic public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, shouldSelectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc dynamic public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
  public func sizeOfDecorationView(indexPath: Foundation.IndexPath) -> CoreGraphics.CGRect
}
@_inheritsConvenienceInitializers open class FUIGridRowSummaryItem : SAPFiori.FUIGridRowTextItem {
  override public var type: SAPFiori.FUIGridRowItemType {
    get
  }
  @objc deinit
  override public init(text: Swift.String)
  override public init(number: Foundation.NSNumber, formatter: Foundation.NumberFormatter? = super)
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUIDatePickerFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell {
  public typealias ValueType = Foundation.Date
  open var value: Foundation.Date {
    get
    set
  }
  @objc override dynamic open func prepareForInterfaceBuilder()
  public var onChangeHandler: ((Foundation.Date) -> Swift.Void)?
  open class var reuseIdentifier: Swift.String {
    get
  }
  @objc @IBOutlet weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @available(*, unavailable, message: "use valueLabel")
  weak public var valueTextField: UIKit.UITextField! {
    get
  }
  @objc @IBOutlet weak open var valueLabel: UIKit.UILabel! {
    get
  }
  open var isEditable: Swift.Bool {
    get
    set
  }
  override open var isEnabled: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable open var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, unavailable, message: "Placeholder is no more supported to KeyLabel")
  public var placeholderText: Swift.String?
  @available(*, unavailable, message: "Placeholder is no more supported to KeyLabel")
  public var placeholderTextColor: UIKit.UIColor
  open var dateFormatter: Foundation.DateFormatter? {
    get
    set
  }
  open var isTrackingLiveChanges: Swift.Bool
  open var datePickerMode: UIKit.UIDatePicker.Mode {
    get
    set
  }
  @objc public var datePicker: UIKit.UIDatePicker {
    @objc get
  }
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @objc override dynamic open var isAccessibilityElement: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
public enum FUIPasscodeControllerError : Swift.Error {
  @available(*, deprecated, renamed: "failedToMatch")
  case invalidPasscode(code: Swift.String, triesRemaining: Swift.Int)
  case failedToMatch(message: Swift.String, triesRemaining: Swift.Int)
  case failedToMeetPolicy(message: Swift.String)
}
public enum FUIPasscodeInputMode : Swift.Int {
  case create
  case match
  case matchForChange
  case change
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public enum FUIPasscodeSource : Swift.Int {
  case unknown
  case user
  case device
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public protocol FUIPasscodeControllerDelegate : AnyObject {
  func shouldTryPasscode(_ passcode: Swift.String, forInputMode inputMode: SAPFiori.FUIPasscodeInputMode, fromController passcodeController: SAPFiori.FUIPasscodeController) throws
  func didCancelPasscodeEntry(fromController passcodeController: SAPFiori.FUIPasscodeController)
  func shouldResetPasscode(fromController passcodeController: SAPFiori.FUIPasscodeController)
  func didSetBiometricIDOption(to enabled: Swift.Bool, fromController passcodeController: SAPFiori.FUIPasscodeController)
  func passcodePolicy() -> SAPFiori.FUIPasscodePolicy
}
public protocol FUIPrivateEncryptionKeyGenerator : AnyObject {
  func generatePrivateEncryptionKey() -> Foundation.Data
}
extension FUIPasscodeControllerDelegate {
  public func passcodePolicy() -> SAPFiori.FUIPasscodePolicy
  public func didSetBiometricIDOption(to enabled: Swift.Bool, fromController passcodeController: SAPFiori.FUIPasscodeController)
}
@objc @_inheritsConvenienceInitializers open class FUIPasscodeController : UIKit.UIViewController, SAPFiori.FUIPrivateEncryptionKeyGenerator {
  weak public var delegate: SAPFiori.FUIPasscodeControllerDelegate!
  weak public var privateEncryptionKeyGenerator: SAPFiori.FUIPrivateEncryptionKeyGenerator!
  public var userIdentifier: Swift.String?
  public var keychainAccessGroup: Swift.String?
  public var passcodeSource: SAPFiori.FUIPasscodeSource
  @available(*, unavailable, message: "use choosePasscodeTitleString, confirmPasscodeTitleString, or changePasscodeTitleString")
  public static var setPasscodeTitleString: Swift.String?
  public static var choosePasscodeTitleString: Swift.String?
  public static var confirmPasscodeTitleString: Swift.String?
  public static var changePasscodeTitleString: Swift.String?
  public static var passcodeTitleString: Swift.String?
  public static var enterPasscodeAgainString: Swift.String?
  public static var confirmPasscodeString: Swift.String?
  public static var enterYourPasscodeMessageString: Swift.String?
  public static var enterYourCurrentPasscodeMessageString: Swift.String?
  public static var notNowButtonString: Swift.String?
  @available(*, deprecated, message: "This property is kept for backwards-compatibility, but has no effect on the view. The iOS default localized 'Back' string is used.")
  public static var backItemString: Swift.String?
  public static var nextItemString: Swift.String?
  public static var setPasscodeMessageFormat: Swift.String?
  public static var setPasscodeWithDigitsMessageFormat: Swift.String?
  public static var includeRequiredGroupMessage: Swift.String?
  public static var lowerCaseLabelString: Swift.String?
  public static var upperCaseLabelString: Swift.String?
  public static var digitsLabelString: Swift.String?
  public static var nonAlphabeticLabelString: Swift.String?
  public static var resetPasscodeButtonString: Swift.String?
  public static var passcodeValidationFailedMessageString: Swift.String?
  public static var passcodeRejectedMessageString: Swift.String?
  public static var useTouchIDMessageString: Swift.String?
  public static var useFaceIDMessageString: Swift.String?
  public static var retryButtonString: Swift.String?
  public static var touchIDTitleString: Swift.String?
  public static var faceIDTitleString: Swift.String?
  public static var isNowAvailableString: Swift.String?
  public static var touchIDMessage1String: Swift.String?
  public static var faceIDMessage1String: Swift.String?
  public static var touchIDEnableMessage1String: Swift.String?
  public static var faceIDEnableMessage1String: Swift.String?
  public static var touchIDMessage2String: Swift.String?
  public static var faceIDMessage2String: Swift.String?
  public static var touchIDEnableMessage2String: Swift.String?
  public static var faceIDEnableMessage2String: Swift.String?
  public static var learnMoreTouchIDLinkString: Swift.String?
  public static var learnMoreFaceIDLinkString: Swift.String?
  public static var enableButtonString: Swift.String?
  public static var authenticateWithTouchIDMessageString: Swift.String?
  public static var authenticateWithFaceIDMessageString: Swift.String?
  public static var passcodeNotMatchMessageString: Swift.String?
  public static var attemptsLeftMessageFormat: Swift.String?
  public static var oneAttempLeftMessageFormat: Swift.String?
  public static var maxAttemptsReachedMessageString: Swift.String?
  public static var enterCredentialsMessageString: Swift.String?
  public static var okButtonString: Swift.String?
  public static var retryPasscodeMessageString: Swift.String?
  public static var notNowActionString: Swift.String?
  public static var settingsActionString: Swift.String?
  public static var touchIDFallbackButtonTitle: Swift.String?
  public static var biometricIDCancelButtonTitle: Swift.String?
  public static var allowButtonsToUseIntrinsicContentSize: Swift.Bool
  @objc override dynamic open func viewDidLoad()
  @available(*, deprecated, message: "use isBiometricIDEnabled instead")
  public class func isTouchIDEnabled(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil) -> Swift.Bool
  public class func isBiometricIDEnabled(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil) -> Swift.Bool
  @available(*, unavailable, message: "use func enableBiometricID(userIdentifier: String?)")
  public class func enableTouchID(forPasscode passcode: Swift.String)
  public class func isPasscodeHashUsed(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil) -> Swift.Bool
  public class func enableBiometricID(_ passcode: Swift.String, userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil)
  @available(*, unavailable, message: "use func enableBiometricID(_ passcode: String, userIdentifier: String? = nil, accessGroup: String? = nil)")
  public class func enableBiometricID(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil) -> Swift.String
  @available(*, deprecated, message: "use clearBiometricIDSettings instead")
  public class func clearTouchIDSettings(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil)
  public class func clearBiometricIDSettings(userIdentifier: Swift.String? = nil, accessGroup: Swift.String? = nil)
  public class func clearPasscodeSettings(userIdentifier: Swift.String?, accessGroup: Swift.String? = nil)
  public func generatePrivateEncryptionKey() -> Foundation.Data
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public func isBiometricIDAvailable() -> Swift.Bool
@objc @_inheritsConvenienceInitializers public class FUIChartFloorplanView : SAPFiori.FUIDrawingView, SAPFiori.FUITitleComponent, SAPFiori.FUISubtitleComponent, SAPFiori.FUIStatusComponent, SAPFiori.FUIAxisTitleComponent, SAPFiori.FUISeriesTitleComponent {
  public var title: SAPFiori.FUIText {
    get
  }
  public var titleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var subtitle: SAPFiori.FUIText {
    get
  }
  public var subtitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var status: SAPFiori.FUIText {
    get
  }
  public var statusStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var valuesAxisTitle: SAPFiori.FUIText {
    get
  }
  public var valuesAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var categoryAxisTitle: SAPFiori.FUIText {
    get
  }
  public var categoryAxisTitleStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  public var allowLegendViewSeriesSelection: Swift.Bool {
    get
    set
  }
  public var seriesTitles: [SAPFiori.FUIText] {
    get
    set
  }
  public var seriesTitlesAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var seriesTitlesStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
  override public var styleClassForPropertyRef: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : SAPFiori.FUIStyleType]] {
    get
    set
  }
  @available(*, deprecated, message: "Will be unavailble in newer SDK version.")
  override open var backgroundColorScheme: SAPFiori.FUIBackgroundColorScheme {
    get
    set
  }
  override public var cachedAttributes: [SAPFiori.FUIPropertyRef : [SAPFiori.FUIStyleClassSource : [SAPFiori.NSAttributedStringKey : Any]]] {
    get
    set
  }
  public var summaryView: SAPFiori.FUIChartSummaryView {
    get
  }
  public var chartView: SAPFiori.FUIChartView {
    get
  }
  override public func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override public func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIText
}
@available(*, unavailable, message: "Use FUITimelineCell.NodeType or FUITimelineMarkerCell.NodeType instead.")
public struct FUITimelineNode {
}
public protocol FUIKPIAttributesConsumer : AnyObject {
  var kpiAttributesProvider: SAPFiori.FUIKPIAttributesProvider? { get set }
}
@_inheritsConvenienceInitializers open class FUIStandardAutoSizingColumnFlowLayout : SAPFiori.FUIBaseCollectionViewLayout<SAPFiori.FUIStandardAutoSizingColumnSectionLayoutManager> {
  @available(*, unavailable, renamed: "interitemSpacing")
  open var minimumInteritemSpacing: CoreGraphics.CGFloat
  @available(*, unavailable, renamed: "lineSpacing")
  open var minimumLineSpacing: CoreGraphics.CGFloat
  @objc override dynamic open func prepare()
  @objc override dynamic open func shouldInvalidateLayout(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> Swift.Bool
  @objc override dynamic open func invalidationContext(forPreferredLayoutAttributes preferredAttributes: UIKit.UICollectionViewLayoutAttributes, withOriginalAttributes originalAttributes: UIKit.UICollectionViewLayoutAttributes) -> UIKit.UICollectionViewLayoutInvalidationContext
  open var numberOfColumns: Swift.Int {
    get
    set
  }
  public var isSingleColumnInCompact: Swift.Bool {
    get
    set
  }
  @objc override dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class FUIStandardAutoSizingColumnSectionLayoutManager : SAPFiori.FUISectionLayoutManager {
  open var numberOfColumns: Swift.Int
  override open func prepare()
  @objc deinit
  @objc required dynamic public init()
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIEmptyValueComponent {
  public var emptyText: SAPFiori.FUIText {
    get
    set
  }
  public var emptyTextStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
public typealias FUIHierarchyItemComponent = SAPFiori.FUIDetailImageViewComponent & SAPFiori.FUIFootnoteMultiLineComponent & SAPFiori.FUIIconsComponent & SAPFiori.FUIStatusImageComponent & SAPFiori.FUISubtitleMultiLineComponent & SAPFiori.FUITitleMultiLineComponent
public protocol Initializable : AnyObject {
  init()
}
extension FUITextView : SAPFiori.Initializable {
}
@_inheritsConvenienceInitializers open class FUIFormCellContentView<ValueView, T> : SAPFiori.FUITintableDrawingView<T>, SAPFiori.FUITitleComponent where ValueView : UIKit.UIView, ValueView : SAPFiori.Initializable, T : SAPFiori.Defaultable, T : SAPFiori.Enableable, T : Swift.Hashable {
  final public let title: SAPFiori.FUIText
  override open func refreshAttributedStrings()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIText
  @objc deinit
}
public protocol FUIModalCheckoutViewControllerDelegate : AnyObject {
  func cancelTapped(onController controller: SAPFiori.FUIModalCheckoutViewController)
}
@objc @_inheritsConvenienceInitializers open class FUIModalCheckoutViewController : UIKit.UIViewController {
  @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  weak public var delegate: SAPFiori.FUIModalCheckoutViewControllerDelegate?
  @objc @IBOutlet public var navigationBar: UIKit.UINavigationBar! {
    get
  }
  @objc @IBOutlet public var navigationBarTitleItem: UIKit.UINavigationItem! {
    get
  }
  @objc @IBOutlet public var leftBarButtonItem: UIKit.UIBarButtonItem! {
    get
  }
  @objc @IBOutlet public var textLabel: UIKit.UILabel! {
    get
  }
  public var text: Swift.String? {
    get
    set
  }
  public var displayState: SAPFiori.FUICheckoutIndicatorView.DisplayState {
    get
  }
  public class func instantiateViewController() -> SAPFiori.FUIModalCheckoutViewController
  public func changeDisplayState(to newState: SAPFiori.FUICheckoutIndicatorView.DisplayState, completion: (() -> Swift.Void)? = nil)
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
extension String : SAPFiori.FUIGlyphImage {
  public var glyphText: Swift.String? {
    get
  }
  public var attributedText: Foundation.NSAttributedString! {
    get
  }
  public var attributes: [SAPFiori.NSAttributedStringKey : Any] {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class FUIUserConsentViewController : UIKit.UIViewController, SAPFiori.FUIUserConsentPageViewControllerDelegate {
  public var forms: [SAPFiori.FUIUserConsentForm]
  weak public var delegate: SAPFiori.FUIUserConsentViewControllerDelegate?
  public var alertMessage: Swift.String?
  public var alertQuitTitle: Swift.String?
  public var alertGiveConsentTitle: Swift.String?
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
  @objc required dynamic public init()
  @objc override dynamic open func viewDidLoad()
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func didReceiveMemoryWarning()
  public func didAllow(_ controller: SAPFiori.FUIUserConsentPageViewController)
  public func didDeny(_ controller: SAPFiori.FUIUserConsentPageViewController)
  @objc deinit
}
public protocol FUIUserConsentPageViewControllerDelegate : AnyObject {
  func didAllow(_ controller: SAPFiori.FUIUserConsentPageViewController)
  func didDeny(_ controller: SAPFiori.FUIUserConsentPageViewController)
}
public protocol FUIUserConsentViewControllerDelegate : AnyObject {
  func userConsentViewController(viewController: SAPFiori.FUIUserConsentViewController, didReceiveResponseToConsentForms forms: [SAPFiori.FUIUserConsentForm])
  func userConsentViewController(viewController: SAPFiori.FUIUserConsentViewController, didCancelConsentForms forms: [SAPFiori.FUIUserConsentForm])
}
extension FUITextKitView {
  @objc override dynamic public func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
}
@_inheritsConvenienceInitializers public class FUIFormEntryView<FormValueView> : SAPFiori.FUIBaseDrawingView, SAPFiori.FUITitleComponent, SAPFiori.FUIStatusComponent, SAPFiori.FUIAttributesProvider where FormValueView : UIKit.UIView {
  final public let title: SAPFiori.FUIText
  final public let status: SAPFiori.FUIText
  override public func refreshAttributedStrings()
  override public func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  override open func defaultAttributes(for property: SAPFiori.FUIPropertyRef) -> [SAPFiori.NSAttributedStringKey : Any]
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
  public typealias Text = SAPFiori.FUIText
}
extension CGSize : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
extension CLLocationCoordinate2D : Swift.Equatable, Swift.Hashable {
  public static func == (lhs: CoreLocation.CLLocationCoordinate2D, rhs: CoreLocation.CLLocationCoordinate2D) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
@_inheritsConvenienceInitializers public class FUIMapSnapshotContentView : SAPFiori.FUIFormEntryView<SAPFiori.FUITextKitView> {
  override public func calculateLayout(_ targetSize: CoreGraphics.CGSize)
  @objc override dynamic public func layoutSubviews()
  @objc override dynamic public func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  override public func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
@_inheritsConvenienceInitializers public class FUIMapSnapshotFormCell : SAPFiori.FUIBaseDrawingTableViewCell<SAPFiori.FUIMapSnapshotContentView> {
  public var snapshotImage: UIKit.UIImage? {
    get
    set
  }
  public var geometry: MapKit.MKShape? {
    get
    set
  }
  public var coordinates: [CoreLocation.CLLocationCoordinate2D]? {
    get
  }
  @objc override dynamic open var accessoryType: SAPFiori.UITableViewCellAccessoryType {
    @objc get
    @objc set
  }
  @objc override dynamic open func layoutSubviews()
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers public class FUISearchBar : UIKit.UISearchBar {
  public var isBarcodeScannerEnabled: Swift.Bool {
    get
    set
  }
  public var barcodeScanner: SAPFiori.FUIBarcodeScanner?
  @objc override weak dynamic public var delegate: UIKit.UISearchBarDelegate? {
    @objc get
    @objc set
  }
  public var placeholderText: Swift.String? {
    get
    set
  }
  public var placeholderTextFont: UIKit.UIFont
  public var placeholderTextColor: UIKit.UIColor
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public func willMove(toSuperview newSuperview: UIKit.UIView?)
  @objc override dynamic public func willMove(toWindow newWindow: UIKit.UIWindow?)
  @objc override dynamic public func didMoveToSuperview()
  @objc override dynamic public func layoutSubviews()
  @objc deinit
}
@_inheritsConvenienceInitializers public class FUICalendarItemCollectionViewCell : SAPFiori.FUIBaseDrawingCalendarItemCollectionViewCell<SAPFiori.FUICalendarItemView> {
  open var isEventIndicatorVisible: Swift.Bool {
    get
    set
  }
  @objc override dynamic open func prepareForReuse()
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUICalendarItemView {
  public var eventView: UIKit.UIView {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class FUIItemCollectionViewTableViewCell : SAPFiori.FUIBaseCollectionViewTableViewCell {
  public var isAllowingFlowLayout: Swift.Bool {
    get
    set
  }
  open var isLayoutJustified: Swift.Bool {
    get
    set
  }
  open var numberOfRows: Swift.Int {
    get
    set
  }
  @objc deinit
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func layoutMarginsDidChange()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
}
extension InnerViewContainer where Self.InnerView : SAPFiori.FUIStatusComponent {
  public var status: SAPFiori.FUIText {
    get
  }
  public var statusAttributedText: Foundation.NSAttributedString! {
    get
    set
  }
  public var statusStyleClassPath: [SAPFiori.FioriStyle] {
    get
    set
  }
}
@objc open class FUISearchTagView : UIKit.UIView {
  open var displayText: Swift.String {
    get
    set
  }
  open var displayDelimiter: Swift.String {
    get
    set
  }
  open var font: UIKit.UIFont? {
    get
    set
  }
  open var cornerRadius: CoreGraphics.CGFloat {
    get
    set
  }
  open var borderWidth: CoreGraphics.CGFloat {
    get
    set
  }
  open var borderColor: UIKit.UIColor? {
    get
    set
  }
  @objc override dynamic open var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  open var selectedColor: UIKit.UIColor? {
    get
    set
  }
  open var normalBackgroundColor: UIKit.UIColor? {
    get
    set
  }
  open var textColor: UIKit.UIColor? {
    get
    set
  }
  open var selectedTextColor: UIKit.UIColor? {
    get
    set
  }
  open var bounceOnSelection: Swift.Bool
  open var selected: Swift.Bool {
    get
    set
  }
  public init(tag: SAPFiori.FUISearchTag)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic open func sizeThatFits(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  open func sizeToFit(_ size: CoreGraphics.CGSize) -> CoreGraphics.CGSize
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open var canBecomeFirstResponder: Swift.Bool {
    @objc get
  }
  @objc override dynamic open func becomeFirstResponder() -> Swift.Bool
  @objc override dynamic open func resignFirstResponder() -> Swift.Bool
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc deinit
}
extension FUISearchTagView : UIKit.UIKeyInput {
  @objc dynamic public var hasText: Swift.Bool {
    @objc get
  }
  @objc dynamic public func insertText(_ text: Swift.String)
  @objc dynamic public func deleteBackward()
}
extension FUISearchTagView : UIKit.UITextInputTraits {
  @objc dynamic public var autocorrectionType: UIKit.UITextAutocorrectionType {
    @objc get
    @objc set
  }
}
@objc @_inheritsConvenienceInitializers open class FUIFilterFormCell : SAPFiori.FUIInlineValidationTableViewCell, UIKit.UICollectionViewDataSource, UIKit.UICollectionViewDelegateFlowLayout {
  open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = [Swift.Int]
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  public var value: [Swift.Int] {
    get
    set
  }
  public var onChangeHandler: (([Swift.Int]) -> Swift.Void)?
  @objc public var valueOptions: [Swift.String] {
    @objc get
    @objc set
  }
  public var filterGroup: SAPFiori.FUIFilterGroup? {
    get
    set
  }
  public var keyName: Swift.String? {
    get
    set
  }
  public var allowsMultipleSelection: Swift.Bool {
    get
    set
  }
  @available(*, unavailable, message: "read property `value` for selected indexes")
  public var selectedIndexes: [Swift.Int]
  public var allowsEmptySelection: Swift.Bool {
    get
    set
  }
  @objc @IBInspectable @IBOutlet weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var collectionView: UIKit.UICollectionView! {
    get
  }
  override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @objc public func numberOfSections(in collectionView: UIKit.UICollectionView) -> Swift.Int
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, numberOfItemsInSection section: Swift.Int) -> Swift.Int
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, cellForItemAt indexPath: Foundation.IndexPath) -> UIKit.UICollectionViewCell
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, layout collectionViewLayout: UIKit.UICollectionViewLayout, sizeForItemAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGSize
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didSelectItemAt indexPath: Foundation.IndexPath)
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, didDeselectItemAt indexPath: Foundation.IndexPath)
  @objc public func collectionView(_ collectionView: UIKit.UICollectionView, shouldDeselectItemAt indexPath: Foundation.IndexPath) -> Swift.Bool
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func setHighlighted(_ highlighted: Swift.Bool, animated: Swift.Bool)
  @objc override dynamic open func setSelected(_ selected: Swift.Bool, animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class FUIValuePickerFormCell : SAPFiori.FUIInlineValidationTableViewCell, SAPFiori.FUIPropertyFormCell, UIKit.UIPickerViewDataSource, UIKit.UIPickerViewDelegate {
  @objc @IBOutlet weak public var keyLabel: UIKit.UILabel! {
    get
  }
  @objc @IBOutlet weak public var valueTextField: UIKit.UITextField! {
    get
  }
  public var valueOptions: [Swift.String] {
    get
    set
  }
  open class var reuseIdentifier: Swift.String {
    get
  }
  public typealias ValueType = Swift.Int
  public var value: Swift.Int {
    get
    set
  }
  public var onChangeHandler: ((Swift.Int) -> Swift.Void)?
  public var isEditable: Swift.Bool {
    get
    set
  }
  override public var isEnabled: Swift.Bool {
    get
    set
  }
  public var isTrackingLiveChanges: Swift.Bool
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBInspectable public var keyName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var ibDisplayValue: Swift.String? {
    @objc get
    @objc set
  }
  @objc public func numberOfComponents(in pickerView: UIKit.UIPickerView) -> Swift.Int
  @objc public func pickerView(_ pickerView: UIKit.UIPickerView, numberOfRowsInComponent component: Swift.Int) -> Swift.Int
  @objc public func pickerView(_ pickerView: UIKit.UIPickerView, titleForRow row: Swift.Int, forComponent component: Swift.Int) -> Swift.String?
  @objc public func pickerView(_ pickerView: UIKit.UIPickerView, didSelectRow row: Swift.Int, inComponent component: Swift.Int)
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc override dynamic open func prepareForReuse()
  override open func applyTintColor(forState state: SAPFiori.UIControlState)
  @objc override dynamic open var accessibilityElements: [Any]? {
    @objc get
    @objc set
  }
  @objc override dynamic open func accessibilityElementCount() -> Swift.Int
  @objc override dynamic open func accessibilityElement(at index: Swift.Int) -> Any?
  @objc override dynamic open func index(ofAccessibilityElement element: Any) -> Swift.Int
  @objc deinit
  @objc override dynamic public init(style: SAPFiori.UITableViewCellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
}
@objc @_inheritsConvenienceInitializers @available(*, unavailable, message: "Use FUIObjectCollectionViewCell instead.")
open class FUIObjectCollectionViewCell2 : SAPFiori.NibDesignableFUIBaseCollectionViewCell {
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  public var iconsStackView: UIKit.UIStackView {
    get
  }
  public var detailImageView: SAPFiori.FUIImageView {
    get
  }
  public var headlineLabel: SAPFiori.FUILabel {
    get
  }
  public var subheadlineLabel: SAPFiori.FUILabel {
    get
  }
  public var footnoteLabel: SAPFiori.FUILabel {
    get
  }
  public var statusLabel: SAPFiori.FUILabel {
    get
  }
  public var statusImageView: SAPFiori.FUIImageView {
    get
  }
  public var substatusLabel: SAPFiori.FUILabel {
    get
  }
  public var substatusImageView: SAPFiori.FUIImageView {
    get
  }
  @objc @IBInspectable public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var footnoteText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var iconImages: Swift.Array<UIKit.UIImage> {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var preserveIconStackSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var preserveDetailImageSpacing: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var substatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var substatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  public var splitPercent: CoreGraphics.CGFloat {
    get
    set
  }
  open var actionAccessoryView: SAPFiori.FUISingleActionAccessoryView? {
    get
  }
  open var actionAccessoryType: SAPFiori.FUITableViewCellActionAccessoryType {
    get
    set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open func prepareForReuse()
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func systemLayoutSizeFitting(_ targetSize: CoreGraphics.CGSize, withHorizontalFittingPriority horizontalFittingPriority: UIKit.UILayoutPriority, verticalFittingPriority: UIKit.UILayoutPriority) -> CoreGraphics.CGSize
  @objc deinit
}
@_inheritsConvenienceInitializers @IBDesignable open class FUIObjectHeader : SAPFiori.FUIBaseHeaderView<SAPFiori.FUIObjectHeaderView> {
  @objc override dynamic open var directionalLayoutMargins: UIKit.NSDirectionalEdgeInsets {
    @objc get
    @objc set
  }
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc @IBInspectable public var detailImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var headlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var subheadlineText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var bodyText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var footnoteText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var statusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var substatusText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var substatusImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var descriptionText: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var ibDisplayTagsText: Swift.String? {
    @objc get
    @objc set
  }
  @available(*, deprecated, message: "The component design has been updated, to allocate content frames based upon the content intrinsic sizes.  The value `splitPercent` will be ignored at runtime.")
  public var splitPercent: CoreGraphics.CGFloat {
    get
    set
  }
  @available(*, deprecated, message: "The component design has been updated, to allocate content frames based upon the content intrinsic sizes.  The value `isApplyingSplitPercent` will be ignored at runtime.")
  public var isApplyingSplitPercent: Swift.Bool {
    get
    set
  }
  @objc deinit
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init()
}
@objc @_hasMissingDesignatedInitializers public class FUIPasscodeChangeController : UIKit.UINavigationController {
  weak public var passcodeControllerDelegate: SAPFiori.FUIPasscodeControllerDelegate?
  weak public var validationDelegate: SAPFiori.FUIPasscodeValidationDelegate?
  public var customBackgroundImage: UIKit.UIImage?
  public var canEnableTouchID: Swift.Bool
  public var hashUserPasscode: Swift.Bool
  public var userIdentifier: Swift.String?
  public var keychainAccessGroup: Swift.String?
  @available(*, unavailable, renamed: "showsCancelBarItem")
  public var isToShowCancelBarItem: Swift.Bool
  public var showsCancelBarItem: Swift.Bool
  public var isRequiringAlphaNumericInput: Swift.Bool
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  public class func createInstanceFromStoryboard() -> SAPFiori.FUIPasscodeChangeController
  @objc override dynamic public func awakeFromNib()
  @objc override dynamic public func viewDidLoad()
  @objc override dynamic public func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic public func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @available(iOS 5.0, *)
  @objc override dynamic public init(navigationBarClass: Swift.AnyClass?, toolbarClass: Swift.AnyClass?)
  @objc override dynamic public init(rootViewController: UIKit.UIViewController)
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc @_inheritsConvenienceInitializers open class FUIProcessingIndicatorView : SAPFiori.NibDesignable {
  @objc @IBOutlet weak public var textLabel: UIKit.UILabel!
  @objc @IBInspectable public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable public var isTextLabelHidden: Swift.Bool {
    @objc get
    @objc set
  }
  public var isAnimating: Swift.Bool {
    get
  }
  @objc override dynamic open var intrinsicContentSize: CoreGraphics.CGSize {
    @objc get
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc required dynamic public init()
  @objc override dynamic open var nibLoadingClass: Swift.AnyClass {
    @objc get
  }
  open func show(animated: Swift.Bool = true)
  open func dismiss(animated: Swift.Bool = true)
  open func startAnimating(easeIn: Swift.Bool = true)
  open func stopAnimating(easeOut: Swift.Bool = true)
  @objc override dynamic open func traitCollectionDidChange(_ previousTraitCollection: UIKit.UITraitCollection?)
  @objc override dynamic open func prepareForInterfaceBuilder()
  @objc deinit
}
extension SAPFiori.FUITimelineMarkerCell.NodeType : Swift.Equatable {}
extension SAPFiori.FUITimelineMarkerCell.NodeType : Swift.Hashable {}
extension SAPFiori.FUITimelineMarkerCell.NodeType : Swift.RawRepresentable {}
extension SAPFiori.FUIBarcodeScanMode : Swift.Equatable {}
extension SAPFiori.FUIBarcodeScanMode : Swift.Hashable {}
extension SAPFiori.FUIBarcodeScanMode : Swift.RawRepresentable {}
extension SAPFiori.FUIControlState : Swift.Equatable {}
extension SAPFiori.FUIControlState : Swift.Hashable {}
extension SAPFiori.FUIControlState : Swift.RawRepresentable {}
extension SAPFiori.FUIPropertyRef : Swift.Equatable {}
extension SAPFiori.FUIPropertyRef : Swift.Hashable {}
extension SAPFiori.FUIPropertyRef : Swift.RawRepresentable {}
extension SAPFiori.FUIBackgroundColorScheme : Swift.Equatable {}
extension SAPFiori.FUIBackgroundColorScheme : Swift.Hashable {}
extension SAPFiori.FUIBackgroundColorScheme : Swift.RawRepresentable {}
extension SAPFiori.FUIMapFloorplan.State : Swift.Equatable {}
extension SAPFiori.FUIMapFloorplan.State : Swift.Hashable {}
extension SAPFiori.FUIStyleClassSource : Swift.Equatable {}
extension SAPFiori.FUIStyleClassSource : Swift.Hashable {}
extension SAPFiori.FUIStyleClassSource : Swift.RawRepresentable {}
extension SAPFiori.FUICheckoutIndicatorView.DisplayState : Swift.Hashable {}
extension SAPFiori.FUIChartType : Swift.Equatable {}
extension SAPFiori.FUIChartType : Swift.Hashable {}
extension SAPFiori.FUIChartSelectionMode : Swift.Equatable {}
extension SAPFiori.FUIChartSelectionMode : Swift.Hashable {}
extension SAPFiori.ChartDefaultCategorySelectionMode : Swift.Equatable {}
extension SAPFiori.ChartDefaultCategorySelectionMode : Swift.Hashable {}
extension SAPFiori.FUIProgressIndicatorControl.DisplayState : Swift.Equatable {}
extension SAPFiori.FUIProgressIndicatorControl.DisplayState : Swift.Hashable {}
extension SAPFiori.SegmentDestination : Swift.Equatable {}
extension SAPFiori.SegmentDestination : Swift.Hashable {}
extension SAPFiori.OutDateCellGeneration : Swift.Equatable {}
extension SAPFiori.OutDateCellGeneration : Swift.Hashable {}
extension SAPFiori.InDateCellGeneration : Swift.Equatable {}
extension SAPFiori.InDateCellGeneration : Swift.Hashable {}
extension SAPFiori.ReadingOrientation : Swift.Equatable {}
extension SAPFiori.ReadingOrientation : Swift.Hashable {}
extension SAPFiori.DateOwner : Swift.Equatable {}
extension SAPFiori.DateOwner : Swift.Hashable {}
extension SAPFiori.DateOwner : Swift.RawRepresentable {}
extension SAPFiori.MonthsOfYear : Swift.Equatable {}
extension SAPFiori.MonthsOfYear : Swift.Hashable {}
extension SAPFiori.MonthsOfYear : Swift.RawRepresentable {}
extension SAPFiori.SelectionRangePosition : Swift.Equatable {}
extension SAPFiori.SelectionRangePosition : Swift.Hashable {}
extension SAPFiori.SelectionRangePosition : Swift.RawRepresentable {}
extension SAPFiori.SelectionType : Swift.Equatable {}
extension SAPFiori.SelectionType : Swift.Hashable {}
extension SAPFiori.SelectionType : Swift.RawRepresentable {}
extension SAPFiori.DaysOfWeek : Swift.Equatable {}
extension SAPFiori.DaysOfWeek : Swift.Hashable {}
extension SAPFiori.DaysOfWeek : Swift.RawRepresentable {}
extension SAPFiori.FUIPageViewController.Style : Swift.Equatable {}
extension SAPFiori.FUIPageViewController.Style : Swift.Hashable {}
extension SAPFiori.FUICreateGeometryResultsDisplayMode : Swift.Equatable {}
extension SAPFiori.FUICreateGeometryResultsDisplayMode : Swift.Hashable {}
extension SAPFiori.FUIKPIProgressViewSize : Swift.Equatable {}
extension SAPFiori.FUIKPIProgressViewSize : Swift.Hashable {}
extension SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode : Swift.Equatable {}
extension SAPFiori.FUIModalProcessingIndicatorView.BackgroundMode : Swift.Hashable {}
extension SAPFiori.FUIMapToolbarButtonType : Swift.Equatable {}
extension SAPFiori.FUIMapToolbarButtonType : Swift.Hashable {}
extension SAPFiori.DateSegmentType : Swift.Equatable {}
extension SAPFiori.DateSegmentType : Swift.Hashable {}
extension SAPFiori.DateSegmentType : Swift.RawRepresentable {}
extension SAPFiori.FUIColorVariant : Swift.Equatable {}
extension SAPFiori.FUIColorVariant : Swift.Hashable {}
extension SAPFiori.FUIColorStyle : Swift.Equatable {}
extension SAPFiori.FUIColorStyle : Swift.Hashable {}
extension SAPFiori.FUIColorStyle : Swift.RawRepresentable {}
extension SAPFiori.FUIPaletteVersion : Swift.Equatable {}
extension SAPFiori.FUIPaletteVersion : Swift.Hashable {}
extension SAPFiori.FUITimelineCell.NodeType : Swift.Equatable {}
extension SAPFiori.FUITimelineCell.NodeType : Swift.Hashable {}
extension SAPFiori.FUITimelineCell.NodeType : Swift.RawRepresentable {}
extension SAPFiori.FUIMapEditingToolbarButtonActionType : Swift.Equatable {}
extension SAPFiori.FUIMapEditingToolbarButtonActionType : Swift.Hashable {}
extension SAPFiori.FUIKPIViewItemStyle : Swift.Equatable {}
extension SAPFiori.FUIKPIViewItemStyle : Swift.Hashable {}
extension SAPFiori.FUIKPIView.LeadingItemKerning : Swift.Equatable {}
extension SAPFiori.FUIKPIView.LeadingItemKerning : Swift.Hashable {}
extension SAPFiori.FUISectionHeaderFooterStyle : Swift.Equatable {}
extension SAPFiori.FUISectionHeaderFooterStyle : Swift.Hashable {}
extension SAPFiori.FUITableViewCellActionAccessoryType : Swift.Equatable {}
extension SAPFiori.FUITableViewCellActionAccessoryType : Swift.Hashable {}
extension SAPFiori.FUITimelineStatus : Swift.Equatable {}
extension SAPFiori.FUITimelineStatus : Swift.Hashable {}
extension SAPFiori.FUITimelineStatus : Swift.RawRepresentable {}
extension SAPFiori.FUIRatingControl.Style : Swift.Equatable {}
extension SAPFiori.FUIRatingControl.Style : Swift.Hashable {}
extension SAPFiori.FUIGridRowItemAlignment : Swift.Equatable {}
extension SAPFiori.FUIGridRowItemAlignment : Swift.Hashable {}
extension SAPFiori.FUIGridRowItemAlignment : Swift.RawRepresentable {}
extension SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text : Swift.Equatable {}
extension SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Text : Swift.Hashable {}
extension SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image : Swift.Equatable {}
extension SAPFiori.FUIGridTableViewCell.ObjectViewProperty.Image : Swift.Hashable {}
extension SAPFiori.FUIWelcomeControllerState : Swift.Equatable {}
extension SAPFiori.FUIWelcomeControllerState : Swift.Hashable {}
extension SAPFiori.FUIWelcomeControllerState : Swift.RawRepresentable {}
@available(*, deprecated, message: "This type is not needed any more since only WKWebView available")
extension SAPFiori.FUIWebViewContainer.WebViewType : Swift.Equatable {}
@available(*, deprecated, message: "This type is not needed any more since only WKWebView available")
extension SAPFiori.FUIWebViewContainer.WebViewType : Swift.Hashable {}
extension SAPFiori.FUISearchTagAcceptOption : Swift.Equatable {}
extension SAPFiori.FUISearchTagAcceptOption : Swift.Hashable {}
extension SAPFiori.FUIChartAxisId : Swift.Equatable {}
extension SAPFiori.FUIChartAxisId : Swift.Hashable {}
extension SAPFiori.FUIChartCategoryAxisLabelLayoutStyle : Swift.Equatable {}
extension SAPFiori.FUIChartCategoryAxisLabelLayoutStyle : Swift.Hashable {}
extension SAPFiori.FUIListPickerFormCell : SAPFiori.FUIPropertyFormCell {}
extension SAPFiori.FUIHorizontalAlignment : Swift.Equatable {}
extension SAPFiori.FUIHorizontalAlignment : Swift.Hashable {}
extension SAPFiori.FUICalendarStyle : Swift.Equatable {}
extension SAPFiori.FUICalendarStyle : Swift.Hashable {}
extension SAPFiori.FUIWeekStartDay : Swift.Equatable {}
extension SAPFiori.FUIWeekStartDay : Swift.Hashable {}
extension SAPFiori.FUIControlLayout : Swift.Equatable {}
extension SAPFiori.FUIControlLayout : Swift.Hashable {}
extension SAPFiori.FUIObjectCardContentView.OrderedPropertyRef : Swift.Equatable {}
extension SAPFiori.FUIObjectCardContentView.OrderedPropertyRef : Swift.Hashable {}
extension SAPFiori.FUIGridRowItemType : Swift.Equatable {}
extension SAPFiori.FUIGridRowItemType : Swift.Hashable {}
extension SAPFiori.FUIHierarchyListPickerType : Swift.Equatable {}
extension SAPFiori.FUIHierarchyListPickerType : Swift.Hashable {}
extension SAPFiori.FUICollectionViewVerticalAlignment : Swift.Equatable {}
extension SAPFiori.FUICollectionViewVerticalAlignment : Swift.Hashable {}
extension SAPFiori.FUICollectionViewVerticalAlignment : Swift.RawRepresentable {}
extension SAPFiori.FUIGeospatialType : Swift.Equatable {}
extension SAPFiori.FUIGeospatialType : Swift.Hashable {}
extension SAPFiori.FUIGeospatialType : Swift.RawRepresentable {}
extension SAPFiori.FUIButtonStyle : Swift.Equatable {}
extension SAPFiori.FUIButtonStyle : Swift.Hashable {}
extension SAPFiori.FUIButtonStyle : Swift.RawRepresentable {}
extension SAPFiori.FUIPasscodeInputMode : Swift.Equatable {}
extension SAPFiori.FUIPasscodeInputMode : Swift.Hashable {}
extension SAPFiori.FUIPasscodeInputMode : Swift.RawRepresentable {}
extension SAPFiori.FUIPasscodeSource : Swift.Equatable {}
extension SAPFiori.FUIPasscodeSource : Swift.Hashable {}
extension SAPFiori.FUIPasscodeSource : Swift.RawRepresentable {}
extension SAPFiori.FUIFilterFormCell : SAPFiori.FUIPropertyFormCell {}
